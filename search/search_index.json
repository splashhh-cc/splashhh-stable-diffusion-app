{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>InvokeAI is an implementation of Stable Diffusion, the open source text-to-image and image-to-image generator. It provides a streamlined process with various new features and options to aid the image generation process. It runs on Windows, Mac and Linux machines, and runs on GPU cards with as little as 4 GB or RAM.</p> <p>Quick links: [Discord Server] [Code and Downloads] [Bug Reports] [Discussion, Ideas &amp; Q&amp;A]</p> <p>Note</p> <p>This fork is rapidly evolving. Please use the Issues tab to report bugs and make feature requests. Be sure to use the provided templates. They will help aid diagnose issues faster.</p>"},{"location":"#hardware-requirements","title":"Hardware Requirements","text":""},{"location":"#system","title":"System","text":"<p>You wil need one of the following:</p> <ul> <li> An NVIDIA-based graphics card with 4 GB or more VRAM memory.</li> <li> An AMD-based graphics card with 4 GB or more VRAM memory (Linux     only)</li> <li> An Apple computer with an M1 chip.</li> </ul> <p>We do not recommend the following video cards due to issues with their running in half-precision mode and having insufficient VRAM to render 512x512 images in full-precision mode:</p> <ul> <li>NVIDIA 10xx series cards such as the 1080ti</li> <li>GTX 1650 series cards</li> <li>GTX 1660 series cards</li> </ul>"},{"location":"#memory-and-disk","title":"Memory and Disk","text":"<ul> <li>At least 12 GB Main Memory RAM.</li> <li>At least 18 GB of free disk space for the machine learning model, Python,     and all its dependencies.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>This fork is supported across Linux, Windows and Macintosh. Linux users can use either an Nvidia-based card (with CUDA support) or an AMD card (using the ROCm driver).</p>"},{"location":"#installation-getting-started-guide","title":"Installation Getting Started Guide","text":""},{"location":"#automated-installer","title":"Automated Installer","text":"<p>This method is recommended for 1st time users</p>"},{"location":"#manual-installation","title":"Manual Installation","text":"<p>This method is recommended for experienced users and developers</p>"},{"location":"#docker-installation","title":"Docker Installation","text":"<p>This method is recommended for those familiar with running Docker containers</p>"},{"location":"#other-installation-guides","title":"Other Installation Guides","text":"<ul> <li>PyPatchMatch</li> <li>XFormers</li> <li>CUDA and ROCm Drivers</li> <li>Installing New Models</li> </ul>"},{"location":"#invokeai-features","title":"InvokeAI Features","text":""},{"location":"#the-invokeai-web-interface","title":"The InvokeAI Web Interface","text":"<ul> <li>WebUI overview</li> <li>WebUI hotkey reference guide</li> <li>WebUI Unified Canvas for Img2Img, inpainting and outpainting</li> <li>Visual Manual for InvokeAI v2.3.1 (contributed by Statcomm)</li> </ul>"},{"location":"#the-invokeai-command-line-interface","title":"The InvokeAI Command Line Interface","text":"<ul> <li>Command Line Interace Reference Guide</li> </ul>"},{"location":"#image-management","title":"Image Management","text":"<ul> <li>Image2Image</li> <li>Inpainting</li> <li>Outpainting</li> <li>Adding custom styles and subjects</li> <li>Upscaling and Face Reconstruction</li> <li>Embiggen upscaling</li> <li>Other Features</li> </ul>"},{"location":"#model-management","title":"Model Management","text":"<ul> <li>Installing</li> <li>Model Merging</li> <li>Adding custom styles and subjects via embeddings</li> <li>Textual Inversion</li> <li>Not Safe for Work (NSFW) Checker</li> </ul>"},{"location":"#prompt-engineering","title":"Prompt Engineering","text":"<ul> <li>Prompt Syntax</li> <li>Generating Variations</li> </ul>"},{"location":"#latest-changes","title":"Latest Changes","text":""},{"location":"#v233-29-march-2023","title":"v2.3.3 (29 March 2023)","text":""},{"location":"#bug-fixes","title":"Bug Fixes","text":"<ol> <li>When using legacy checkpoints with an external VAE, the VAE file is now scanned for malware prior to loading. Previously only the main model weights file was scanned.</li> <li>Textual inversion will select an appropriate batchsize based on whether <code>xformers</code> is active, and will default to <code>xformers</code> enabled if the library is detected.</li> <li>The batch script log file names have been fixed to be compatible with Windows.</li> <li>Occasional corruption of the <code>.next_prefix</code> file (which stores the next output file name in sequence) on Windows systems is now detected and corrected.</li> <li>An infinite loop when opening the developer's console from within the <code>invoke.sh</code> script has been corrected.</li> </ol>"},{"location":"#enhancements","title":"Enhancements","text":"<ol> <li>It is now possible to load and run several community-contributed SD-2.0 based models, including the infamous \"Illuminati\" model.</li> <li>The \"NegativePrompts\" embedding file, and others like it, can now be loaded by placing it in the InvokeAI <code>embeddings</code> directory.</li> <li>If no <code>--model</code> is specified at launch time, InvokeAI will remember the last model used and restore it the next time it is launched.</li> <li>On Linux systems, the <code>invoke.sh</code> launcher now uses a prettier console-based interface. To take advantage of it, install the <code>dialog</code> package using your package manager (e.g. <code>sudo apt install dialog</code>).</li> <li>When loading legacy models (safetensors/ckpt) you can specify a custom config file and/or a VAE by placing like-named files in the same directory as the model following this example: <pre><code>my-favorite-model.ckpt\nmy-favorite-model.yaml\nmy-favorite-model.vae.pt      # or my-favorite-model.vae.safetensors\n</code></pre></li> </ol>"},{"location":"#v232-13-march-2023","title":"v2.3.2 (13 March 2023)","text":""},{"location":"#bugfixes","title":"Bugfixes","text":"<p>Since version 2.3.1 the following bugs have been fixed:</p> <ol> <li>Black images appearing for potential NSFW images when generating with legacy checkpoint models and both <code>--no-nsfw_checker</code> and <code>--ckpt_convert</code> turned on.</li> <li>Black images appearing when generating from models fine-tuned on Stable-Diffusion-2-1-base. When importing V2-derived models, you may be asked to select whether the model was derived from a \"base\" model (512 pixels) or the 768-pixel SD-2.1 model.</li> <li>The \"Use All\" button was not restoring the Hi-Res Fix setting on the WebUI</li> <li>When using the model installer console app, models failed to import correctly when importing from directories with spaces in their names. A similar issue with the output directory was also fixed.</li> <li>Crashes that occurred during model merging.</li> <li>Restore previous naming of Stable Diffusion base and 768 models.</li> <li>Upgraded to latest versions of <code>diffusers</code>, <code>transformers</code>, <code>safetensors</code> and <code>accelerate</code> libraries upstream. We hope that this will fix the <code>assertion NDArray &gt; 2**32</code> issue that MacOS users have had when generating images larger than 768x768 pixels. Please report back.</li> </ol> <p>As part of the upgrade to <code>diffusers</code>, the location of the diffusers-based models has changed from <code>models/diffusers</code> to <code>models/hub</code>. When you launch InvokeAI for the first time, it will prompt you to OK a one-time move. This should be quick and harmless, but if you have modified your <code>models/diffusers</code> directory in some way, for example using symlinks, you may wish to cancel the migration and make appropriate adjustments.</p>"},{"location":"#new-invokeai-batch-script","title":"New \"Invokeai-batch\" script","text":"<p>2.3.2 introduces a new command-line only script called <code>invokeai-batch</code> that can be used to generate hundreds of images from prompts and settings that vary systematically. This can be used to try the same prompt across multiple combinations of models, steps, CFG settings and so forth. It also allows you to template prompts and generate a combinatorial list like: <code>a shack in the mountains, photograph a shack in the mountains, watercolor a shack in the mountains, oil painting a chalet in the mountains, photograph a chalet in the mountains, watercolor a chalet in the mountains, oil painting a shack in the desert, photograph ...</code></p> <p>If you have a system with multiple GPUs, or a single GPU with lots of VRAM, you can parallelize generation across the combinatorial set, reducing wait times and using your system's resources efficiently (make sure you have good GPU cooling).</p> <p>To try <code>invokeai-batch</code> out. Launch the \"developer's console\" using the <code>invoke</code> launcher script, or activate the invokeai virtual environment manually. From the console, give the command <code>invokeai-batch --help</code> in order to learn how the script works and create your first template file for dynamic prompt generation.</p>"},{"location":"#v231-26-february-2023","title":"v2.3.1 (26 February 2023)","text":"<p>This is primarily a bugfix release, but it does provide several new features that will improve the user experience. </p>"},{"location":"#enhanced-support-for-model-management","title":"Enhanced support for model management","text":"<p>InvokeAI now makes it convenient to add, remove and modify models. You can individually import models that are stored on your local system, scan an entire folder and its subfolders for models and import them automatically, and even directly import models from the internet by providing their download URLs. You also have the option of designating a local folder to scan for new models each time InvokeAI is restarted.</p> <p>There are three ways of accessing the model management features:</p> <ol> <li>From the WebUI, click on the cube to the right of the model selection menu. This will bring up a form that allows you to import models individually from your local disk or scan a directory for models to import.</li> </ol> <p></p> <ol> <li>Using the Model Installer App</li> </ol> <p>Choose option (5) download and install models from the <code>invoke</code> launcher script to start a new console-based application for model management. You can use this to select from a curated set of starter models, or import checkpoint, safetensors, and diffusers models from a local disk or the internet. The example below shows importing two checkpoint URLs from popular SD sites and a HuggingFace diffusers model using its Repository ID. It also shows how to designate a folder to be scanned at startup time for new models to import.</p> <p>Command-line users can start this app using the command <code>invokeai-model-install</code>.</p> <p></p> <ol> <li>Using the Command Line Client (CLI)</li> </ol> <p>The <code>!install_model</code> and <code>!convert_model</code> commands have been enhanced to allow entering of URLs and local directories to scan and import. The first command installs .ckpt and .safetensors files as-is. The second one converts them into the faster diffusers format before installation.</p> <p>Internally InvokeAI is able to probe the contents of a .ckpt or .safetensors file to distinguish among v1.x, v2.x and inpainting models. This means that you do not need to include \"inpaint\" in your model names to use an inpainting model. Note that Stable Diffusion v2.x models will be autoconverted into a diffusers model the first time you use it.</p> <p>Please see INSTALLING MODELS for more information on model management.</p>"},{"location":"#an-improved-installer-experience","title":"An Improved Installer Experience","text":"<p>The installer now launches a console-based UI for setting and changing commonly-used startup options:</p> <p></p> <p>After selecting the desired options, the installer installs several support models needed by InvokeAI's face reconstruction and upscaling features and then launches the interface for selecting and installing models shown earlier. At any time,  you can edit the startup options by launching <code>invoke.sh</code>/<code>invoke.bat</code> and entering option (6) change InvokeAI startup options</p> <p>Command-line users can launch the new configure app using <code>invokeai-configure</code>.</p> <p>This release also comes with a renewed updater. To do an update without going through a whole reinstallation, launch <code>invoke.sh</code> or <code>invoke.bat</code> and choose option (9) update InvokeAI . This will bring you to a screen that prompts you to update to the latest released version, to the most current development version, or any released or unreleased version you choose by selecting the tag or branch of the desired version.</p> <p></p> <p>Command-line users can run this interface by typing <code>invokeai-configure</code></p>"},{"location":"#image-symmetry-options","title":"Image Symmetry Options","text":"<p>There are now features to generate horizontal and vertical symmetry during generation. The way these work is to wait until a selected step in the generation process and then to turn on a mirror image effect. In addition to generating some cool images, you can also use this to make side-by-side comparisons of how an image will look with more or fewer steps. Access this option from the WebUI by selecting Symmetry from the image generation settings, or within the CLI by using the options <code>--h_symmetry_time_pct</code> and <code>--v_symmetry_time_pct</code> (these can be abbreviated to <code>--h_sym</code> and <code>--v_sym</code> like all other options).</p> <p></p>"},{"location":"#a-new-unified-canvas-look","title":"A New Unified Canvas Look","text":"<p>This release introduces a beta version of the WebUI Unified Canvas. To try it out, open up the settings dialogue in the WebUI (gear icon) and select Use Canvas Beta Layout:</p> <p></p> <p>Refresh the screen and go to to Unified Canvas (left side of screen, third icon from the top). The new layout is designed to provide more space to work in and to keep the image controls close to the image itself:</p> <p></p>"},{"location":"#model-conversion-and-merging-within-the-webui","title":"Model conversion and merging within the WebUI","text":"<p>The WebUI now has an intuitive interface for model merging, as well as for permanent conversion of models from legacy .ckpt/.safetensors formats into diffusers format. These options are also available directly from the <code>invoke.sh</code>/<code>invoke.bat</code> scripts.</p>"},{"location":"#an-easier-way-to-contribute-translations-to-the-webui","title":"An easier way to contribute translations to the WebUI","text":"<p>We have migrated our translation efforts to Weblate, a FOSS translation product. Maintaining the growing project's translations is now far simpler for the maintainers and community. Please review our brief translation guide for more information on how to contribute.</p>"},{"location":"#numerous-internal-bugfixes-and-performance-issues","title":"Numerous internal bugfixes and performance issues","text":"<p>This releases quashes multiple bugs that were reported in 2.3.0. Major internal changes include upgrading to <code>diffusers 0.13.0</code>, and using the <code>compel</code> library for prompt parsing. See Detailed Change Log for a detailed list of bugs caught and squished.</p>"},{"location":"#summary-of-invokeai-command-line-scripts-all-accessible-via-the-launcher-menu","title":"Summary of InvokeAI command line scripts (all accessible via the launcher menu)","text":"Command Description <code>invokeai</code> Command line interface <code>invokeai --web</code> Web interface <code>invokeai-model-install</code> Model installer with console forms-based front end <code>invokeai-ti --gui</code> Textual inversion, with a console forms-based front end <code>invokeai-merge --gui</code> Model merging, with a console forms-based front end <code>invokeai-configure</code> Startup configuration; can also be used to reinstall support models <code>invokeai-update</code> InvokeAI software updater"},{"location":"#v230-9-february-2023","title":"v2.3.0 (9 February 2023)","text":""},{"location":"#migration-to-stable-diffusion-diffusers-models","title":"Migration to Stable Diffusion <code>diffusers</code> models","text":"<p>Previous versions of InvokeAI supported the original model file format introduced with Stable Diffusion 1.4. In the original format, known variously as \"checkpoint\", or \"legacy\" format, there is a single large weights file ending with <code>.ckpt</code> or <code>.safetensors</code>. Though this format has served the community well, it has a number of disadvantages, including file size, slow loading times, and a variety of non-standard variants that require special-case code to handle. In addition, because checkpoint files are actually a bundle of multiple machine learning sub-models, it is hard to swap different sub-models in and out, or to share common sub-models. A new format, introduced by the StabilityAI company in collaboration with HuggingFace, is called <code>diffusers</code> and consists of a directory of individual models. The most immediate benefit of <code>diffusers</code> is that they load from disk very quickly. A longer term benefit is that in the near future <code>diffusers</code> models will be able to share common sub-models, dramatically reducing disk space when you have multiple fine-tune models derived from the same base.</p> <p>When you perform a new install of version 2.3.0, you will be offered the option to install the <code>diffusers</code> versions of a number of popular SD models, including Stable Diffusion versions 1.5 and 2.1 (including the 768x768 pixel version of 2.1). These will act and work just like the checkpoint versions. Do not be concerned if you already have a lot of \".ckpt\" or \".safetensors\" models on disk! InvokeAI 2.3.0 can still load these and generate images from them without any extra intervention on your part.</p> <p>To take advantage of the optimized loading times of <code>diffusers</code> models, InvokeAI offers options to convert legacy checkpoint models into optimized <code>diffusers</code> models. If you use the <code>invokeai</code> command line interface, the relevant commands are:</p> <ul> <li><code>!convert_model</code> -- Take the path to a local checkpoint file or a URL that     is pointing to one, convert it into a <code>diffusers</code> model, and import it into     InvokeAI's models registry file.</li> <li><code>!optimize_model</code> -- If you already have a checkpoint model in your InvokeAI     models file, this command will accept its short name and convert it into a     like-named <code>diffusers</code> model, optionally deleting the original checkpoint     file.</li> <li><code>!import_model</code> -- Take the local path of either a checkpoint file or a     <code>diffusers</code> model directory and import it into InvokeAI's registry file. You     may also provide the ID of any diffusers model that has been published on     the     HuggingFace models repository     and it will be downloaded and installed automatically.</li> </ul> <p>The WebGUI offers similar functionality for model management.</p> <p>For advanced users, new command-line options provide additional functionality. Launching <code>invokeai</code> with the argument <code>--autoconvert &lt;path to directory&gt;</code> takes the path to a directory of checkpoint files, automatically converts them into <code>diffusers</code> models and imports them. Each time the script is launched, the directory will be scanned for new checkpoint files to be loaded. Alternatively, the <code>--ckpt_convert</code> argument will cause any checkpoint or safetensors model that is already registered with InvokeAI to be converted into a <code>diffusers</code> model on the fly, allowing you to take advantage of future diffusers-only features without explicitly converting the model and saving it to disk.</p> <p>Please see INSTALLING MODELS for more information on model management in both the command-line and Web interfaces.</p>"},{"location":"#support-for-the-xformers-memory-efficient-crossattention-package","title":"Support for the <code>XFormers</code> Memory-Efficient Crossattention Package","text":"<p>On CUDA (Nvidia) systems, version 2.3.0 supports the <code>XFormers</code> library. Once installed, the<code>xformers</code> package dramatically reduces the memory footprint of loaded Stable Diffusion models files and modestly increases image generation speed. <code>xformers</code> will be installed and activated automatically if you specify a CUDA system at install time.</p> <p>The caveat with using <code>xformers</code> is that it introduces slightly non-deterministic behavior, and images generated using the same seed and other settings will be subtly different between invocations. Generally the changes are unnoticeable unless you rapidly shift back and forth between images, but to disable <code>xformers</code> and restore fully deterministic behavior, you may launch InvokeAI using the <code>--no-xformers</code> option. This is most conveniently done by opening the file <code>invokeai/invokeai.init</code> with a text editor, and adding the line <code>--no-xformers</code> at the bottom.</p>"},{"location":"#a-negative-prompt-box-in-the-webui","title":"A Negative Prompt Box in the WebUI","text":"<p>There is now a separate text input box for negative prompts in the WebUI. This is convenient for stashing frequently-used negative prompts (\"mangled limbs, bad anatomy\"). The <code>[negative prompt]</code> syntax continues to work in the main prompt box as well.</p> <p>To see exactly how your prompts are being parsed, launch <code>invokeai</code> with the <code>--log_tokenization</code> option. The console window will then display the tokenization process for both positive and negative prompts.</p>"},{"location":"#model-merging","title":"Model Merging","text":"<p>Version 2.3.0 offers an intuitive user interface for merging up to three Stable Diffusion models using an intuitive user interface. Model merging allows you to mix the behavior of models to achieve very interesting effects. To use this, each of the models must already be imported into InvokeAI and saved in <code>diffusers</code> format, then launch the merger using a new menu item in the InvokeAI launcher script (<code>invoke.sh</code>, <code>invoke.bat</code>) or directly from the command line with <code>invokeai-merge --gui</code>. You will be prompted to select the models to merge, the proportions in which to mix them, and the mixing algorithm. The script will create a new merged <code>diffusers</code> model and import it into InvokeAI for your use.</p> <p>See MODEL MERGING for more details.</p>"},{"location":"#textual-inversion-training","title":"Textual Inversion Training","text":"<p>Textual Inversion (TI) is a technique for training a Stable Diffusion model to emit a particular subject or style when triggered by a keyword phrase. You can perform TI training by placing a small number of images of the subject or style in a directory, and choosing a distinctive trigger phrase, such as \"pointillist-style\". After successful training, The subject or style will be activated by including <code>&lt;pointillist-style&gt;</code> in your prompt.</p> <p>Previous versions of InvokeAI were able to perform TI, but it required using a command-line script with dozens of obscure command-line arguments. Version 2.3.0 features an intuitive TI frontend that will build a TI model on top of any <code>diffusers</code> model. To access training you can launch from a new item in the launcher script or from the command line using <code>invokeai-ti --gui</code>.</p> <p>See TEXTUAL INVERSION for further details.</p>"},{"location":"#a-new-installer-experience","title":"A New Installer Experience","text":"<p>The InvokeAI installer has been upgraded in order to provide a smoother and hopefully more glitch-free experience. In addition, InvokeAI is now packaged as a PyPi project, allowing developers and power-users to install InvokeAI with the command <code>pip install InvokeAI  --use-pep517</code>. Please see Installation for details.</p> <p>Developers should be aware that the <code>pip</code> installation procedure has been simplified and that the <code>conda</code> method is no longer supported at all. Accordingly, the <code>environments_and_requirements</code> directory has been deleted from the repository.</p>"},{"location":"#command-line-name-changes","title":"Command-line name changes","text":"<p>All of InvokeAI's functionality, including the WebUI, command-line interface, textual inversion training and model merging, can all be accessed from the <code>invoke.sh</code> and <code>invoke.bat</code> launcher scripts. The menu of options has been expanded to add the new functionality. For the convenience of developers and power users, we have normalized the names of the InvokeAI command-line scripts:</p> <ul> <li><code>invokeai</code> -- Command-line client</li> <li><code>invokeai --web</code> -- Web GUI</li> <li><code>invokeai-merge --gui</code> -- Model merging script with graphical front end</li> <li><code>invokeai-ti --gui</code> -- Textual inversion script with graphical front end</li> <li><code>invokeai-configure</code> -- Configuration tool for initializing the <code>invokeai</code>     directory and selecting popular starter models.</li> </ul> <p>For backward compatibility, the old command names are also recognized, including <code>invoke.py</code> and <code>configure-invokeai.py</code>. However, these are deprecated and will eventually be removed.</p> <p>Developers should be aware that the locations of the script's source code has been moved. The new locations are:</p> <ul> <li><code>invokeai</code> =&gt; <code>ldm/invoke/CLI.py</code></li> <li><code>invokeai-configure</code> =&gt; <code>ldm/invoke/config/configure_invokeai.py</code></li> <li><code>invokeai-ti</code>=&gt; <code>ldm/invoke/training/textual_inversion.py</code></li> <li><code>invokeai-merge</code> =&gt; <code>ldm/invoke/merge_diffusers</code></li> </ul> <p>Developers are strongly encouraged to perform an \"editable\" install of InvokeAI using <code>pip install -e .  --use-pep517</code> in the Git repository, and then to call the scripts using their 2.3.0 names, rather than executing the scripts directly. Developers should also be aware that the several important data files have been relocated into a new directory named <code>invokeai</code>. This includes the WebGUI's <code>frontend</code> and <code>backend</code> directories, and the <code>INITIAL_MODELS.yaml</code> files used by the installer to select starter models. Eventually all InvokeAI modules will be in subdirectories of <code>invokeai</code>.</p> <p>Please see 2.3.0 Release Notes for further details. For older changelogs, please visit the CHANGELOG.</p>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<p>Please check out our  Troubleshooting Guide to get solutions for common installation problems and other issues.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Anyone who wishes to contribute to this project, whether documentation, features, bug fixes, code cleanup, testing, or code reviews, is very much encouraged to do so. If you are unfamiliar with how to contribute to GitHub projects, here is a Getting Started Guide.</p> <p>A full set of contribution guidelines, along with templates, are in progress, but for now the most important thing is to make your pull request against the \"development\" branch, and not against \"main\". This will help keep public breakage to a minimum and will allow you to propose more radical changes.</p>"},{"location":"#contributors","title":"Contributors","text":"<p>This fork is a combined effort of various people from across the world. Check out the list of all these amazing people. We thank them for their time, hard work and effort.</p>"},{"location":"#support","title":"Support","text":"<p>For support, please use this repository's GitHub Issues tracking service. Feel free to send me an email if you use and like the script.</p> <p>Original portions of the software are Copyright \u00a9 2022-23 by The InvokeAI Team.</p>"},{"location":"#further-reading","title":"Further Reading","text":"<p>Please see the original README for more information on this software and underlying algorithm, located in the file README-CompViz.md.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#v230-15-january-2023","title":"v2.3.0 (15 January 2023)","text":"<p>**Transition to diffusers</p> <p>Version 2.3 provides support for both the traditional <code>.ckpt</code> weight checkpoint files as well as the HuggingFace <code>diffusers</code> format. This introduces several changes you should know about.</p> <ol> <li>The models.yaml format has been updated. There are now two    different type of configuration stanza. The traditional ckpt    one will look like this, with a <code>format</code> of <code>ckpt</code> and a    <code>weights</code> field that points to the absolute or ROOTDIR-relative    location of the ckpt file.</li> </ol> <pre><code>inpainting-1.5:\n   description: RunwayML SD 1.5 model optimized for inpainting (4.27 GB)\n   repo_id: runwayml/stable-diffusion-inpainting\n   format: ckpt\n   width: 512\n   height: 512\n   weights: models/ldm/stable-diffusion-v1/sd-v1-5-inpainting.ckpt\n   config: configs/stable-diffusion/v1-inpainting-inference.yaml\n   vae: models/ldm/stable-diffusion-v1/vae-ft-mse-840000-ema-pruned.ckpt\n</code></pre> <p>A configuration stanza for a diffusers model hosted at HuggingFace will look like this,   with a <code>format</code> of <code>diffusers</code> and a <code>repo_id</code> that points to the   repository ID of the model on HuggingFace:</p> <pre><code>stable-diffusion-2.1:\ndescription: Stable Diffusion version 2.1 diffusers model (5.21 GB)\nrepo_id: stabilityai/stable-diffusion-2-1\nformat: diffusers\n</code></pre> <p>A configuration stanza for a diffuers model stored locally should   look like this, with a <code>format</code> of <code>diffusers</code>, but a <code>path</code> field   that points at the directory that contains <code>model_index.json</code>:</p> <pre><code>waifu-diffusion:\ndescription: Latest waifu diffusion 1.4\nformat: diffusers\npath: models/diffusers/hakurei-haifu-diffusion-1.4\n</code></pre> <ol> <li>In order of precedence, InvokeAI will now use HF_HOME, then    XDG_CACHE_HOME, then finally default to <code>ROOTDIR/models</code> to    store HuggingFace diffusers models.</li> </ol> <p>Consequently, the format of the models directory has changed to    mimic the HuggingFace cache directory. When HF_HOME and XDG_HOME    are not set, diffusers models are now automatically downloaded    and retrieved from the directory <code>ROOTDIR/models/diffusers</code>,    while other models are stored in the directory    <code>ROOTDIR/models/hub</code>. This organization is the same as that used    by HuggingFace for its cache management.</p> <p>This allows you to share diffusers and ckpt model files easily with    other machine learning applications that use the HuggingFace    libraries. To do this, set the environment variable HF_HOME    before starting up InvokeAI to tell it what directory to    cache models in. To tell InvokeAI to use the standard HuggingFace    cache directory, you would set HF_HOME like this (Linux/Mac):</p> <p><code>export HF_HOME=~/.cache/huggingface</code></p> <p>Both HuggingFace and InvokeAI will fall back to the XDG_CACHE_HOME    environment variable if HF_HOME is not set; this path    takes precedence over <code>ROOTDIR/models</code> to allow for the same sharing    with other machine learning applications that use HuggingFace    libraries.</p> <ol> <li> <p>If you upgrade to InvokeAI 2.3.* from an earlier version, there    will be a one-time migration from the old models directory format    to the new one. You will see a message about this the first time    you start <code>invoke.py</code>.</p> </li> <li> <p>Both the front end back ends of the model manager have been    rewritten to accommodate diffusers. You can import models using    their local file path, using their URLs, or their HuggingFace    repo_ids. On the command line, all these syntaxes work:</p> </li> </ol> <pre><code>!import_model stabilityai/stable-diffusion-2-1-base\n!import_model /opt/sd-models/sd-1.4.ckpt\n!import_model https://huggingface.co/Fictiverse/Stable_Diffusion_PaperCut_Model/blob/main/PaperCut_v1.ckpt\n</code></pre> <p>**KNOWN BUGS (15 January 2023)</p> <ol> <li> <p>On CUDA systems, the 768 pixel stable-diffusion-2.0 and    stable-diffusion-2.1 models can only be run as <code>diffusers</code> models    when the <code>xformer</code> library is installed and configured. Without    <code>xformers</code>, InvokeAI returns black images.</p> </li> <li> <p>Inpainting and outpainting have regressed in quality.</p> </li> </ol> <p>Both these issues are being actively worked on.</p>"},{"location":"CHANGELOG/#v224-11-december-2022","title":"v2.2.4 (11 December 2022)","text":"<p>the <code>invokeai</code> directory</p> <p>Previously there were two directories to worry about, the directory that contained the InvokeAI source code and the launcher scripts, and the <code>invokeai</code> directory that contained the models files, embeddings, configuration and outputs. With the 2.2.4 release, this dual system is done away with, and everything, including the <code>invoke.bat</code> and <code>invoke.sh</code> launcher scripts, now live in a directory named <code>invokeai</code>. By default this directory is located in your home directory (e.g. <code>\\Users\\yourname</code> on Windows), but you can select where it goes at install time.</p> <p>After installation, you can delete the install directory (the one that the zip file creates when it unpacks). Do not delete or move the <code>invokeai</code> directory!</p> <p>Initialization file <code>invokeai/invokeai.init</code></p> <p>You can place frequently-used startup options in this file, such as the default number of steps or your preferred sampler. To keep everything in one place, this file has now been moved into the <code>invokeai</code> directory and is named <code>invokeai.init</code>.</p> <p>To update from Version 2.2.3</p> <p>The easiest route is to download and unpack one of the 2.2.4 installer files. When it asks you for the location of the <code>invokeai</code> runtime directory, respond with the path to the directory that contains your 2.2.3 <code>invokeai</code>. That is, if <code>invokeai</code> lives at <code>C:\\Users\\fred\\invokeai</code>, then answer with <code>C:\\Users\\fred</code> and answer \"Y\" when asked if you want to reuse the directory.</p> <p>The <code>update.sh</code> (<code>update.bat</code>) script that came with the 2.2.3 source installer does not know about the new directory layout and won't be fully functional.</p> <p>To update to 2.2.5 (and beyond) there's now an update path</p> <p>As they become available, you can update to more recent versions of InvokeAI using an <code>update.sh</code> (<code>update.bat</code>) script located in the <code>invokeai</code> directory. Running it without any arguments will install the most recent version of InvokeAI. Alternatively, you can get set releases by running the <code>update.sh</code> script with an argument in the command shell. This syntax accepts the path to the desired release's zip file, which you can find by clicking on the green \"Code\" button on this repository's home page.</p> <p>Other 2.2.4 Improvements</p> <ul> <li>Fix InvokeAI GUI initialization by @addianto in #1687</li> <li>fix link in documentation by @lstein in #1728</li> <li>Fix broken link by @ShawnZhong in #1736</li> <li>Remove reference to binary installer by @lstein in #1731</li> <li>documentation fixes for 2.2.3 by @lstein in #1740</li> <li>Modify installer links to point closer to the source installer by @ebr in   #1745</li> <li>add documentation warning about 1650/60 cards by @lstein in #1753</li> <li>Fix Linux source URL in installation docs by @andybearman in #1756</li> <li>Make install instructions discoverable in readme by @damian0815 in #1752</li> <li>typo fix by @ofirkris in #1755</li> <li>Non-interactive model download (support HUGGINGFACE_TOKEN) by @ebr in #1578</li> <li>fix(srcinstall): shell installer - cp scripts instead of linking by @tildebyte   in #1765</li> <li>stability and usage improvements to binary &amp; source installers by @lstein in   #1760</li> <li>fix off-by-one bug in cross-attention-control by @damian0815 in #1774</li> <li>Eventually update APP_VERSION to 2.2.3 by @spezialspezial in #1768</li> <li>invoke script cds to its location before running by @lstein in #1805</li> <li>Make PaperCut and VoxelArt models load again by @lstein in #1730</li> <li>Fix --embedding_directory / --embedding_path not working by @blessedcoolant in   #1817</li> <li>Clean up readme by @hipsterusername in #1820</li> <li>Optimized Docker build with support for external working directory by @ebr in   #1544</li> <li>disable pushing the cloud container by @mauwii in #1831</li> <li>Fix docker push github action and expand with additional metadata by @ebr in   #1837</li> <li>Fix Broken Link To Notebook by @VedantMadane in #1821</li> <li>Account for flat models by @spezialspezial in #1766</li> <li>Update invoke.bat.in isolate environment variables by @lynnewu in #1833</li> <li>Arch Linux Specific PatchMatch Instructions &amp; fixing conda install on linux by   @SammCheese in #1848</li> <li>Make force free GPU memory work in img2img by @addianto in #1844</li> <li>New installer by @lstein</li> </ul>"},{"location":"CHANGELOG/#v223-2-december-2022","title":"v2.2.3 (2 December 2022)","text":"<p>Note</p> <p>This point release removes references to the binary installer from the installation guide. The binary installer is not stable at the current time. First time users are encouraged to use the \"source\" installer as described in Installing InvokeAI with the Source Installer</p> <p>With InvokeAI 2.2, this project now provides enthusiasts and professionals a robust workflow solution for creating AI-generated and human facilitated compositions. Additional enhancements have been made as well, improving safety, ease of use, and installation.</p> <p>Optimized for efficiency, InvokeAI needs only ~3.5GB of VRAM to generate a 512x768 image (and less for smaller images), and is compatible with Windows/Linux/Mac (M1 &amp; M2).</p> <p>You can see the release video here, which introduces the main WebUI enhancement for version 2.2 - The Unified Canvas. This new workflow is the biggest enhancement added to the WebUI to date, and unlocks a stunning amount of potential for users to create and iterate on their creations. The following sections describe what's new for InvokeAI.</p>"},{"location":"CHANGELOG/#v222-30-november-2022","title":"v2.2.2 (30 November 2022)","text":"<p>Note</p> <p>The binary installer is not ready for prime time. First time users are recommended to install via the \"source\" installer accessible through the links at the bottom of this page.****</p> <p>With InvokeAI 2.2, this project now provides enthusiasts and professionals a robust workflow solution for creating AI-generated and human facilitated compositions. Additional enhancements have been made as well, improving safety, ease of use, and installation.</p> <p>Optimized for efficiency, InvokeAI needs only ~3.5GB of VRAM to generate a 512x768 image (and less for smaller images), and is compatible with Windows/Linux/Mac (M1 &amp; M2).</p> <p>You can see the release video here, which introduces the main WebUI enhancement for version 2.2 - The Unified Canvas. This new workflow is the biggest enhancement added to the WebUI to date, and unlocks a stunning amount of potential for users to create and iterate on their creations. The following sections describe what's new for InvokeAI.</p>"},{"location":"CHANGELOG/#v220-2-december-2022","title":"v2.2.0 (2 December 2022)","text":"<p>With InvokeAI 2.2, this project now provides enthusiasts and professionals a robust workflow solution for creating AI-generated and human facilitated compositions. Additional enhancements have been made as well, improving safety, ease of use, and installation.</p> <p>Optimized for efficiency, InvokeAI needs only ~3.5GB of VRAM to generate a 512x768 image (and less for smaller images), and is compatible with Windows/Linux/Mac (M1 &amp; M2).</p> <p>You can see the release video here, which introduces the main WebUI enhancement for version 2.2 - The Unified Canvas. This new workflow is the biggest enhancement added to the WebUI to date, and unlocks a stunning amount of potential for users to create and iterate on their creations. The following sections describe what's new for InvokeAI.</p>"},{"location":"CHANGELOG/#v213-13-november-2022","title":"v2.1.3 (13 November 2022)","text":"<ul> <li>A choice of installer scripts that automate installation and configuration.   See   Installation.</li> <li>A streamlined manual installation process that works for both Conda and   PIP-only installs. See   Manual Installation.</li> <li>The ability to save frequently-used startup options (model to load, steps,   sampler, etc) in a <code>.invokeai</code> file. See   Client</li> <li>Support for AMD GPU cards (non-CUDA) on Linux machines.</li> <li>Multiple bugs and edge cases squashed.</li> </ul>"},{"location":"CHANGELOG/#v210-2-november-2022","title":"v2.1.0 (2 November 2022)","text":"<ul> <li>update mac instructions to use invokeai for env name by @willwillems in #1030</li> <li>Update .gitignore by @blessedcoolant in #1040</li> <li>reintroduce fix for m1 from #579 missing after merge by @skurovec in #1056</li> <li>Update Stable_Diffusion_AI_Notebook.ipynb (Take 2) by @ChloeL19 in #1060</li> <li>Print out the device type which is used by @manzke in #1073</li> <li>Hires Addition by @hipsterusername in #1063</li> <li>fix for \"1 leaked semaphore objects to clean up at shutdown\" on M1 by   @skurovec in #1081</li> <li>Forward dream.py to invoke.py using the same interpreter, add deprecation   warning by @db3000 in #1077</li> <li>fix noisy images at high step counts by @lstein in #1086</li> <li>Generalize facetool strength argument by @db3000 in #1078</li> <li>Enable fast switching among models at the invoke&gt; command line by @lstein in   #1066</li> <li>Fix Typo, committed changing ldm environment to invokeai by @jdries3 in #1095</li> <li>Update generate.py by @unreleased in #1109</li> <li>Update 'ldm' env to 'invokeai' in troubleshooting steps by @19wolf in #1125</li> <li>Fixed documentation typos and resolved merge conflicts by @rupeshs in #1123</li> <li>Fix broken doc links, fix malaprop in the project subtitle by @majick in #1131</li> <li>Only output facetool parameters if enhancing faces by @db3000 in #1119</li> <li>Update gitignore to ignore codeformer weights at new location by   @spezialspezial in #1136</li> <li>fix links to point to invoke-ai.github.io #1117 by @mauwii in #1143</li> <li>Rework-mkdocs by @mauwii in #1144</li> <li>add option to CLI and pngwriter that allows user to set PNG compression level   by @lstein in #1127</li> <li>Fix img2img DDIM index out of bound by @wfng92 in #1137</li> <li>Fix gh actions by @mauwii in #1128</li> <li>update mac instructions to use invokeai for env name by @willwillems in #1030</li> <li>Update .gitignore by @blessedcoolant in #1040</li> <li>reintroduce fix for m1 from #579 missing after merge by @skurovec in #1056</li> <li>Update Stable_Diffusion_AI_Notebook.ipynb (Take 2) by @ChloeL19 in #1060</li> <li>Print out the device type which is used by @manzke in #1073</li> <li>Hires Addition by @hipsterusername in #1063</li> <li>fix for \"1 leaked semaphore objects to clean up at shutdown\" on M1 by   @skurovec in #1081</li> <li>Forward dream.py to invoke.py using the same interpreter, add deprecation   warning by @db3000 in #1077</li> <li>fix noisy images at high step counts by @lstein in #1086</li> <li>Generalize facetool strength argument by @db3000 in #1078</li> <li>Enable fast switching among models at the invoke&gt; command line by @lstein in   #1066</li> <li>Fix Typo, committed changing ldm environment to invokeai by @jdries3 in #1095</li> <li>Fixed documentation typos and resolved merge conflicts by @rupeshs in #1123</li> <li>Only output facetool parameters if enhancing faces by @db3000 in #1119</li> <li>add option to CLI and pngwriter that allows user to set PNG compression level   by @lstein in #1127</li> <li>Fix img2img DDIM index out of bound by @wfng92 in #1137</li> <li>Add text prompt to inpaint mask support by @lstein in #1133</li> <li>Respect http[s] protocol when making socket.io middleware by @damian0815 in   #976</li> <li>WebUI: Adds Codeformer support by @psychedelicious in #1151</li> <li>Skips normalizing prompts for web UI metadata by @psychedelicious in #1165</li> <li>Add Asymmetric Tiling by @carson-katri in #1132</li> <li>Web UI: Increases max CFG Scale to 200 by @psychedelicious in #1172</li> <li>Corrects color channels in face restoration; Fixes #1167 by @psychedelicious   in #1175</li> <li>Flips channels using array slicing instead of using OpenCV by @psychedelicious   in #1178</li> <li>Fix typo in docs: s/Formally/Formerly by @noodlebox in #1176</li> <li>fix clipseg loading problems by @lstein in #1177</li> <li>Correct color channels in upscale using array slicing by @wfng92 in #1181</li> <li>Web UI: Filters existing images when adding new images; Fixes #1085 by   @psychedelicious in #1171</li> <li>fix a number of bugs in textual inversion by @lstein in #1190</li> <li>Improve !fetch, add !replay command by @ArDiouscuros in #882</li> <li>Fix generation of image with s&gt;1000 by @holstvoogd in #951</li> <li>Web UI: Gallery improvements by @psychedelicious in #1198</li> <li>Update CLI.md by @krummrey in #1211</li> <li>outcropping improvements by @lstein in #1207</li> <li>add support for loading VAE autoencoders by @lstein in #1216</li> <li>remove duplicate fix_func for MPS by @wfng92 in #1210</li> <li>Metadata storage and retrieval fixes by @lstein in #1204</li> <li>nix: add shell.nix file by @Cloudef in #1170</li> <li>Web UI: Changes vite dist asset paths to relative by @psychedelicious in #1185</li> <li>Web UI: Removes isDisabled from PromptInput by @psychedelicious in #1187</li> <li>Allow user to generate images with initial noise as on M1 / mps system by   @ArDiouscuros in #981</li> <li>feat: adding filename format template by @plucked in #968</li> <li>Web UI: Fixes broken bundle by @psychedelicious in #1242</li> <li>Support runwayML custom inpainting model by @lstein in #1243</li> <li>Update IMG2IMG.md by @talitore in #1262</li> <li>New dockerfile - including a build- and a run- script as well as a GH-Action   by @mauwii in #1233</li> <li>cut over from karras to model noise schedule for higher steps by @lstein in   #1222</li> <li>Prompt tweaks by @lstein in #1268</li> <li>Outpainting implementation by @Kyle0654 in #1251</li> <li>fixing aspect ratio on hires by @tjennings in #1249</li> <li>Fix-build-container-action by @mauwii in #1274</li> <li>handle all unicode characters by @damian0815 in #1276</li> <li>adds models.user.yml to .gitignore by @JakeHL in #1281</li> <li>remove debug branch, set fail-fast to false by @mauwii in #1284</li> <li>Protect-secrets-on-pr by @mauwii in #1285</li> <li>Web UI: Adds initial inpainting implementation by @psychedelicious in #1225</li> <li>fix environment-mac.yml - tested on x64 and arm64 by @mauwii in #1289</li> <li>Use proper authentication to download model by @mauwii in #1287</li> <li>Prevent indexing error for mode RGB by @spezialspezial in #1294</li> <li>Integrate sd-v1-5 model into test matrix (easily expandable), remove   unecesarry caches by @mauwii in #1293</li> <li>add --no-interactive to configure_invokeai step by @mauwii in #1302</li> <li>1-click installer and updater. Uses micromamba to install git and conda into a   contained environment (if necessary) before running the normal installation   script by @cmdr2 in #1253</li> <li>configure_invokeai.py script downloads the weight files by @lstein in #1290</li> </ul>"},{"location":"CHANGELOG/#v201-13-october-2022","title":"v2.0.1 (13 October 2022)","text":"<ul> <li>fix noisy images at high step count when using k* samplers</li> <li>dream.py script now calls invoke.py module directly rather than via a new   python process (which could break the environment)</li> </ul>"},{"location":"CHANGELOG/#v200-9-october-2022","title":"v2.0.0 (9 October 2022)","text":"<ul> <li><code>dream.py</code> script renamed <code>invoke.py</code>. A <code>dream.py</code> script wrapper remains for   backward compatibility.</li> <li>Completely new WebGUI - launch with <code>python3 scripts/invoke.py --web</code></li> <li>Support for inpainting and   outpainting</li> <li>img2img runs on all k* samplers</li> <li>Support for   negative prompts</li> <li>Support for CodeFormer face reconstruction</li> <li>Support for Textual Inversion on Macintoshes</li> <li>Support in both WebGUI and CLI for   post-processing of previously-generated images   using facial reconstruction, ESRGAN upscaling, outcropping (similar to DALL-E   infinite canvas), and \"embiggen\" upscaling. See the <code>!fix</code> command.</li> <li>New <code>--hires</code> option on <code>invoke&gt;</code> line allows   larger images to be created without duplicating elements,   at the cost of some performance.</li> <li>New <code>--perlin</code> and <code>--threshold</code> options allow you to add and control   variation during image generation (see   Thresholding and Perlin Noise Initialization)</li> <li>Extensive metadata now written into PNG files, allowing reliable regeneration   of images and tweaking of previous settings.</li> <li>Command-line completion in <code>invoke.py</code> now works on Windows, Linux and Mac   platforms.</li> <li>Improved command-line completion behavior New commands   added:</li> <li>List command-line history with <code>!history</code></li> <li>Search command-line history with <code>!search</code></li> <li>Clear history with <code>!clear</code></li> <li>Deprecated <code>--full_precision</code> / <code>-F</code>. Simply omit it and <code>invoke.py</code> will auto   configure. To switch away from auto use the new flag like   <code>--precision=float32</code>.</li> </ul>"},{"location":"CHANGELOG/#v114-11-september-2022","title":"v1.14 (11 September 2022)","text":"<ul> <li>Memory optimizations for small-RAM cards. 512x512 now possible on 4 GB GPUs.</li> <li>Full support for Apple hardware with M1 or M2 chips.</li> <li>Add \"seamless mode\" for circular tiling of image. Generates beautiful effects.   (prixt).</li> <li>Inpainting support.</li> <li>Improved web server GUI.</li> <li>Lots of code and documentation cleanups.</li> </ul>"},{"location":"CHANGELOG/#v113-3-september-2022","title":"v1.13 (3 September 2022)","text":"<ul> <li>Support image variations (see VARIATIONS   (Kevin Gibbons and many contributors and   reviewers)</li> <li>Supports a Google Colab notebook for a standalone server running on Google   hardware Arturo Mendivil</li> <li>WebUI supports GFPGAN/ESRGAN facial reconstruction and upscaling   Kevin Gibbons</li> <li>WebUI supports incremental display of in-progress images during generation   Kevin Gibbons</li> <li>A new configuration file scheme that allows new models (including upcoming   stable-diffusion-v1.5) to be added without altering the code.   (David Wager)</li> <li>Can specify --grid on invoke.py command line as the default.</li> <li>Miscellaneous internal bug and stability fixes.</li> <li>Works on M1 Apple hardware.</li> <li>Multiple bug fixes.</li> </ul>"},{"location":"CHANGELOG/#v112-28-august-2022","title":"v1.12 (28 August 2022)","text":"<ul> <li>Improved file handling, including ability to read prompts from standard input.   (kudos to Yunsaki</li> <li>The web server is now integrated with the invoke.py script. Invoke by adding   --web to the invoke.py command arguments.</li> <li>Face restoration and upscaling via GFPGAN and Real-ESGAN are now automatically   enabled if the GFPGAN directory is located as a sibling to Stable Diffusion.   VRAM requirements are modestly reduced. Thanks to both   Blessedcoolant and   Oceanswave for their work on this.</li> <li>You can now swap samplers on the invoke&gt; command line.   Blessedcoolant</li> </ul>"},{"location":"CHANGELOG/#v111-26-august-2022","title":"v1.11 (26 August 2022)","text":"<ul> <li>NEW FEATURE: Support upscaling and face enhancement using the GFPGAN module.   (kudos to Oceanswave</li> <li>You now can specify a seed of -1 to use the previous image's seed, -2 to use   the seed for the image generated before that, etc. Seed memory only extends   back to the previous command, but will work on all images generated with the   -n# switch.</li> <li>Variant generation support temporarily disabled pending more general solution.</li> <li>Created a feature branch named yunsaki-morphing-invoke which adds   experimental support for iteratively modifying the prompt and its parameters.   Please   seePull Request #86 for   a synopsis of how this works. Note that when this feature is eventually added   to the main branch, it will may be modified significantly.</li> </ul>"},{"location":"CHANGELOG/#v110-25-august-2022","title":"v1.10 (25 August 2022)","text":"<ul> <li>A barebones but fully functional interactive web server for online generation   of txt2img and img2img.</li> </ul>"},{"location":"CHANGELOG/#v109-24-august-2022","title":"v1.09 (24 August 2022)","text":"<ul> <li>A new -v option allows you to generate multiple variants of an initial image   in img2img mode. (kudos to Oceanswave.    See this discussion in the PR for examples and details on use)</li> <li>Added ability to personalize text to image generation (kudos to   Oceanswave and   nicolai256)</li> <li>Enabled all of the samplers from k_diffusion</li> </ul>"},{"location":"CHANGELOG/#v108-24-august-2022","title":"v1.08 (24 August 2022)","text":"<ul> <li>Escape single quotes on the invoke&gt; command before trying to parse. This   avoids parse errors.</li> <li>Removed instruction to get Python3.8 as first step in Windows install.   Anaconda3 does it for you.</li> <li>Added bounds checks for numeric arguments that could cause crashes.</li> <li>Cleaned up the copyright and license agreement files.</li> </ul>"},{"location":"CHANGELOG/#v107-23-august-2022","title":"v1.07 (23 August 2022)","text":"<ul> <li>Image filenames will now never fill gaps in the sequence, but will be assigned   the next higher name in the chosen directory. This ensures that the alphabetic   and chronological sort orders are the same.</li> </ul>"},{"location":"CHANGELOG/#v106-23-august-2022","title":"v1.06 (23 August 2022)","text":"<ul> <li>Added weighted prompt support contributed by   xraxra</li> <li>Example of using weighted prompts to tweak a demonic figure contributed by   bmaltais</li> </ul>"},{"location":"CHANGELOG/#v105-22-august-2022-after-the-drop","title":"v1.05 (22 August 2022 - after the drop)","text":"<ul> <li>Filenames now use the following formats: 000010.95183149.png -- Two files   produced by the same command (e.g. -n2), 000010.26742632.png -- distinguished   by a different seed.</li> </ul> <p>000011.455191342.01.png -- Two files produced by the same command using   000011.455191342.02.png -- a batch size&gt;1 (e.g. -b2). They have the same seed.</p> <p>000011.4160627868.grid#1-4.png -- a grid of four images (-g); the whole grid   can be regenerated with the indicated key</p> <ul> <li>It should no longer be possible for one image to overwrite another</li> <li>You can use the \"cd\" and \"pwd\" commands at the invoke&gt; prompt to set and   retrieve the path of the output directory.</li> </ul>"},{"location":"CHANGELOG/#v104-22-august-2022-after-the-drop","title":"v1.04 (22 August 2022 - after the drop)","text":"<ul> <li>Updated README to reflect installation of the released weights.</li> <li>Suppressed very noisy and inconsequential warning when loading the frozen CLIP   tokenizer.</li> </ul>"},{"location":"CHANGELOG/#v103-22-august-2022","title":"v1.03 (22 August 2022)","text":"<ul> <li>The original txt2img and img2img scripts from the CompViz repository have been   moved into a subfolder named \"orig_scripts\", to reduce confusion.</li> </ul>"},{"location":"CHANGELOG/#v102-21-august-2022","title":"v1.02 (21 August 2022)","text":"<ul> <li>A copy of the prompt and all of its switches and options is now stored in the   corresponding image in a tEXt metadata field named \"Dream\". You can read the   prompt using scripts/images2prompt.py, or an image editor that allows you to   explore the full metadata. Please run \"conda env update\" to load the k_lms   dependencies!!</li> </ul>"},{"location":"CHANGELOG/#v101-21-august-2022","title":"v1.01 (21 August 2022)","text":"<ul> <li>added k_lms sampling. Please run \"conda env update\" to load the k_lms   dependencies!!</li> <li>use half precision arithmetic by default, resulting in faster execution and   lower memory requirements Pass argument --full_precision to invoke.py to get   slower but more accurate image generation</li> </ul>"},{"location":"CHANGELOG/#links","title":"Links","text":"<ul> <li>Read Me</li> </ul>"},{"location":"features/","title":"Overview","text":"<ul> <li> <p>The Basics</p> <ul> <li> <p>The Web User Interface</p> <p>Guide to the Web interface. Also see the WebUI Hotkeys Reference Guide</p> </li> <li> <p>The Unified Canvas</p> <p>Build complex scenes by combine and modifying multiple images in a stepwise fashion. This feature combines img2img, inpainting and outpainting in a single convenient digital artist-optimized user interface.</p> </li> <li> <p>The Command Line Interface (CLI)</p> <p>Scriptable access to InvokeAI's features.</p> </li> <li> <p>Visual Manual for InvokeAI (contributed by Statcomm)</p> </li> </ul> </li> <li> <p>Image Generation</p> <ul> <li> <p>Prompt Engineering</p> <p>Get the images you want with the InvokeAI prompt engineering language.</p> </li> <li> <p>Post-Processing</p> <p>Restore mangled faces and make images larger with upscaling. Also see the Embiggen Upscaling Guide.</p> </li> <li> <p>The Concepts Library</p> <p>Add custom subjects and styles using HuggingFace's repository of embeddings.</p> </li> <li> <p>Image-to-Image Guide for the CLI</p> <p>Use a seed image to build new creations in the CLI.</p> </li> <li> <p>Inpainting Guide for the CLI</p> <p>Selectively erase and replace portions of an existing image in the CLI.</p> </li> <li> <p>Outpainting Guide for the CLI</p> <p>Extend the borders of the image with an \"outcrop\" function within the CLI.</p> </li> <li> <p>Generating Variations</p> <p>Have an image you like and want to generate many more like it? Variations are the ticket.</p> </li> </ul> </li> <li> <p>Model Management</p> <ul> <li> <p>Model Installation</p> <p>Learn how to import third-party models and switch among them. This guide also covers optimizing models to load quickly.</p> </li> <li> <p>Merging Models</p> <p>Teach an old model new tricks. Merge 2-3 models together to create a new model that combines characteristics of the originals.</p> </li> <li> <p>Textual Inversion</p> <p>Personalize models by adding your own style or subjects.</p> </li> </ul> </li> <li> <p>Other Features</p> <ul> <li> <p>The NSFW Checker</p> <p>Prevent InvokeAI from displaying unwanted racy images.</p> </li> <li> <p>Miscellaneous</p> <p>Run InvokeAI on Google Colab, generate images with repeating patterns, batch process a file of prompts, increase the \"creativity\" of image generation by adding initial noise, and more!</p> </li> </ul> </li> </ul>"},{"location":"features/CLI/","title":"CLI","text":""},{"location":"features/CLI/#interactive-command-line-interface","title":"Interactive Command Line Interface","text":"<p>The InvokeAI command line interface (CLI) provides scriptable access to InvokeAI's features.Some advanced features are only available through the CLI, though they eventually find their way into the WebUI.</p> <p>The CLI is accessible from the <code>invoke.sh</code>/<code>invoke.bat</code> launcher by selecting option (1). Alternatively, it can be launched directly from the command line by activating the InvokeAI environment and giving the command:</p> <pre><code>invokeai\n</code></pre> <p>After some startup messages, you will be presented with the <code>invoke&gt;</code> prompt. Here you can type prompts to generate images and issue other commands to load and manipulate generative models. The CLI has a large number of command-line options that control its behavior. To get a concise summary of the options, call <code>invokeai</code> with the <code>--help</code> argument:</p> <pre><code>invokeai --help\n</code></pre> <p>The script uses the readline library to allow for in-line editing, command history (Up and Down), autocompletion, and more. To help keep track of which prompts generated which images, the script writes a log file of image names and prompts to the selected output directory.</p> <p>Here is a typical session</p> <pre><code>PS1:C:\\Users\\fred&gt; invokeai\n* Initializing, be patient...\n* Initializing, be patient...\n&gt;&gt; Initialization file /home/lstein/invokeai/invokeai.init found. Loading...\n&gt;&gt; Internet connectivity is True\n&gt;&gt; InvokeAI, version 2.3.0-rc5\n&gt;&gt; InvokeAI runtime directory is \"/home/lstein/invokeai\"\n&gt;&gt; GFPGAN Initialized\n&gt;&gt; CodeFormer Initialized\n&gt;&gt; ESRGAN Initialized\n&gt;&gt; Using device_type cuda\n&gt;&gt; xformers memory-efficient attention is available and enabled\n     (...more initialization messages...)\n* Initialization done! Awaiting your command (-h for help, 'q' to quit)\ninvoke&gt; ashley judd riding a camel -n2 -s150\nOutputs:\n   outputs/img-samples/00009.png: \"ashley judd riding a camel\" -n2 -s150 -S 416354203\noutputs/img-samples/00010.png: \"ashley judd riding a camel\" -n2 -s150 -S 1362479620\ninvoke&gt; \"there's a fly in my soup\" -n6 -g\n    outputs/img-samples/00011.png: \"there's a fly in my soup\" -n6 -g -S 2685670268\nseeds for individual rows: [2685670268, 1216708065, 2335773498, 822223658, 714542046, 3395302430]\ninvoke&gt; q\n</code></pre> <p></p>"},{"location":"features/CLI/#arguments","title":"Arguments","text":"<p>The script recognizes a series of command-line switches that will change important global defaults, such as the directory for image outputs and the location of the model weight files.</p>"},{"location":"features/CLI/#list-of-arguments-recognized-at-the-command-line","title":"List of arguments recognized at the command line","text":"<p>These command-line arguments can be passed to <code>invoke.py</code> when you first run it from the Windows, Mac or Linux command line. Some set defaults that can be overridden on a per-prompt basis (see List of prompt arguments. Others</p> Argument  Shortcut  Default  Description <code>--help</code> <code>-h</code> Print a concise help message. <code>--outdir &lt;path&gt;</code> <code>-o&lt;path&gt;</code> <code>outputs/img_samples</code> Location for generated images. <code>--prompt_as_dir</code> <code>-p</code> <code>False</code> Name output directories using the prompt text. <code>--from_file &lt;path&gt;</code> <code>None</code> Read list of prompts from a file. Use <code>-</code> to read from standard input <code>--model &lt;modelname&gt;</code> <code>stable-diffusion-1.5</code> Loads the initial model specified in configs/models.yaml. <code>--ckpt_convert</code> <code>False</code> If provided both .ckpt and .safetensors files will be auto-converted into diffusers format in memory <code>--autoconvert &lt;path&gt;</code> <code>None</code> On startup, scan the indicated directory for new .ckpt/.safetensor files and automatically convert and import them <code>--precision</code> <code>fp16</code> Provide <code>fp32</code> for full precision mode, <code>fp16</code> for half-precision. <code>fp32</code> needed for Macintoshes and some NVidia cards. <code>--png_compression &lt;0-9&gt;</code> <code>-z&lt;0-9&gt;</code> <code>6</code> Select level of compression for output files, from 0 (no compression) to 9 (max compression) <code>--safety-checker</code> <code>False</code> Activate safety checker for NSFW and other potentially disturbing imagery <code>--patchmatch</code>, <code>--no-patchmatch</code> <code>--patchmatch</code> Load/Don't load the PatchMatch inpainting extension <code>--xformers</code>, <code>--no-xformers</code> <code>--xformers</code> Load/Don't load the Xformers memory-efficient attention module (CUDA only) <code>--web</code> <code>False</code> Start in web server mode <code>--host &lt;ip addr&gt;</code> <code>localhost</code> Which network interface web server should listen on. Set to 0.0.0.0 to listen on any. <code>--port &lt;port&gt;</code> <code>9090</code> Which port web server should listen for requests on. <code>--config &lt;path&gt;</code> <code>configs/models.yaml</code> Configuration file for models and their weights. <code>--iterations &lt;int&gt;</code> <code>-n&lt;int&gt;</code> <code>1</code> How many images to generate per prompt. <code>--width &lt;int&gt;</code> <code>-W&lt;int&gt;</code> <code>512</code> Width of generated image <code>--height &lt;int&gt;</code> <code>-H&lt;int&gt;</code> <code>512</code> Height of generated image <code>--strength &lt;float&gt;</code> <code>-s&lt;float&gt;</code> <code>0.75</code> For img2img: how hard to try to match the prompt to the initial image. Ranges from 0.0-0.99, with higher values replacing the initial image completely. <code>--fit</code> <code>-F</code> <code>False</code> For img2img: scale the init image to fit into the specified -H and -W dimensions <code>--grid</code> <code>-g</code> <code>False</code> Save all image series as a grid rather than individually. <code>--sampler &lt;sampler&gt;</code> <code>-A&lt;sampler&gt;</code> <code>k_lms</code> Sampler to use. Use <code>-h</code> to get list of available samplers. <code>--seamless</code> <code>False</code> Create interesting effects by tiling elements of the image. <code>--embedding_path &lt;path&gt;</code> <code>None</code> Path to pre-trained embedding manager checkpoints, for custom models <code>--gfpgan_model_path</code> <code>experiments/pretrained_models/GFPGANv1.4.pth</code> Path to GFPGAN model file. <code>--free_gpu_mem</code> <code>False</code> Free GPU memory after sampling, to allow image decoding and saving in low VRAM conditions <code>--precision</code> <code>auto</code> Set model precision, default is selected by device. Options: auto, float32, float16, autocast <p>These arguments are deprecated but still work</p> Argument Shortcut Default Description <code>--full_precision</code> <code>False</code> Same as <code>--precision=fp32</code> <code>--weights &lt;path&gt;</code> <code>None</code> Path to weights file; use <code>--model stable-diffusion-1.4</code> instead <code>--laion400m</code> <code>-l</code> <code>False</code> Use older LAION400m weights; use <code>--model=laion400m</code> instead <p>Tip</p> <p>On Windows systems, you may run into   problems when passing the invoke script standard backslashed path   names because the Python interpreter treats \"\\\" as an escape.   You can either double your slashes (ick): <code>C:\\\\path\\\\to\\\\my\\\\file</code>, or   use Linux/Mac style forward slashes (better): <code>C:/path/to/my/file</code>.</p>"},{"location":"features/CLI/#the-invokeai-initialization-file","title":"The .invokeai initialization file","text":"<p>To start up invoke.py with your preferred settings, place your desired startup options in a file in your home directory named <code>.invokeai</code> The file should contain the startup options as you would type them on the command line (<code>--steps=10 --grid</code>), one argument per line, or a mixture of both using any of the accepted command switch formats:</p> <p>my unmodified initialization file</p> ~/.invokeai<pre><code># InvokeAI initialization file\n# This is the InvokeAI initialization file, which contains command-line default values.\n# Feel free to edit. If anything goes wrong, you can re-initialize this file by deleting\n# or renaming it and then running invokeai-configure again.\n# The --root option below points to the folder in which InvokeAI stores its models, configs and outputs.\n--root=\"/Users/mauwii/invokeai\"\n# the --outdir option controls the default location of image files.\n--outdir=\"/Users/mauwii/invokeai/outputs\"\n# You may place other  frequently-used startup commands here, one or more per line.\n# Examples:\n# --web --host=0.0.0.0\n# --steps=20\n# -Ak_euler_a -C10.0\n</code></pre> <p>Note</p> <p>The  initialization file only accepts the command line arguments. There are additional arguments that you can provide on the <code>invoke&gt;</code> command line (such as <code>-n</code> or <code>--iterations</code>) that cannot be entered into this file. Also be alert for empty blank lines at the end of the file, which will cause an arguments error at startup time.</p>"},{"location":"features/CLI/#list-of-prompt-arguments","title":"List of prompt arguments","text":"<p>After the invoke.py script initializes, it will present you with a <code>invoke&gt;</code> prompt. Here you can enter information to generate images from text (txt2img), to embellish an existing image or sketch (img2img), or to selectively alter chosen regions of the image (inpainting).</p>"},{"location":"features/CLI/#txt2img","title":"txt2img","text":"<pre><code>invoke&gt; waterfall and rainbow -W640 -H480\n</code></pre> <p>This will create the requested image with the dimensions 640 (width) and 480 (height).</p> <p>Here are the invoke&gt; command that apply to txt2img:</p> Argument  Shortcut  Default  Description \"my prompt\" Text prompt to use. The quotation marks are optional. <code>--width &lt;int&gt;</code> <code>-W&lt;int&gt;</code> <code>512</code> Width of generated image <code>--height &lt;int&gt;</code> <code>-H&lt;int&gt;</code> <code>512</code> Height of generated image <code>--iterations &lt;int&gt;</code> <code>-n&lt;int&gt;</code> <code>1</code> How many images to generate from this prompt <code>--steps &lt;int&gt;</code> <code>-s&lt;int&gt;</code> <code>50</code> How many steps of refinement to apply <code>--cfg_scale &lt;float&gt;</code> <code>-C&lt;float&gt;</code> <code>7.5</code> How hard to try to match the prompt to the generated image; any number greater than 1.0 works, but the useful range is roughly 5.0 to 20.0 <code>--seed &lt;int&gt;</code> <code>-S&lt;int&gt;</code> <code>None</code> Set the random seed for the next series of images. This can be used to recreate an image generated previously. <code>--sampler &lt;sampler&gt;</code> <code>-A&lt;sampler&gt;</code> <code>k_lms</code> Sampler to use. Use -h to get list of available samplers. <code>--karras_max &lt;int&gt;</code> <code>29</code> When using k_* samplers, set the maximum number of steps before shifting from using the Karras noise schedule (good for low step counts) to the LatentDiffusion noise schedule (good for high step counts) This value is sticky. [29] <code>--hires_fix</code> Larger images often have duplication artefacts. This option suppresses duplicates by generating the image at low res, and then using img2img to increase the resolution <code>--png_compression &lt;0-9&gt;</code> <code>-z&lt;0-9&gt;</code> <code>6</code> Select level of compression for output files, from 0 (no compression) to 9 (max compression) <code>--grid</code> <code>-g</code> <code>False</code> Turn on grid mode to return a single image combining all the images generated by this prompt <code>--individual</code> <code>-i</code> <code>True</code> Turn off grid mode (deprecated; leave off --grid instead) <code>--outdir &lt;path&gt;</code> <code>-o&lt;path&gt;</code> <code>outputs/img_samples</code> Temporarily change the location of these images <code>--seamless</code> <code>False</code> Activate seamless tiling for interesting effects <code>--seamless_axes</code> <code>x,y</code> Specify which axes to use circular convolution on. <code>--log_tokenization</code> <code>-t</code> <code>False</code> Display a color-coded list of the parsed tokens derived from the prompt <code>--skip_normalization</code> <code>-x</code> <code>False</code> Weighted subprompts will not be normalized. See Weighted Prompts <code>--upscale &lt;int&gt; &lt;float&gt;</code> <code>-U &lt;int&gt; &lt;float&gt;</code> <code>-U 1 0.75</code> Upscale image by magnification factor (2, 4), and set strength of upscaling (0.0-1.0). If strength not set, will default to 0.75. <code>--facetool_strength &lt;float&gt;</code> <code>-G &lt;float&gt;</code> <code>-G0</code> Fix faces (defaults to using the GFPGAN algorithm); argument indicates how hard the algorithm should try (0.0-1.0) <code>--facetool &lt;name&gt;</code> <code>-ft &lt;name&gt;</code> <code>-ft gfpgan</code> Select face restoration algorithm to use: gfpgan, codeformer <code>--codeformer_fidelity</code> <code>-cf &lt;float&gt;</code> <code>0.75</code> Used along with CodeFormer. Takes values between 0 and 1. 0 produces high quality but low accuracy. 1 produces high accuracy but low quality <code>--save_original</code> <code>-save_orig</code> <code>False</code> When upscaling or fixing faces, this will cause the original image to be saved rather than replaced. <code>--variation &lt;float&gt;</code> <code>-v&lt;float&gt;</code> <code>0.0</code> Add a bit of noise (0.0=none, 1.0=high) to the image in order to generate a series of variations. Usually used in combination with <code>-S&lt;seed&gt;</code> and <code>-n&lt;int&gt;</code> to generate a series a riffs on a starting image. See Variations. <code>--with_variations &lt;pattern&gt;</code> <code>None</code> Combine two or more variations. See Variations for now to use this. <code>--save_intermediates &lt;n&gt;</code> <code>None</code> Save the image from every nth step into an \"intermediates\" folder inside the output directory <code>--h_symmetry_time_pct &lt;float&gt;</code> <code>None</code> Create symmetry along the X axis at the desired percent complete of the generation process. (Must be between 0.0 and 1.0; set to a very small number like 0.0001 for just after the first step of generation.) <code>--v_symmetry_time_pct &lt;float&gt;</code> <code>None</code> Create symmetry along the Y axis at the desired percent complete of the generation process. (Must be between 0.0 and 1.0; set to a very small number like 0.0001 for just after the first step of generation.) <p>Note</p> <p>the width and height of the image must be multiples of 64. You can provide different values, but they will be rounded down to the nearest multiple of 64.</p> <p>This is a example of img2img</p> <pre><code>invoke&gt; waterfall and rainbow -I./vacation-photo.png -W640 -H480 --fit\n</code></pre> <p>This will modify the indicated vacation photograph by making it more like the prompt. Results will vary greatly depending on what is in the image. We also ask to --fit the image into a box no bigger than 640x480. Otherwise the image size will be identical to the provided photo and you may run out of memory if it is large.</p> <p>In addition to the command-line options recognized by txt2img, img2img accepts additional options:</p> Argument  Shortcut Default Description <code>--init_img &lt;path&gt;</code> <code>-I&lt;path&gt;</code> <code>None</code> Path to the initialization image <code>--fit</code> <code>-F</code> <code>False</code> Scale the image to fit into the specified -H and -W dimensions <code>--strength &lt;float&gt;</code> <code>-s&lt;float&gt;</code> <code>0.75</code> How hard to try to match the prompt to the initial image. Ranges from 0.0-0.99, with higher values replacing the initial image completely."},{"location":"features/CLI/#inpainting","title":"inpainting","text":"<pre><code>invoke&gt; waterfall and rainbow -I./vacation-photo.png -M./vacation-mask.png -W640 -H480 --fit\n</code></pre> <p>This will do the same thing as img2img, but image alterations will only occur within transparent areas defined by the mask file specified by <code>-M</code>. You may also supply just a single initial image with the areas to overpaint made transparent, but you must be careful not to destroy the pixels underneath when you create the transparent areas. See Inpainting for details.</p> <p>inpainting accepts all the arguments used for txt2img and img2img, as well as the --mask (-M) and --text_mask (-tm) arguments:</p> Argument  Shortcut Default Description <code>--init_mask &lt;path&gt;</code> <code>-M&lt;path&gt;</code> <code>None</code> Path to an image the same size as the initial_image, with areas for inpainting made transparent. <code>--invert_mask</code> False If true, invert the mask so that transparent areas are opaque and vice versa. <code>--text_mask &lt;prompt&gt; [&lt;float&gt;]</code> <code>-tm &lt;prompt&gt; [&lt;float&gt;]</code> Create a mask from a text prompt describing part of the image <p>The mask may either be an image with transparent areas, in which case the inpainting will occur in the transparent areas only, or a black and white image, in which case all black areas will be painted into.</p> <p><code>--text_mask</code> (short form <code>-tm</code>) is a way to generate a mask using a text description of the part of the image to replace. For example, if you have an image of a breakfast plate with a bagel, toast and scrambled eggs, you can selectively mask the bagel and replace it with a piece of cake this way:</p> <pre><code>invoke&gt; a piece of cake -I /path/to/breakfast.png -tm bagel\n</code></pre> <p>The algorithm uses clipseg to classify different regions of the image. The classifier puts out a confidence score for each region it identifies. Generally regions that score above 0.5 are reliable, but if you are getting too much or too little masking you can adjust the threshold down (to get more mask), or up (to get less). In this example, by passing <code>-tm</code> a higher value, we are insisting on a more stringent classification.</p> <pre><code>invoke&gt; a piece of cake -I /path/to/breakfast.png -tm bagel 0.6\n</code></pre>"},{"location":"features/CLI/#custom-styles-and-subjects","title":"Custom Styles and Subjects","text":"<p>You can load and use hundreds of community-contributed Textual Inversion models just by typing the appropriate trigger phrase. Please see Concepts Library for more details.</p>"},{"location":"features/CLI/#other-commands","title":"Other Commands","text":"<p>The CLI offers a number of commands that begin with \"!\".</p>"},{"location":"features/CLI/#postprocessing-images","title":"Postprocessing images","text":"<p>To postprocess a file using face restoration or upscaling, use the <code>!fix</code> command.</p>"},{"location":"features/CLI/#fix","title":"<code>!fix</code>","text":"<p>This command runs a post-processor on a previously-generated image. It takes a PNG filename or path and applies your choice of the <code>-U</code>, <code>-G</code>, or <code>--embiggen</code> switches in order to fix faces or upscale. If you provide a filename, the script will look for it in the current output directory. Otherwise you can provide a full or partial path to the desired file.</p> <p>Some examples:</p> <p>Upscale to 4X its original size and fix faces using codeformer</p> <pre><code>invoke&gt; !fix 0000045.4829112.png -G1 -U4 -ft codeformer\n</code></pre> <p>Use the GFPGAN algorithm to fix faces, then upscale to 3X using --embiggen</p> <pre><code>invoke&gt; !fix 0000045.4829112.png -G0.8 -ft gfpgan\n&gt;&gt; fixing outputs/img-samples/0000045.4829112.png\n&gt;&gt; retrieved seed 4829112 and prompt \"boy enjoying a banana split\"\n&gt;&gt; GFPGAN - Restoring Faces for image seed:4829112\nOutputs:\n[1] outputs/img-samples/000017.4829112.gfpgan-00.png: !fix \"outputs/img-samples/0000045.4829112.png\" -s 50 -S  -W 512 -H 512 -C 7.5 -A k_lms -G 0.8\n</code></pre>"},{"location":"features/CLI/#mask","title":"<code>!mask</code>","text":"<p>This command takes an image, a text prompt, and uses the <code>clipseg</code> algorithm to automatically generate a mask of the area that matches the text prompt. It is useful for debugging the text masking process prior to inpainting with the <code>--text_mask</code> argument. See [INPAINTING.md] for details.</p>"},{"location":"features/CLI/#model-selection-and-importation","title":"Model selection and importation","text":"<p>The CLI allows you to add new models on the fly, as well as to switch among them rapidly without leaving the script. There are several different model formats, each described in the Model Installation Guide.</p>"},{"location":"features/CLI/#models","title":"<code>!models</code>","text":"<p>This prints out a list of the models defined in `config/models.yaml'. The active model is bold-faced</p> <p>Example:</p> <pre>\ninpainting-1.5            not loaded  Stable Diffusion inpainting model\nstable-diffusion-1.5          active  Stable Diffusion v1.5\nwaifu-diffusion           not loaded  Waifu Diffusion v1.4\n</pre>"},{"location":"features/CLI/#switch-model","title":"<code>!switch &lt;model&gt;</code>","text":"<p>This quickly switches from one model to another without leaving the CLI script. <code>invoke.py</code> uses a memory caching system; once a model has been loaded, switching back and forth is quick. The following example shows this in action. Note how the second column of the <code>!models</code> table changes to <code>cached</code> after a model is first loaded, and that the long initialization step is not needed when loading a cached model.</p>"},{"location":"features/CLI/#import_model-hugging_face_repo_id","title":"<code>!import_model &lt;hugging_face_repo_ID&gt;</code>","text":"<p>This imports and installs a <code>diffusers</code>-style model that is stored on the HuggingFace Web Site. You can look up any Stable Diffusion diffusers model and install it with a command like the following:</p> <pre><code>!import_model prompthero/openjourney\n</code></pre>"},{"location":"features/CLI/#import_model-pathtodiffusersdirectory","title":"<code>!import_model &lt;path/to/diffusers/directory&gt;</code>","text":"<p>If you have a copy of a <code>diffusers</code>-style model saved to disk, you can import it by passing the path to model's top-level directory.</p>"},{"location":"features/CLI/#import_model-url","title":"<code>!import_model &lt;url&gt;</code>","text":"<p>For a <code>.ckpt</code> or <code>.safetensors</code> file, if you have a direct download URL for the file, you can provide it to <code>!import_model</code> and the file will be downloaded and installed for you.</p>"},{"location":"features/CLI/#import_model-pathtomodelweightsckpt","title":"<code>!import_model &lt;path/to/model/weights.ckpt&gt;</code>","text":"<p>This command imports a new model weights file into InvokeAI, makes it available for image generation within the script, and writes out the configuration for the model into <code>config/models.yaml</code> for use in subsequent sessions.</p> <p>Provide <code>!import_model</code> with the path to a weights file ending in <code>.ckpt</code>. If you type a partial path and press tab, the CLI will autocomplete. Although it will also autocomplete to <code>.vae</code> files, these are not currenty supported (but will be soon).</p> <p>When you hit return, the CLI will prompt you to fill in additional information about the model, including the short name you wish to use for it with the <code>!switch</code> command, a brief description of the model, the default image width and height to use with this model, and the model's configuration file. The latter three fields are automatically filled with reasonable defaults. In the example below, the bold-faced text shows what the user typed in with the exception of the width, height and configuration file paths, which were filled in automatically.</p>"},{"location":"features/CLI/#import_model-pathtodirectory_of_models","title":"<code>!import_model &lt;path/to/directory_of_models&gt;</code>","text":"<p>If you provide the path of a directory that contains one or more <code>.ckpt</code> or <code>.safetensors</code> files, the CLI will scan the directory and interactively offer to import the models it finds there. Also see the <code>--autoconvert</code> command-line option.</p>"},{"location":"features/CLI/#edit_model-name_of_model","title":"<code>!edit_model &lt;name_of_model&gt;</code>","text":"<p>The <code>!edit_model</code> command can be used to modify a model that is already defined in <code>config/models.yaml</code>. Call it with the short name of the model you wish to modify, and it will allow you to modify the model's <code>description</code>, <code>weights</code> and other fields.</p> <p>Example:</p> <pre>\ninvoke&gt; !edit_model waifu-diffusion\n&gt;&gt; Editing model waifu-diffusion from configuration file ./configs/models.yaml\ndescription: Waifu diffusion v1.4beta\nweights: models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt\nconfig: configs/stable-diffusion/v1-inference.yaml\nwidth: 512\nheight: 512\n\n&gt;&gt; New configuration:\nwaifu-diffusion:\n  config: configs/stable-diffusion/v1-inference.yaml\n  description: Waifu diffusion v1.4beta\n  weights: models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt\n  height: 512\n  width: 512\n\nOK to import [n]? y\n&gt;&gt; Caching model stable-diffusion-1.4 in system RAM\n&gt;&gt; Loading waifu-diffusion from models/ldm/stable-diffusion-v1/model-epoch10-float16.ckpt\n...\n</pre>"},{"location":"features/CLI/#history-processing","title":"History processing","text":"<p>The CLI provides a series of convenient commands for reviewing previous actions, retrieving them, modifying them, and re-running them.</p>"},{"location":"features/CLI/#history","title":"<code>!history</code>","text":"<p>The invoke script keeps track of all the commands you issue during a session, allowing you to re-run them. On Mac and Linux systems, it also writes the command-line history out to disk, giving you access to the most recent 1000 commands issued.</p> <p>The <code>!history</code> command will return a numbered list of all the commands issued during the session (Windows), or the most recent 1000 commands (Mac|Linux). You can then repeat a command by using the command <code>!NNN</code>, where \"NNN\" is the history line number. For example:</p> <pre><code>invoke&gt; !history\n...\n[14] happy woman sitting under tree wearing broad hat and flowing garment\n[15] beautiful woman sitting under tree wearing broad hat and flowing garment\n[18] beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6\n[20] watercolor of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194\n[21] surrealist painting of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194\n...\ninvoke&gt; !20\ninvoke&gt; watercolor of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194\n</code></pre>"},{"location":"features/CLI/#fetch","title":"<code>!fetch</code>","text":"<p>This command retrieves the generation parameters from a previously generated image and either loads them into the command line (Linux|Mac), or prints them out in a comment for copy-and-paste (Windows). You may provide either the name of a file in the current output directory, or a full file path. Specify path to a folder with image png files, and wildcard *.png to retrieve the dream command used to generate the images, and save them to a file commands.txt for further processing.</p> <p>load the generation command for a single png file</p> <pre><code>invoke&gt; !fetch 0000015.8929913.png\n# the script returns the next line, ready for editing and running:\ninvoke&gt; a fantastic alien landscape -W 576 -H 512 -s 60 -A plms -C 7.5\n</code></pre> <p>fetch the generation commands from a batch of files and store them into <code>selected.txt</code></p> <pre><code>invoke&gt; !fetch outputs\\selected-imgs\\*.png selected.txt\n</code></pre>"},{"location":"features/CLI/#replay","title":"<code>!replay</code>","text":"<p>This command replays a text file generated by !fetch or created manually</p> <p>Example</p> <pre><code>invoke&gt; !replay outputs\\selected-imgs\\selected.txt\n</code></pre> <p>Note</p> <p>These commands may behave unexpectedly if given a PNG file that was not generated by InvokeAI.</p>"},{"location":"features/CLI/#search-search-string","title":"<code>!search &lt;search string&gt;</code>","text":"<p>This is similar to !history but it only returns lines that contain <code>search string</code>. For example:</p> <pre><code>invoke&gt; !search surreal\n[21] surrealist painting of beautiful woman sitting under tree wearing broad hat and flowing garment -v0.2 -n6 -S2878767194\n</code></pre>"},{"location":"features/CLI/#clear","title":"<code>!clear</code>","text":"<p>This clears the search history from memory and disk. Be advised that this operation is irreversible and does not issue any warnings!</p>"},{"location":"features/CLI/#command-line-editing-and-completion","title":"Command-line editing and completion","text":"<p>The command-line offers convenient history tracking, editing, and command completion.</p> <ul> <li>To scroll through previous commands and potentially edit/reuse them, use the   Up and Down keys.</li> <li>To edit the current command, use the Left and Right keys to position   the cursor, and then Backspace, Del or insert characters.</li> <li>To move to the very beginning of the command, type Ctrl+A (or   Cmd+A on the Mac)</li> <li>To move to the end of the command, type Ctrl+E.</li> <li>To cut a section of the command, position the cursor where you want to start   cutting and type Ctrl+K</li> <li>To paste a cut section back in, position the cursor where you want to paste,   and type Ctrl+Y</li> </ul> <p>Windows users can get similar, but more limited, functionality if they launch <code>invoke.py</code> with the <code>winpty</code> program and have the <code>pyreadline3</code> library installed:</p> <pre><code>&gt; winpty python scripts\\invoke.py\n</code></pre> <p>On the Mac and Linux platforms, when you exit invoke.py, the last 1000 lines of your command-line history will be saved. When you restart <code>invoke.py</code>, you can access the saved history using the Up key.</p> <p>In addition, limited command-line completion is installed. In various contexts, you can start typing your command and press Tab. A list of potential completions will be presented to you. You can then type a little more, hit Tab again, and eventually autocomplete what you want.</p> <p>When specifying file paths using the one-letter shortcuts, the CLI will attempt to complete pathnames for you. This is most handy for the <code>-I</code> (init image) and <code>-M</code> (init mask) paths. To initiate completion, start the path with a slash (<code>/</code>) or <code>./</code>. For example:</p> <pre><code>invoke&gt; zebra with a mustache -I./test-pictures&lt;TAB&gt;\n-I./test-pictures/Lincoln-and-Parrot.png  -I./test-pictures/zebra.jpg        -I./test-pictures/madonna.png\n-I./test-pictures/bad-sketch.png          -I./test-pictures/man_with_eagle/\n</code></pre> <p>You can then type Z, hit Tab again, and it will autofill to <code>zebra.jpg</code>.</p> <p>More text completion features (such as autocompleting seeds) are on their way.</p>"},{"location":"features/CONCEPTS/","title":"The Hugging Face Concepts Library and Importing Textual Inversion files","text":""},{"location":"features/CONCEPTS/#using-textual-inversion-files","title":"Using Textual Inversion Files","text":"<p>Textual inversion (TI) files are small models that customize the output of Stable Diffusion image generation. They can augment SD with specialized subjects and artistic styles. They are also known as \"embeds\" in the machine learning world.</p> <p>Each TI file introduces one or more vocabulary terms to the SD model. These are known in InvokeAI as \"triggers.\" Triggers are often, but not always, denoted using angle brackets as in \"&lt;trigger-phrase&gt;\". The two most common type of TI files that you'll encounter are <code>.pt</code> and <code>.bin</code> files, which are produced by different TI training packages. InvokeAI supports both formats, but its built-in TI training system produces <code>.pt</code>.</p> <p>The Hugging Face company has amassed a large ligrary of &gt;800 community-contributed TI files covering a broad range of subjects and styles. InvokeAI has built-in support for this library which downloads and merges TI files automatically upon request. You can also install your own or others' TI files by placing them in a designated directory.</p>"},{"location":"features/CONCEPTS/#an-example","title":"An Example","text":"<p>Here are a few examples to illustrate how it works. All these images were generated using the command-line client and the Stable Diffusion 1.5 model:</p> Japanese gardener Japanese gardener &lt;ghibli-face&gt; Japanese gardener &lt;hoi4-leaders&gt; Japanese gardener &lt;cartoona-animals&gt; <p>You can also combine styles and concepts:</p> A portrait of &lt;alf&gt; in &lt;cartoona-animal&gt; style"},{"location":"features/CONCEPTS/#using-a-hugging-face-concept","title":"Using a Hugging Face Concept","text":"<p>Authenticating to HuggingFace</p> <p>Some concepts require valid authentication to HuggingFace. Without it, they will not be downloaded and will be silently ignored.</p> <p>If you used an installer to install InvokeAI, you may have already set a HuggingFace token. If you skipped this step, you can:</p> <ul> <li>run the InvokeAI configuration script again (if you used a manual installer): <code>invokeai-configure</code></li> <li>set one of the <code>HUGGINGFACE_TOKEN</code> or <code>HUGGING_FACE_HUB_TOKEN</code> environment variables to contain your token</li> </ul> <p>Finally, if you already used any HuggingFace library on your computer, you might already have a token in your local cache. Check for a hidden <code>.huggingface</code> directory in your home folder. If it contains a <code>token</code> file, then you are all set.</p> <p>Hugging Face TI concepts are downloaded and installed automatically as you require them. This requires your machine to be connected to the Internet. To find out what each concept is for, you can browse the Hugging Face concepts library and look at examples of what each concept produces.</p> <p>When you have an idea of a concept you wish to try, go to the command-line client (CLI) and type a <code>&lt;</code> character and the beginning of the Hugging Face concept name you wish to load. Press Tab, and the CLI will show you all matching concepts. You can also type <code>&lt;</code> and hit Tab to get a listing of all ~800 concepts, but be prepared to scroll up to see them all! If there is more than one match you can continue to type and Tab until the concept is completed.</p> <p>Example</p> <p>if you type in <code>&lt;x</code> and hit Tab, you'll be prompted with the completions:</p> <pre><code>&lt;xatu2&gt;        &lt;xatu&gt;         &lt;xbh&gt;          &lt;xi&gt;           &lt;xidiversity&gt;  &lt;xioboma&gt;      &lt;xuna&gt;         &lt;xyz&gt;\n</code></pre> <p>Now type <code>id</code> and press Tab. It will be autocompleted to <code>&lt;xidiversity&gt;</code> because this is a unique match.</p> <p>Finish your prompt and generate as usual. You may include multiple concept terms in the prompt.</p> <p>If you have never used this concept before, you will see a message that the TI model is being downloaded and installed. After this, the concept will be saved locally (in the <code>models/sd-concepts-library</code> directory) for future use.</p> <p>Several steps happen during downloading and installation, including a scan of the file for malicious code. Should any errors occur, you will be warned and the concept will fail to load. Generation will then continue treating the trigger term as a normal string of characters (e.g. as literal <code>&lt;ghibli-face&gt;</code>).</p> <p>You can also use <code>&lt;concept-names&gt;</code> in the WebGUI's prompt textbox. There is no autocompletion at this time.</p>"},{"location":"features/CONCEPTS/#installing-your-own-ti-files","title":"Installing your Own TI Files","text":"<p>You may install any number of <code>.pt</code> and <code>.bin</code> files simply by copying them into the <code>embeddings</code> directory of the InvokeAI runtime directory (usually <code>invokeai</code> in your home directory). You may create subdirectories in order to organize the files in any way you wish. Be careful not to overwrite one file with another. For example, TI files generated by the Hugging Face toolkit share the named <code>learned_embedding.bin</code>. You can use subdirectories to keep them distinct.</p> <p>At startup time, InvokeAI will scan the <code>embeddings</code> directory and load any TI files it finds there. At startup you will see messages similar to these:</p> <pre><code>&gt;&gt; Loading embeddings from /data/lstein/invokeai-2.3/embeddings\n   | Loading v1 embedding file: style-hamunaptra\n   | Loading v4 embedding file: embeddings/learned_embeds-steps-500.bin\n   | Loading v2 embedding file: lfa\n   | Loading v3 embedding file: easynegative\n   | Loading v1 embedding file: rem_rezero\n   | Loading v2 embedding file: midj-strong\n   | Loading v4 embedding file: anime-background-style-v2/learned_embeds.bin\n   | Loading v4 embedding file: kamon-style/learned_embeds.bin\n   ** Notice: kamon-style/learned_embeds.bin was trained on a model with an incompatible token dimension: 768 vs 1024.\n&gt;&gt; Textual inversion triggers: &lt;anime-background-style-v2&gt;, &lt;easynegative&gt;, &lt;lfa&gt;, &lt;midj-strong&gt;, &lt;milo&gt;, Rem3-2600, Style-Hamunaptra\n</code></pre> <p>Textual Inversion embeddings trained on version 1.X stable diffusion models are incompatible with version 2.X models and vice-versa.</p> <p>After the embeddings load, InvokeAI will print out a list of all the recognized trigger terms. To trigger the term, include it in the prompt exactly as written, including angle brackets if any and respecting the capitalization.</p> <p>There are at least four different embedding file formats, and each uses a different convention for the trigger terms. In some cases, the trigger term is specified in the file contents and may or may not be surrounded by angle brackets. In the example above, <code>Rem3-2600</code>, <code>Style-Hamunaptra</code>, and <code>&lt;midj-strong&gt;</code> were specified this way and there is no easy way to change the term.</p> <p>In other cases the trigger term is not contained within the embedding file. In this case, InvokeAI constructs a trigger term consisting of the base name of the file (without the file extension) surrounded by angle brackets. In the example above <code>&lt;easynegative</code>&gt; is such a file (the filename was <code>easynegative.safetensors</code>). In such cases, you can change the trigger term simply by renaming the file.</p>"},{"location":"features/CONCEPTS/#further-reading","title":"Further Reading","text":"<p>Please see the repository and associated paper for details and limitations.</p>"},{"location":"features/EMBIGGEN/","title":"Embiggen","text":"<p>upscale your images on limited memory machines</p> <p>GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work.</p> <p>In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images.</p> <p>If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the <code>-U</code> and <code>-G</code> prompt arguments to perform those actions.</p>"},{"location":"features/EMBIGGEN/#embiggen_1","title":"Embiggen","text":"<p>If you wanted to be able to do more (pixels) without running out of VRAM, or you want to upscale with details that couldn't possibly appear without the context of a prompt, this is the feature to try out.</p> <p>Embiggen automates the process of taking an init image, upscaling it, cutting it into smaller tiles that slightly overlap, running all the tiles through img2img to refine details with respect to the prompt, and \"stitching\" the tiles back together into a cohesive image.</p> <p>It automatically computes how many tiles are needed, and so it can be fed ANY size init image and perform Img2Img on it (though it will be run only one tile at a time, which can cause problems, see the Note at the end).</p> <p>If you're familiar with \"GoBig\" (ala progrock-stable) it's similar to that, except it can work up to an arbitrarily large size (instead of just 2x), with tile overlaps configurable as a ratio, and has extra logic to re-run any number of the tile sub-sections of the image if for example a small part of a huge run got messed up.</p>"},{"location":"features/EMBIGGEN/#usage","title":"Usage","text":"<p><code>-embiggen &lt;scaling_factor&gt; &lt;esrgan_strength&gt; &lt;overlap_ratio OR overlap_pixels&gt;</code></p> <p>Takes a scaling factor relative to the size of the <code>--init_img</code> (<code>-I</code>), followed by ESRGAN upscaling strength (0 - 1.0), followed by minimum amount of overlap between tiles as a decimal ratio (0 - 1.0) OR a number of pixels.</p> <p>The scaling factor is how much larger than the <code>--init_img</code> the output should be, and will multiply both x and y axis, so an image that is a scaling factor of 3.0 has 3*3= 9 times as many pixels, and will take (at least) 9 times as long (see overlap for why it might be longer). If the <code>--init_img</code> is already the right size <code>-embiggen 1</code>, and it can also be less than one if the init_img is too big.</p> <p>Esrgan_strength defaults to 0.75, and the overlap_ratio defaults to 0.25, both are optional.</p> <p>Unlike Img2Img, the <code>--width</code> (<code>-W</code>) and <code>--height</code> (<code>-H</code>) arguments do not control the size of the image as a whole, but the size of the tiles used to Embiggen the image.</p> <p>ESRGAN is used to upscale the <code>--init_img</code> prior to cutting it into tiles/pieces to run through img2img and then stitch back together. Embiggen can be run without ESRGAN; just set the strength to zero (e.g. <code>-embiggen 1.75 0</code>). The output of Embiggen can also be upscaled after it's finished (<code>-U</code>).</p> <p>The overlap is the minimum that tiles will overlap with adjacent tiles, specified as either a ratio or a number of pixels. How much the tiles overlap determines the likelihood the tiling will be noticable, really small overlaps (e.g. a couple of pixels) may produce noticeable grid-like fuzzy distortions in the final stitched image. Though, as the overlapping space doesn't contribute to making the image bigger, and the larger the overlap the more tiles (and the more time) it will take to finish.</p> <p>Because the overlapping parts of tiles don't \"contribute\" to increasing size, every tile after the first in a row or column effectively only covers an extra <code>1 - overlap_ratio</code> on each axis. If the input/<code>--init_img</code> is same size as a tile, the ideal (for time) scaling factors with the default overlap (0.25) are 1.75, 2.5, 3.25, 4.0, etc.</p> <p><code>-embiggen_tiles &lt;spaced list of tiles&gt;</code></p> <p>An advanced usage useful if you only want to alter parts of the image while running Embiggen. It takes a list of tiles by number to run and replace onto the initial image e.g. <code>1 3 5</code>. It's useful for either fixing problem spots from a previous Embiggen run, or selectively altering the prompt for sections of an image - for creative or coherency reasons.</p> <p>Tiles are numbered starting with one, and left-to-right, top-to-bottom.  So, if you are generating a 3x3 tiled image, the middle row would be <code>4 5 6</code>.</p> <p><code>-embiggen_strength &lt;strength&gt;</code></p> <p>Another advanced option if you want to experiment with the strength parameter that embiggen uses when it calls Img2Img. Values range from 0.0 to 1.0 and lower values preserve more of the character of the initial image. Values that are too high will result in a completely different end image, while values that are too low will result in an image not dissimilar to one you would get with ESRGAN upscaling alone. The default value is 0.4.</p>"},{"location":"features/EMBIGGEN/#examples","title":"Examples","text":"<p>Running Embiggen with 512x512 tiles on an existing image, scaling up by a factor of 2.5x; and doing the same again (default ESRGAN strength is 0.75, default overlap between tiles is 0.25):</p> <pre><code>invoke &gt; a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0.4 -embiggen 2.5\ninvoke &gt; a photo of a forest at sunset -s 100 -W 512 -H 512 -I outputs/forest.png -f 0.4 -embiggen 2.5 0.75 0.25\n</code></pre> <p>If your starting image was also 512x512 this should have taken 9 tiles.</p> <p>If there weren't enough clouds in the sky of that forest you just made (and that image is about 1280 pixels (512*2.5) wide A.K.A. three 512x512 tiles with 0.25 overlaps wide) we can replace that top row of tiles:</p> <pre><code>invoke&gt; a photo of puffy clouds over a forest at sunset -s 100 -W 512 -H 512 -I outputs/000002.seed.png -f 0.5 -embiggen_tiles 1 2 3\n</code></pre>"},{"location":"features/EMBIGGEN/#fixing-previously-generated-images","title":"Fixing Previously-Generated Images","text":"<p>It is easy to apply embiggen to any previously-generated file without having to look up the original prompt and provide an initial image. Just use the syntax <code>!fix path/to/file.png &lt;embiggen&gt;</code>. For example, you can rewrite the previous command to look like this:</p> <pre><code>invoke&gt; !fix ./outputs/000002.seed.png -embiggen_tiles 1 2 3\n</code></pre> <p>A new file named <code>000002.seed.fixed.png</code> will be created in the output directory. Note that the <code>!fix</code> command does not replace the original file, unlike the behavior at generate time. You do not need to provide the prompt, and <code>!fix</code> automatically selects a good strength for embiggen-ing.</p> <p>Note</p> <p>Because the same prompt is used on all the tiled images, and the model doesn't have the context of anything outside the tile being run - it can end up creating repeated pattern (also called 'motifs') across all the tiles based on that prompt. The best way to combat this is lowering the <code>--strength</code> (<code>-f</code>) to stay more true to the init image, and increasing the number of steps so there is more compute-time to create the detail.  Anecdotally <code>--strength</code> 0.35-0.45 works pretty well on most things. It may also work great in some examples even with the <code>--strength</code> set high for patterns, landscapes, or subjects that are more abstract. Because this is (relatively) fast, you can also preserve the best parts from each.</p> <p>Author: Travco</p>"},{"location":"features/IMG2IMG/","title":"Image-to-Image","text":"<p>Both the Web and command-line interfaces provide an \"img2img\" feature that lets you seed your creations with an initial drawing or photo. This is a really cool feature that tells stable diffusion to build the prompt on top of the image you provide, preserving the original's basic shape and layout.</p> <p>See the WebUI Guide for a walkthrough of the img2img feature in the InvokeAI web server. This document describes how to use img2img in the command-line tool.</p>"},{"location":"features/IMG2IMG/#basic-usage","title":"Basic Usage","text":"<p>Launch the command-line client by launching <code>invoke.sh</code>/<code>invoke.bat</code> and choosing option (1). Alternative, activate the InvokeAI environment and issue the command <code>invokeai</code>.</p> <p>Once the <code>invoke&gt;</code> prompt appears, you can start an img2img render by pointing to a seed file with the <code>-I</code> option as shown here:</p> <pre><code>tree on a hill with a river, nature photograph, national geographic -I./test-pictures/tree-and-river-sketch.png -f 0.85\n</code></pre> original image generated image <p>The <code>--init_img</code> (<code>-I</code>) option gives the path to the seed picture. <code>--strength</code> (<code>-f</code>) controls how much the original will be modified, ranging from <code>0.0</code> (keep the original intact), to <code>1.0</code> (ignore the original completely). The default is <code>0.75</code>, and ranges from <code>0.25-0.90</code> give interesting results. Other relevant options include <code>-C</code> (classification free guidance scale), and <code>-s</code> (steps). Unlike <code>txt2img</code>, adding steps will continuously change the resulting image and it will not converge.</p> <p>You may also pass a <code>-v&lt;variation_amount&gt;</code> option to generate <code>-n&lt;iterations&gt;</code> count variants on the original image. This is done by passing the first generated image back into img2img the requested number of times. It generates interesting variants.</p> <p>Note that the prompt makes a big difference. For example, this slight variation on the prompt produces a very different image:</p> <p> photograph of a tree on a hill with a river</p> <p>Tip</p> <p>When designing prompts, think about how the images scraped from the internet were captioned. Very few photographs will be labeled \"photograph\" or \"photorealistic.\" They will, however, be captioned with the publication, photographer, camera model, or film settings.</p> <p>If the initial image contains transparent regions, then Stable Diffusion will only draw within the transparent regions, a process called <code>inpainting</code>. However, for this to work correctly, the color information underneath the transparent needs to be preserved, not erased.</p> <p>IMPORTANT ISSUE </p> <p><code>img2img</code> does not work properly on initial images smaller than 512x512. Please scale your image to at least 512x512 before using it. Larger images are not a problem, but may run out of VRAM on your GPU card. To fix this, use the --fit option, which downscales the initial image to fit within the box specified by width x height:</p> <pre><code>tree on a hill with a river, national geographic -I./test-pictures/big-sketch.png -H512 -W512 --fit\n</code></pre>"},{"location":"features/IMG2IMG/#how-does-it-actually-work-though","title":"How does it actually work, though?","text":"<p>The main difference between <code>img2img</code> and <code>prompt2img</code> is the starting point. While <code>prompt2img</code> always starts with pure gaussian noise and progressively refines it over the requested number of steps, <code>img2img</code> skips some of these earlier steps (how many it skips is indirectly controlled by the <code>--strength</code> parameter), and uses instead your initial image mixed with gaussian noise as the starting image.</p> <p>Let's start by thinking about vanilla <code>prompt2img</code>, just generating an image from a prompt. If the step count is 10, then the \"latent space\" (Stable Diffusion's internal representation of the image) for the prompt \"fire\" with seed <code>1592514025</code> develops something like this:</p> <pre><code>invoke&gt; \"fire\" -s10 -W384 -H384 -S1592514025\n</code></pre> <p> </p> <p>Put simply: starting from a frame of fuzz/static, SD finds details in each frame that it thinks look like \"fire\" and brings them a little bit more into focus, gradually scrubbing out the fuzz until a clear image remains.</p> <p>When you use <code>img2img</code> some of the earlier steps are cut, and instead an initial image of your choice is used. But because of how the maths behind Stable Diffusion works, this image needs to be mixed with just the right amount of noise (fuzz/static) for where it is being inserted. This is where the strength parameter comes in. Depending on the set strength, your image will be inserted into the sequence at the appropriate point, with just the right amount of noise.</p>"},{"location":"features/IMG2IMG/#a-concrete-example","title":"A concrete example","text":"<p>I want SD to draw a fire based on this hand-drawn image</p> <p></p> <p>Let's only do 10 steps, to make it easier to see what's happening. If strength is <code>0.7</code>, this is what the internal steps the algorithm has to take will look like:</p> <p> </p> <p>With strength <code>0.4</code>, the steps look more like this:</p> <p> </p> <p>Notice how much more fuzzy the starting image is for strength <code>0.7</code> compared to <code>0.4</code>, and notice also how much longer the sequence is with <code>0.7</code>:</p> strength = 0.7 strength = 0.4 initial image that SD sees steps argument to <code>invoke&gt;</code> <code>-S10</code> <code>-S10</code> steps actually taken <code>7</code> <code>4</code> latent space at each step output <p>Both of the outputs look kind of like what I was thinking of. With the strength higher, my input becomes more vague, and Stable Diffusion has more steps to refine its output. But it's not really making what I want, which is a picture of cheery open fire. With the strength lower, my input is more clear, but Stable Diffusion has less chance to refine itself, so the result ends up inheriting all the problems of my bad drawing.</p> <p>If you want to try this out yourself, all of these are using a seed of <code>1592514025</code> with a width/height of <code>384</code>, step count <code>10</code>, the default sampler (<code>k_lms</code>), and the single-word prompt <code>\"fire\"</code>:</p> <pre><code>invoke&gt; \"fire\" -s10 -W384 -H384 -S1592514025 -I /tmp/fire-drawing.png --strength 0.7\n</code></pre> <p>The code for rendering intermediates is on my (damian0815's) branch document-img2img - run <code>invoke.py</code> and check your <code>outputs/img-samples/intermediates</code> folder while generating an image.</p>"},{"location":"features/IMG2IMG/#compensating-for-the-reduced-step-count","title":"Compensating for the reduced step count","text":"<p>After putting this guide together I was curious to see how the difference would be if I increased the step count to compensate, so that SD could have the same amount of steps to develop the image regardless of the strength. So I ran the generation again using the same seed, but this time adapting the step count to give each generation 20 steps.</p> <p>Here's strength <code>0.4</code> (note step count <code>50</code>, which is <code>20 \u00f7 0.4</code> to make sure SD does <code>20</code> steps from my image):</p> <pre><code>invoke&gt; \"fire\" -s50 -W384 -H384 -S1592514025 -I /tmp/fire-drawing.png -f 0.4\n</code></pre> <p></p> <p>and here is strength <code>0.7</code> (note step count <code>30</code>, which is roughly <code>20 \u00f7 0.7</code> to make sure SD does <code>20</code> steps from my image):</p> <pre><code>invoke&gt; \"fire\" -s30 -W384 -H384 -S1592514025 -I /tmp/fire-drawing.png -f 0.7\n</code></pre> <p></p> <p>In both cases the image is nice and clean and \"finished\", but because at strength <code>0.7</code> Stable Diffusion has been give so much more freedom to improve on my badly-drawn flames, they've come out looking much better. You can really see the difference when looking at the latent steps. There's more noise on the first image with strength <code>0.7</code>:</p> <p></p> <p>than there is for strength <code>0.4</code>:</p> <p></p> <p>and that extra noise gives the algorithm more choices when it is evaluating how to denoise any particular pixel in the image.</p> <p>Unfortunately, it seems that <code>img2img</code> is very sensitive to the step count. Here's strength <code>0.7</code> with a step count of <code>29</code> (SD did 19 steps from my image):</p> <p></p> <p>By comparing the latents we can sort of see that something got interpreted differently enough on the third or fourth step to lead to a rather different interpretation of the flames.</p> <p></p> <p></p> <p>This is the result of a difference in the de-noising \"schedule\" - basically the noise has to be cleaned by a certain degree each step or the model won't \"converge\" on the image properly (see stable diffusion blog for more about that). A different step count means a different schedule, which means things get interpreted slightly differently at every step.</p>"},{"location":"features/INPAINTING/","title":"Inpainting","text":""},{"location":"features/INPAINTING/#creating-transparent-regions-for-inpainting","title":"Creating Transparent Regions for Inpainting","text":"<p>Inpainting is really cool. To do it, you start with an initial image and use a photoeditor to make one or more regions transparent (i.e. they have a \"hole\" in them). You then provide the path to this image at the dream&gt; command line using the <code>-I</code> switch. Stable Diffusion will only paint within the transparent region.</p> <p>There's a catch. In the current implementation, you have to prepare the initial image correctly so that the underlying colors are preserved under the transparent area. Many imaging editing applications will by default erase the color information under the transparent pixels and replace them with white or black, which will lead to suboptimal inpainting. It often helps to apply incomplete transparency, such as any value between 1 and 99%</p> <p>You also must take care to export the PNG file in such a way that the color information is preserved. There is often an option in the export dialog that lets you specify this.</p> <p>If your photoeditor is erasing the underlying color information, <code>dream.py</code> will give you a big fat warning. If you can't find a way to coax your photoeditor to retain color values under transparent areas, then you can combine the <code>-I</code> and <code>-M</code> switches to provide both the original unedited image and the masked (partially transparent) image:</p> <pre><code>invoke&gt; \"man with cat on shoulder\" -I./images/man.png -M./images/man-transparent.png\n</code></pre>"},{"location":"features/INPAINTING/#masking-using-text","title":"Masking using Text","text":"<p>You can also create a mask using a text prompt to select the part of the image you want to alter, using the clipseg algorithm. This works on any image, not just ones generated by InvokeAI.</p> <p>The <code>--text_mask</code> (short form <code>-tm</code>) option takes two arguments. The first argument is a text description of the part of the image you wish to mask (paint over). If the text description contains a space, you must surround it with quotation marks. The optional second argument is the minimum threshold for the mask classifier's confidence score, described in more detail below.</p> <p>To see how this works in practice, here's an image of a still life painting that I got off the web.</p> <p></p> <p>You can selectively mask out the orange and replace it with a baseball in this way:</p> <pre><code>invoke&gt; a baseball -I /path/to/still_life.png -tm orange\n</code></pre> <p></p> <p>The clipseg classifier produces a confidence score for each region it identifies. Generally regions that score above 0.5 are reliable, but if you are getting too much or too little masking you can adjust the threshold down (to get more mask), or up (to get less). In this example, by passing <code>-tm</code> a higher value, we are insisting on a tigher mask. However, if you make it too high, the orange may not be picked up at all!</p> <pre><code>invoke&gt; a baseball -I /path/to/breakfast.png -tm orange 0.6\n</code></pre> <p>The <code>!mask</code> command may be useful for debugging problems with the text2mask feature. The syntax is <code>!mask /path/to/image.png -tm &lt;text&gt; &lt;threshold&gt;</code></p> <p>It will generate three files:</p> <ul> <li>The image with the selected area highlighted.</li> <li>it will be named XXXXX...selected.png <li>The image with the un-selected area highlighted.</li> <li>it will be named XXXXX...deselected.png <li>The image with the selected area converted into a black and white image   according to the threshold level</li> <li>it will be named XXXXX...masked.png <p>The <code>.masked.png</code> file can then be directly passed to the <code>invoke&gt;</code> prompt in the CLI via the <code>-M</code> argument. Do not attempt this with the <code>selected.png</code> or <code>deselected.png</code> files, as they contain some transparency throughout the image and will not produce the desired results.</p> <p>Here is an example of how <code>!mask</code> works:</p> <pre><code>invoke&gt; !mask ./test-pictures/curly.png -tm hair 0.5\n&gt;&gt; generating masks from ./test-pictures/curly.png\n&gt;&gt; Initializing clipseg model for text to mask inference\nOutputs:\n[941.1] outputs/img-samples/000019.curly.hair.deselected.png: !mask ./test-pictures/curly.png -tm hair 0.5\n[941.2] outputs/img-samples/000019.curly.hair.selected.png: !mask ./test-pictures/curly.png -tm hair 0.5\n[941.3] outputs/img-samples/000019.curly.hair.masked.png: !mask ./test-pictures/curly.png -tm hair 0.5\n</code></pre> <p></p> Original image \"curly.png\" <p></p> 000019.curly.hair.selected.png <p></p> 000019.curly.hair.deselected.png <p></p> 000019.curly.hair.masked.png <p>It looks like we selected the hair pretty well at the 0.5 threshold (which is the default, so we didn't actually have to specify it), so let's have some fun:</p> <pre><code>invoke&gt; medusa with cobras -I ./test-pictures/curly.png -M 000019.curly.hair.masked.png -C20\n&gt;&gt; loaded input image of size 512x512 from ./test-pictures/curly.png\n...\nOutputs:\n[946] outputs/img-samples/000024.801380492.png: \"medusa with cobras\" -s 50 -S 801380492 -W 512 -H 512 -C 20.0 -I ./test-pictures/curly.png -A k_lms -f 0.75\n</code></pre> <p></p> <p>You can also skip the <code>!mask</code> creation step and just select the masked</p> <p>region directly:</p> <pre><code>invoke&gt; medusa with cobras -I ./test-pictures/curly.png -tm hair -C20\n</code></pre>"},{"location":"features/INPAINTING/#using-the-runwayml-inpainting-model","title":"Using the RunwayML inpainting model","text":"<p>The RunwayML Inpainting Model v1.5 is a specialized version of Stable Diffusion v1.5 that contains extra channels specifically designed to enhance inpainting and outpainting. While it can do regular <code>txt2img</code> and <code>img2img</code>, it really shines when filling in missing regions. It has an almost uncanny ability to blend the new regions with existing ones in a semantically coherent way.</p> <p>To install the inpainting model, follow the instructions for installing a new model. You may use either the CLI (<code>invoke.py</code> script) or directly edit the <code>configs/models.yaml</code> configuration file to do this. The main thing to watch out for is that the the model <code>config</code> option must be set up to use <code>v1-inpainting-inference.yaml</code> rather than the <code>v1-inference.yaml</code> file that is used by Stable Diffusion 1.4 and 1.5.</p> <p>After installation, your <code>models.yaml</code> should contain an entry that looks like this one:</p> <p>inpainting-1.5: weights: models/ldm/stable-diffusion-v1/sd-v1-5-inpainting.ckpt description: SD inpainting v1.5 config: configs/stable-diffusion/v1-inpainting-inference.yaml vae: models/ldm/stable-diffusion-v1/vae-ft-mse-840000-ema-pruned.ckpt width: 512 height: 512</p> <p>As shown in the example, you may include a VAE fine-tuning weights file as well. This is strongly recommended.</p> <p>To use the custom inpainting model, launch <code>invoke.py</code> with the argument <code>--model inpainting-1.5</code> or alternatively from within the script use the <code>!switch inpainting-1.5</code> command to load and switch to the inpainting model.</p> <p>You can now do inpainting and outpainting exactly as described above, but there will (likely) be a noticeable improvement in coherence. Txt2img and Img2img will work as well.</p> <p>There are a few caveats to be aware of:</p> <ol> <li> <p>The inpainting model is larger than the standard model, and will use nearly 4    GB of GPU VRAM. This makes it unlikely to run on a 4 GB graphics card.</p> </li> <li> <p>When operating in Img2img mode, the inpainting model is much less steerable    than the standard model. It is great for making small changes, such as    changing the pattern of a fabric, or slightly changing a subject's expression    or hair, but the model will resist making the dramatic alterations that the    standard model lets you do.</p> </li> <li> <p>While the <code>--hires</code> option works fine with the inpainting model, some special    features, such as <code>--embiggen</code> are disabled.</p> </li> <li> <p>Prompt weighting (<code>banana++ sushi</code>) and merging work well with the inpainting    model, but prompt swapping    (<code>a (\"fluffy cat\").swap(\"smiling dog\") eating a hotdog</code>) will not have any    effect due to the way the model is set up. You may use text masking (with    <code>-tm thing-to-mask</code>) as an effective replacement.</p> </li> <li> <p>The model tends to oversharpen image if you use high step or CFG values. If    you need to do large steps, use the standard model.</p> </li> <li> <p>The <code>--strength</code> (<code>-f</code>) option has no effect on the inpainting model due to    its fundamental differences with the standard model. It will always take the    full number of steps you specify.</p> </li> </ol>"},{"location":"features/INPAINTING/#troubleshooting","title":"Troubleshooting","text":"<p>Here are some troubleshooting tips for inpainting and outpainting.</p>"},{"location":"features/INPAINTING/#inpainting-is-not-changing-the-masked-region-enough","title":"Inpainting is not changing the masked region enough!","text":"<p>One of the things to understand about how inpainting works is that it is equivalent to running img2img on just the masked (transparent) area. img2img builds on top of the existing image data, and therefore will attempt to preserve colors, shapes and textures to the best of its ability. Unfortunately this means that if you want to make a dramatic change in the inpainted region, for example replacing a red wall with a blue one, the algorithm will fight you.</p> <p>You have a couple of options. The first is to increase the values of the requested steps (<code>-sXXX</code>), strength (<code>-f0.XX</code>), and/or condition-free guidance (<code>-CXX.X</code>). If this is not working for you, a more extreme step is to provide the <code>--inpaint_replace 0.X</code> (<code>-r0.X</code>) option. This value ranges from 0.0 to 1.0. The higher it is the less attention the algorithm will pay to the data underneath the masked region. At high values this will enable you to replace colored regions entirely, but beware that the masked region mayl not blend in with the surrounding unmasked regions as well.</p>"},{"location":"features/INPAINTING/#recipe-for-gimp","title":"Recipe for GIMP","text":"<p>GIMP is a popular Linux photoediting tool.</p> <ol> <li>Open image in GIMP.</li> <li>Layer-&gt;Transparency-&gt;Add Alpha Channel</li> <li>Use lasso tool to select region to mask</li> <li>Choose Select -&gt; Float to create a floating selection</li> <li>Open the Layers toolbar (^L) and select \"Floating Selection\"</li> <li>Set opacity to a value between 0% and 99%</li> <li>Export as PNG</li> <li>In the export dialogue, Make sure the \"Save colour values from transparent    pixels\" checkbox is selected.</li> </ol>"},{"location":"features/INPAINTING/#recipe-for-adobe-photoshop","title":"Recipe for Adobe Photoshop","text":"<ol> <li> <p>Open image in Photoshop</p> <p> </p> </li> <li> <p>Use any of the selection tools (Marquee, Lasso, or Wand) to select the area    you desire to inpaint.</p> <p> </p> </li> <li> <p>Because we'll be applying a mask over the area we want to preserve, you    should now select the inverse by using the Shift+Ctrl+I shortcut, or    right clicking and using the \"Select Inverse\" option.</p> </li> <li> <p>You'll now create a mask by selecting the image layer, and Masking the    selection. Make sure that you don't delete any of the underlying image, or    your inpainting results will be dramatically impacted.</p> <p> </p> </li> <li> <p>Make sure to hide any background layers that are present. You should see the    mask applied to your image layer, and the image on your canvas should display    the checkered background.</p> <p> </p> </li> <li> <p>Save the image as a transparent PNG by using <code>File</code>\u2192<code>Save a Copy</code> from the    menu bar, or by using the keyboard shortcut Alt+Ctrl+S</p> <p> </p> </li> <li> <p>After following the inpainting instructions above (either through the CLI or    the Web UI), marvel at your newfound ability to selectively invoke. Lookin'    good!</p> <p> </p> </li> <li> <p>In the export dialogue, Make sure the \"Save colour values from transparent    pixels\" checkbox is selected.</p> </li> </ol>"},{"location":"features/MODEL_MERGING/","title":"Model Merging","text":""},{"location":"features/MODEL_MERGING/#how-to-merge-models","title":"How to Merge Models","text":"<p>As of version 2.3, InvokeAI comes with a script that allows you to merge two or three diffusers-type models into a new merged model. The resulting model will combine characteristics of the original, and can be used to teach an old model new tricks.</p> <p>You may run the merge script by starting the invoke launcher (<code>invoke.sh</code> or <code>invoke.bat</code>) and choosing the option for merge models. This will launch a text-based interactive user interface that prompts you to select the models to merge, how to merge them, and the merged model name.</p> <p>Alternatively you may activate InvokeAI's virtual environment from the command line, and call the script via <code>merge_models --gui</code> to open up a version that has a nice graphical front end. To get the commandline- only version, omit <code>--gui</code>.</p> <p>The user interface for the text-based interactive script is straightforward. It shows you a series of setting fields. Use control-N (^N) to move to the next field, and control-P (^P) to move to the previous one. You can also use TAB and shift-TAB to move forward and backward. Once you are in a multiple choice field, use the up and down cursor arrows to move to your desired selection, and press  or  to select it. Change text fields by typing in them, and adjust scrollbars using the left and right arrow keys. <p>Once you are happy with your settings, press the OK button. Note that there may be two pages of settings, depending on the height of your screen, and the OK button may be on the second page. Advance past the last field of the first page to get to the second page, and reverse this to get back.</p> <p>If the merge runs successfully, it will create a new diffusers model under the selected name and register it with InvokeAI.</p>"},{"location":"features/MODEL_MERGING/#the-settings","title":"The Settings","text":"<ul> <li> <p>Model Selection -- there are three multiple choice fields that   display all the diffusers-style models that InvokeAI knows about.   If you do not see the model you are looking for, then it is probably   a legacy checkpoint model and needs to be converted using the   <code>invoke</code> command-line client and its <code>!optimize</code> command. You   must select at least two models to merge. The third can be left at   \"None\" if you desire.</p> </li> <li> <p>Alpha -- This is the ratio to use when combining models. It ranges   from 0 to 1. The higher the value, the more weight is given to the   2d and (optionally) 3d models. So if you have two models named \"A\"   and \"B\", an alpha value of 0.25 will give you a merged model that is   25% A and 75% B.</p> </li> <li> <p>Interpolation Method -- This is the method used to combine   weights. The options are \"weighted_sum\" (the default), \"sigmoid\",   \"inv_sigmoid\" and \"add_difference\". Each produces slightly different   results. When three models are in use, only \"add_difference\" is   available. (TODO: cite a reference that describes what these   interpolation methods actually do and how to decide among them).</p> </li> <li> <p>Force -- Not all models are compatible with each other. The merge   script will check for compatibility and refuse to merge ones that   are incompatible. Set this checkbox to try merging anyway.</p> </li> <li> <p>Name for merged model - This is the name for the new model. Please   use InvokeAI conventions - only alphanumeric letters and the   characters \".+-\".</p> </li> </ul>"},{"location":"features/MODEL_MERGING/#caveats","title":"Caveats","text":"<p>This is a new script and may contain bugs.</p>"},{"location":"features/NSFW/","title":"NSFW Checker","text":""},{"location":"features/NSFW/#the-nsfw-safety-checker","title":"The NSFW (\"Safety\") Checker","text":"<p>The Stable Diffusion image generation models will produce sexual imagery if deliberately prompted, and will occasionally produce such images when this is not intended. Such images are colloquially known as \"Not Safe for Work\" (NSFW). This behavior is due to the nature of the training set that Stable Diffusion was trained on, which culled millions of \"aesthetic\" images from the Internet.</p> <p>You may not wish to be exposed to these images, and in some jurisdictions it may be illegal to publicly distribute such imagery, including mounting a publicly-available server that provides unfiltered images to the public. Furthermore, the Stable Diffusion weights License forbids the model from being used to \"exploit any of the vulnerabilities of a specific group of persons.\"</p> <p>For these reasons Stable Diffusion offers a \"safety checker,\" a machine learning model trained to recognize potentially disturbing imagery. When a potentially NSFW image is detected, the checker will blur the image and paste a warning icon on top. The checker can be turned on and off on the command line using <code>--nsfw_checker</code> and <code>--no-nsfw_checker</code>.</p> <p>At installation time, InvokeAI will ask whether the checker should be activated by default (neither argument given on the command line). The response is stored in the InvokeAI initialization file (usually <code>.invokeai</code> in your home directory). You can change the default at any time by opening this file in a text editor and commenting or uncommenting the line <code>--nsfw_checker</code>.</p>"},{"location":"features/NSFW/#caveats","title":"Caveats","text":"<p>There are a number of caveats that you need to be aware of.</p>"},{"location":"features/NSFW/#accuracy","title":"Accuracy","text":"<p>The checker is not perfect.It will occasionally flag innocuous images (false positives), and will frequently miss violent and gory imagery (false negatives). It rarely fails to flag sexual imagery, but this has been known to happen. For these reasons, the InvokeAI team prefers to refer to the software as a \"NSFW Checker\" rather than \"safety checker.\"</p>"},{"location":"features/NSFW/#memory-usage-and-performance","title":"Memory Usage and Performance","text":"<p>The NSFW checker consumes an additional 1.2G of GPU VRAM on top of the 3.4G of VRAM used by Stable Diffusion v1.5 (this is with half-precision arithmetic). This means that the checker will not run successfully on GPU cards with less than 6GB VRAM, and will reduce the size of the images that you can produce.</p> <p>The checker also introduces a slight performance penalty. Images will take ~1 second longer to generate when the checker is activated. Generally this is not noticeable.</p>"},{"location":"features/NSFW/#intermediate-images-in-the-web-ui","title":"Intermediate Images in the Web UI","text":"<p>The checker only operates on the final image produced by the Stable Diffusion algorithm. If you are using the Web UI and have enabled the display of intermediate images, you will briefly be exposed to a low-resolution (mosaicized) version of the final image before it is flagged by the checker and replaced by a fully blurred version. You are encouraged to turn off intermediate image rendering when you are using the checker. Future versions of InvokeAI will apply additional blurring to intermediate images when the checker is active.</p>"},{"location":"features/NSFW/#watermarking","title":"Watermarking","text":"<p>InvokeAI does not apply any sort of watermark to images it generates. However, it does write metadata into the PNG data area, including the prompt used to generate the image and relevant parameter settings. These fields can be examined using the <code>sd-metadata.py</code> script that comes with the InvokeAI package.</p> <p>Note that several other Stable Diffusion distributions offer wavelet-based \"invisible\" watermarking. We have experimented with the library used to generate these watermarks and have reached the conclusion that while the watermarking library may be adding watermarks to PNG images, the currently available version is unable to retrieve them successfully. If and when a functioning version of the library becomes available, we will offer this feature as well.</p>"},{"location":"features/OTHER/","title":"Others","text":""},{"location":"features/OTHER/#google-colab","title":"Google Colab","text":"<p>Open and follow instructions to use an isolated environment running Dream.</p> <p>Output Example:</p> <p></p>"},{"location":"features/OTHER/#seamless-tiling","title":"Seamless Tiling","text":"<p>The seamless tiling mode causes generated images to seamlessly tile with itself. To use it, add the <code>--seamless</code> option when starting the script which will result in all generated images to tile, or for each <code>invoke&gt;</code> prompt as shown here:</p> <pre><code>invoke&gt; \"pond garden with lotus by claude monet\" --seamless -s100 -n4\n</code></pre> <p>By default this will tile on both the X and Y axes. However, you can also specify specific axes to tile on with <code>--seamless_axes</code>. Possible values are <code>x</code>, <code>y</code>, and <code>x,y</code>: <pre><code>invoke&gt; \"pond garden with lotus by claude monet\" --seamless --seamless_axes=x -s100 -n4\n</code></pre></p>"},{"location":"features/OTHER/#shortcuts-reusing-seeds","title":"Shortcuts: Reusing Seeds","text":"<p>Since it is so common to reuse seeds while refining a prompt, there is now a shortcut as of version 1.11. Provide a <code>-S</code> (or <code>--seed</code>) switch of <code>-1</code> to use the seed of the most recent image generated. If you produced multiple images with the <code>-n</code> switch, then you can go back further using <code>-2</code>, <code>-3</code>, etc. up to the first image generated by the previous command. Sorry, but you can't go back further than one command.</p> <p>Here's an example of using this to do a quick refinement. It also illustrates using the new <code>-G</code> switch to turn on upscaling and face enhancement (see previous section):</p> <pre><code>invoke&gt; a cute child playing hopscotch -G0.5\n[...]\noutputs/img-samples/000039.3498014304.png: \"a cute child playing hopscotch\" -s50 -W512 -H512 -C7.5 -mk_lms -S3498014304\n\n# I wonder what it will look like if I bump up the steps and set facial enhancement to full strength?\ninvoke&gt; a cute child playing hopscotch -G1.0 -s100 -S -1\nreusing previous seed 3498014304\n[...]\noutputs/img-samples/000040.3498014304.png: \"a cute child playing hopscotch\" -G1.0 -s100 -W512 -H512 -C7.5 -mk_lms -S3498014304\n</code></pre>"},{"location":"features/OTHER/#weighted-prompts","title":"Weighted Prompts","text":"<p>You may weight different sections of the prompt to tell the sampler to attach different levels of priority to them, by adding <code>:&lt;percent&gt;</code> to the end of the section you wish to up- or downweight. For example consider this prompt:</p> <pre><code>tabby cat:0.25 white duck:0.75 hybrid\n</code></pre> <p>This will tell the sampler to invest 25% of its effort on the tabby cat aspect of the image and 75% on the white duck aspect (surprisingly, this example actually works). The prompt weights can use any combination of integers and floating point numbers, and they do not need to add up to 1.</p>"},{"location":"features/OTHER/#filename-format","title":"Filename Format","text":"<p>The argument <code>--fnformat</code> allows to specify the filename of the  image. Supported wildcards are all arguments what can be set such as  <code>perlin</code>, <code>seed</code>, <code>threshold</code>, <code>height</code>, <code>width</code>, <code>gfpgan_strength</code>,  <code>sampler_name</code>, <code>steps</code>, <code>model</code>, <code>upscale</code>, <code>prompt</code>, <code>cfg_scale</code>,  <code>prefix</code>.</p> <p>The following prompt <pre><code>dream&gt; a red car --steps 25 -C 9.8 --perlin 0.1 --fnformat {prompt}_steps.{steps}_cfg.{cfg_scale}_perlin.{perlin}.png\n</code></pre></p> <p>generates a file with the name: <code>outputs/img-samples/a red car_steps.25_cfg.9.8_perlin.0.1.png</code></p>"},{"location":"features/OTHER/#thresholding-and-perlin-noise-initialization-options","title":"Thresholding and Perlin Noise Initialization Options","text":"<p>Two new options are the thresholding (<code>--threshold</code>) and the perlin noise initialization (<code>--perlin</code>) options. Thresholding limits the range of the latent values during optimization, which helps combat oversaturation with higher CFG scale values. Perlin noise initialization starts with a percentage (a value ranging from 0 to 1) of perlin noise mixed into the initial noise. Both features allow for more variations and options in the course of generating images.</p> <p>For better intuition into what these options do in practice:</p> <p></p> <p>In generating this graphic, perlin noise at initialization was programmatically varied going across on the diagram by values 0.0, 0.1, 0.2, 0.4, 0.5, 0.6, 0.8, 0.9, 1.0; and the threshold was varied going down from 0, 1, 2, 3, 4, 5, 10, 20, 100. The other options are fixed, so the initial prompt is as follows (no thresholding or perlin noise):</p> <pre><code>invoke&gt; \"a portrait of a beautiful young lady\" -S 1950357039 -s 100 -C 20 -A k_euler_a --threshold 0 --perlin 0\n</code></pre> <p>Here's an example of another prompt used when setting the threshold to 5 and perlin noise to 0.2:</p> <pre><code>invoke&gt; \"a portrait of a beautiful young lady\" -S 1950357039 -s 100 -C 20 -A k_euler_a --threshold 5 --perlin 0.2\n</code></pre> <p>Note</p> <p>currently the thresholding feature is only implemented for the k-diffusion style samplers, and empirically appears to work best with <code>k_euler_a</code> and <code>k_dpm_2_a</code>. Using 0 disables thresholding. Using 0 for perlin noise disables using perlin noise for initialization. Finally, using 1 for perlin noise uses only perlin noise for initialization.</p>"},{"location":"features/OTHER/#simplified-api","title":"Simplified API","text":"<p>For programmers who wish to incorporate stable-diffusion into other products, this repository includes a simplified API for text to image generation, which lets you create images from a prompt in just three lines of code:</p> <pre><code>from ldm.generate import Generate\ng       = Generate()\noutputs = g.txt2img(\"a unicorn in manhattan\")\n</code></pre> <p>Outputs is a list of lists in the format [filename1,seed1],[filename2,seed2]...].</p> <p>Please see the documentation in ldm/generate.py for more information.</p>"},{"location":"features/OUTPAINTING/","title":"Outpainting","text":""},{"location":"features/OUTPAINTING/#outpainting-and-outcropping","title":"Outpainting and outcropping","text":"<p>Outpainting is a process by which the AI generates parts of the image that are outside its original frame. It can be used to fix up images in which the subject is off center, or when some detail (often the top of someone's head!) is cut off.</p> <p>InvokeAI supports two versions of outpainting, one called \"outpaint\" and the other \"outcrop.\" They work slightly differently and each has its advantages and drawbacks.</p>"},{"location":"features/OUTPAINTING/#outpainting_1","title":"Outpainting","text":"<p>Outpainting is the same as inpainting, except that the painting occurs in the regions outside of the original image. To outpaint using the <code>invoke.py</code> command line script, prepare an image in which the borders to be extended are pure black. Add an alpha channel (if there isn't one already), and make the borders completely transparent and the interior completely opaque. If you wish to modify the interior as well, you may create transparent holes in the transparency layer, which <code>img2img</code> will paint into as usual.</p> <p>Pass the image as the argument to the <code>-I</code> switch as you would for regular inpainting:</p> <pre><code>invoke&gt; a stream by a river -I /path/to/transparent_img.png\n</code></pre> <p>You'll likely be delighted by the results.</p>"},{"location":"features/OUTPAINTING/#tips","title":"Tips","text":"<ol> <li> <p>Do not try to expand the image too much at once. Generally it is best to    expand the margins in 64-pixel increments. 128 pixels often works, but your    mileage may vary depending on the nature of the image you are trying to    outpaint into.</p> </li> <li> <p>There are a series of switches that can be used to adjust how the inpainting    algorithm operates. In particular, you can use these to minimize the seam    that sometimes appears between the original image and the extended part.    These switches are:</p> </li> </ol> switch default description <code>--seam_size SEAM_SIZE</code> <code>0</code> Size of the mask around the seam between original and outpainted image <code>--seam_blur SEAM_BLUR</code> <code>0</code> The amount to blur the seam inwards <code>--seam_strength STRENGTH</code> <code>0.7</code> The img2img strength to use when filling the seam <code>--seam_steps SEAM_STEPS</code> <code>10</code> The number of steps to use to fill the seam. <code>--tile_size TILE_SIZE</code> <code>32</code> The tile size to use for filling outpaint areas"},{"location":"features/OUTPAINTING/#outcrop","title":"Outcrop","text":"<p>The <code>outcrop</code> extension gives you a convenient <code>!fix</code> postprocessing command that allows you to extend a previously-generated image in 64 pixel increments in any direction. You can apply the module to any image previously-generated by InvokeAI. Note that it works with arbitrary PNG photographs, but not currently with JPG or other formats. Outcropping is particularly effective when combined with the runwayML custom inpainting model.</p> <p>Consider this image:</p> <p></p> <p>Pretty nice, but it's annoying that the top of her head is cut off. She's also a bit off center. Let's fix that!</p> <pre><code>invoke&gt; !fix images/curly.png --outcrop top 128 right 64 bottom 64\n</code></pre> <p>This is saying to apply the <code>outcrop</code> extension by extending the top of the image by 128 pixels, and the right and bottom of the image by 64 pixels. You can use any combination of top|left|right|bottom, and specify any number of pixels to extend. You can also abbreviate <code>--outcrop</code> to <code>-c</code>.</p> <p>The result looks like this:</p> <p></p> <p>The new image is larger than the original (576x704) because 64 pixels were added to the top and right sides. You will need enough VRAM to process an image of this size.</p>"},{"location":"features/OUTPAINTING/#outcropping-non-invokeai-images","title":"Outcropping non-InvokeAI images","text":"<p>You can outcrop an arbitrary image that was not generated by InvokeAI, but your results will vary. The <code>inpainting-1.5</code> model is highly recommended, but if not feasible, then you may be able to improve the output by conditioning the outcropping with a text prompt that describes the scene using the <code>--new_prompt</code> argument:</p> <pre><code>invoke&gt; !fix images/vacation.png --outcrop top 128 --new_prompt \"family vacation\"\n</code></pre> <p>You may also provide a different seed for outcropping to use by passing <code>-S&lt;seed&gt;</code>. A negative seed will generate a new random seed.</p> <p>A number of caveats:</p> <ol> <li> <p>Although you can specify any pixel values, they will be rounded up to the    nearest multiple of 64. Smaller values are better. Larger extensions are more    likely to generate artefacts. However, if you wish you can run the !fix    command repeatedly to cautiously expand the image.</p> </li> <li> <p>The extension is stochastic, meaning that each time you run it you'll get a    slightly different result. You can run it repeatedly until you get an image    you like. Unfortunately <code>!fix</code> does not currently respect the <code>-n</code>    (<code>--iterations</code>) argument.</p> </li> <li> <p>Your results will be much better if you use the <code>inpaint-1.5</code> model    released by runwayML and installed by default by <code>invokeai-configure</code>.    This model was trained specifically to harmoniously fill in image gaps. The    standard model will work as well, but you may notice color discontinuities at    the border.</p> </li> <li> <p>When using the <code>inpaint-1.5</code> model, you may notice subtle changes to the area    outside the masked region. This is because the model performs an    encoding/decoding on the image as a whole. This does not occur with the    standard model.</p> </li> </ol>"},{"location":"features/OUTPAINTING/#outpaint","title":"Outpaint","text":"<p>The <code>outpaint</code> extension does the same thing, but with subtle differences. Starting with the same image, here is how we would add an additional 64 pixels to the top of the image:</p> <pre><code>invoke&gt; !fix images/curly.png --out_direction top 64\n</code></pre> <p>(you can abbreviate <code>--out_direction</code> as <code>-D</code>.</p> <p>The result is shown here:</p> <p></p> <p>Although the effect is similar, there are significant differences from outcropping:</p> <ul> <li>You can only specify one direction to extend at a time.</li> <li>The image is not resized. Instead, the image is shifted by the specified   number of pixels. If you look carefully, you'll see that less of the lady's   torso is visible in the image.</li> <li>Because the image dimensions remain the same, there's no rounding to multiples   of 64.</li> <li>Attempting to outpaint larger areas will frequently give rise to ugly ghosting   effects.</li> <li>For best results, try increasing the step number.</li> <li>If you don't specify a pixel value in <code>-D</code>, it will default to half of the   whole image, which is likely not what you want.</li> </ul> <p>Tip</p> <p>Neither <code>outpaint</code> nor <code>outcrop</code> are perfect, but we continue to tune and improve them. If one doesn't work, try the other. You may also wish to experiment with other <code>img2img</code> arguments, such as <code>-C</code>, <code>-f</code> and <code>-s</code>.</p>"},{"location":"features/POSTPROCESS/","title":"Postprocessing","text":""},{"location":"features/POSTPROCESS/#intro","title":"Intro","text":"<p>This extension provides the ability to restore faces and upscale images.</p> <p>Face restoration and upscaling can be applied at the time you generate the images, or at any later time against a previously-generated PNG file, using the !fix command. Outpainting and outcropping can only be applied after the fact.</p>"},{"location":"features/POSTPROCESS/#face-fixing","title":"Face Fixing","text":"<p>The default face restoration module is GFPGAN. The default upscale is Real-ESRGAN. For an alternative face restoration module, see CodeFormer Support below.</p> <p>As of version 1.14, environment.yaml will install the Real-ESRGAN package into the standard install location for python packages, and will put GFPGAN into a subdirectory of \"src\" in the InvokeAI directory. Upscaling with Real-ESRGAN should \"just work\" without further intervention. Simply pass the <code>--upscale</code> (<code>-U</code>) option on the <code>invoke&gt;</code> command line, or indicate the desired scale on the popup in the Web GUI.</p> <p>GFPGAN requires a series of downloadable model files to work. These are loaded when you run <code>invokeai-configure</code>. If GFPAN is failing with an error, please run the following from the InvokeAI directory:</p> <pre><code>invokeai-configure\n</code></pre> <p>If you do not run this script in advance, the GFPGAN module will attempt to download the models files the first time you try to perform facial reconstruction.</p>"},{"location":"features/POSTPROCESS/#upscaling","title":"Upscaling","text":"<p><code>-U : &lt;upscaling_factor&gt; &lt;upscaling_strength&gt;</code></p> <p>The upscaling prompt argument takes two values. The first value is a scaling factor and should be set to either <code>2</code> or <code>4</code> only. This will either scale the image 2x or 4x respectively using different models.</p> <p>You can set the scaling stength between <code>0</code> and <code>1.0</code> to control intensity of the of the scaling. This is handy because AI upscalers generally tend to smooth out texture details. If you wish to retain some of those for natural looking results, we recommend using values between <code>0.5 to 0.8</code>.</p> <p>If you do not explicitly specify an upscaling_strength, it will default to 0.75.</p>"},{"location":"features/POSTPROCESS/#face-restoration","title":"Face Restoration","text":"<p><code>-G : &lt;facetool_strength&gt;</code></p> <p>This prompt argument controls the strength of the face restoration that is being applied. Similar to upscaling, values between <code>0.5 to 0.8</code> are recommended.</p> <p>You can use either one or both without any conflicts. In cases where you use both, the image will be first upscaled and then the face restoration process will be executed to ensure you get the highest quality facial features.</p> <p><code>--save_orig</code></p> <p>When you use either <code>-U</code> or <code>-G</code>, the final result you get is upscaled or face modified. If you want to save the original Stable Diffusion generation, you can use the <code>-save_orig</code> prompt argument to save the original unaffected version too.</p>"},{"location":"features/POSTPROCESS/#example-usage","title":"Example Usage","text":"<pre><code>invoke&gt; \"superman dancing with a panda bear\" -U 2 0.6 -G 0.4\n</code></pre> <p>This also works with img2img:</p> <pre><code>invoke&gt; \"a man wearing a pineapple hat\" -I path/to/your/file.png -U 2 0.5 -G 0.6\n</code></pre> <p>Note</p> <p>GFPGAN and Real-ESRGAN are both memory intensive. In order to avoid crashes and memory overloads during the Stable Diffusion process, these effects are applied after Stable Diffusion has completed its work.</p> <p>In single image generations, you will see the output right away but when you are using multiple iterations, the images will first be generated and then upscaled and face restored after that process is complete. While the image generation is taking place, you will still be able to preview the base images.</p> <p>If you wish to stop during the image generation but want to upscale or face restore a particular generated image, pass it again with the same prompt and generated seed along with the <code>-U</code> and <code>-G</code> prompt arguments to perform those actions.</p>"},{"location":"features/POSTPROCESS/#codeformer-support","title":"CodeFormer Support","text":"<p>This repo also allows you to perform face restoration using CodeFormer.</p> <p>In order to setup CodeFormer to work, you need to download the models like with GFPGAN. You can do this either by running <code>invokeai-configure</code> or by manually downloading the model file and saving it to <code>ldm/invoke/restoration/codeformer/weights</code> folder.</p> <p>You can use <code>-ft</code> prompt argument to swap between CodeFormer and the default GFPGAN. The above mentioned <code>-G</code> prompt argument will allow you to control the strength of the restoration effect.</p>"},{"location":"features/POSTPROCESS/#codeformer-usage","title":"CodeFormer Usage","text":"<p>The following command will perform face restoration with CodeFormer instead of the default gfpgan.</p> <p><code>&lt;prompt&gt; -G 0.8 -ft codeformer</code></p>"},{"location":"features/POSTPROCESS/#other-options","title":"Other Options","text":"<ul> <li><code>-cf</code> - cf or CodeFormer Fidelity takes values between <code>0</code> and <code>1</code>. 0 produces   high quality results but low accuracy and 1 produces lower quality results but   higher accuacy to your original face.</li> </ul> <p>The following command will perform face restoration with CodeFormer. CodeFormer will output a result that is closely matching to the input face.</p> <p><code>&lt;prompt&gt; -G 1.0 -ft codeformer -cf 0.9</code></p> <p>The following command will perform face restoration with CodeFormer. CodeFormer will output a result that is the best restoration possible. This may deviate slightly from the original face. This is an excellent option to use in situations when there is very little facial data to work with.</p> <p><code>&lt;prompt&gt; -G 1.0 -ft codeformer -cf 0.1</code></p>"},{"location":"features/POSTPROCESS/#fixing-previously-generated-images","title":"Fixing Previously-Generated Images","text":"<p>It is easy to apply face restoration and/or upscaling to any previously-generated file. Just use the syntax <code>!fix path/to/file.png &lt;options&gt;</code>. For example, to apply GFPGAN at strength 0.8 and upscale 2X for a file named <code>./outputs/img-samples/000044.2945021133.png</code>, just run:</p> <pre><code>invoke&gt; !fix ./outputs/img-samples/000044.2945021133.png -G 0.8 -U 2\n</code></pre> <p>A new file named <code>000044.2945021133.fixed.png</code> will be created in the output directory. Note that the <code>!fix</code> command does not replace the original file, unlike the behavior at generate time.</p>"},{"location":"features/POSTPROCESS/#how-to-disable","title":"How to disable","text":"<p>If, for some reason, you do not wish to load the GFPGAN and/or ESRGAN libraries, you can disable them on the invoke.py command line with the <code>--no_restore</code> and <code>--no_upscale</code> options, respectively.</p>"},{"location":"features/PROMPTS/","title":"Prompting-Features","text":""},{"location":"features/PROMPTS/#reading-prompts-from-a-file","title":"Reading Prompts from a File","text":"<p>You can automate <code>invoke.py</code> by providing a text file with the prompts you want to run, one line per prompt. The text file must be composed with a text editor (e.g. Notepad) and not a word processor. Each line should look like what you would type at the invoke&gt; prompt:</p> <pre><code>\"a beautiful sunny day in the park, children playing\" -n4 -C10\n\"stormy weather on a mountain top, goats grazing\" -s100\n\"innovative packaging for a squid's dinner\" -S137038382\n</code></pre> <p>Then pass this file's name to <code>invoke.py</code> when you invoke it:</p> <pre><code>python scripts/invoke.py --from_file \"/path/to/prompts.txt\"\n</code></pre> <p>You may also read a series of prompts from standard input by providing a filename of <code>-</code>. For example, here is a python script that creates a matrix of prompts, each one varying slightly:</p> <pre><code>#!/usr/bin/env python\nadjectives = ['sunny','rainy','overcast']\nsamplers = ['k_lms','k_euler_a','k_heun']\ncfg = [7.5, 9, 11]\nfor adj in adjectives:\n    for samp in samplers:\n        for cg in cfg:\n            print(f'a {adj} day -A{samp} -C{cg}')\n</code></pre> <p>Its output looks like this (abbreviated):</p> <pre><code>a sunny day -Aklms -C7.5\na sunny day -Aklms -C9\na sunny day -Aklms -C11\na sunny day -Ak_euler_a -C7.5\na sunny day -Ak_euler_a -C9\n...\na overcast day -Ak_heun -C9\na overcast day -Ak_heun -C11\n</code></pre> <p>To feed it to invoke.py, pass the filename of \"-\"</p> <pre><code>python matrix.py | python scripts/invoke.py --from_file -\n</code></pre> <p>When the script is finished, each of the 27 combinations of adjective, sampler and CFG will be executed.</p> <p>The command-line interface provides <code>!fetch</code> and <code>!replay</code> commands which allow you to read the prompts from a single previously-generated image or a whole directory of them, write the prompts to a file, and then replay them. Or you can create your own file of prompts and feed them to the command-line client from within an interactive session. See Command-Line Interface for details.</p>"},{"location":"features/PROMPTS/#negative-and-unconditioned-prompts","title":"Negative and Unconditioned Prompts","text":"<p>Any words between a pair of square brackets will instruct Stable Diffusion to attempt to ban the concept from the generated image.</p> <pre><code>this is a test prompt [not really] to make you understand [cool] how this works.\n</code></pre> <p>In the above statement, the words 'not really cool` will be ignored by Stable Diffusion.</p> <p>Here's a prompt that depicts what it does.</p> <p>original prompt:</p> <p><code>\"A fantastical translucent pony made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve\" -s 20 -W 512 -H 768 -C 7.5 -A k_euler_a -S 1654590180</code></p> <p></p> <p>That image has a woman, so if we want the horse without a rider, we can influence the image not to have a woman by putting [woman] in the prompt, like this:</p> <p><code>\"A fantastical translucent poney made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve [woman]\" -s 20 -W 512 -H 768 -C 7.5 -A k_euler_a -S 1654590180</code></p> <p></p> <p>That's nice - but say we also don't want the image to be quite so blue. We can add \"blue\" to the list of negative prompts, so it's now [woman blue]:</p> <p><code>\"A fantastical translucent poney made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve [woman blue]\" -s 20 -W 512 -H 768 -C 7.5 -A k_euler_a -S 1654590180</code></p> <p></p> <p>Getting close - but there's no sense in having a saddle when our horse doesn't have a rider, so we'll add one more negative prompt: [woman blue saddle].</p> <p><code>\"A fantastical translucent poney made of water and foam, ethereal, radiant, hyperalism, scottish folklore, digital painting, artstation, concept art, smooth, 8 k frostbite 3 engine, ultra detailed, art by artgerm and greg rutkowski and magali villeneuve [woman blue saddle]\" -s 20 -W 512 -H 768 -C 7.5 -A k_euler_a -S 1654590180</code></p> <p></p> <p>Notes about this feature:</p> <ul> <li>The only requirement for words to be ignored is that they are in between a pair of square brackets.</li> <li>You can provide multiple words within the same bracket.</li> <li>You can provide multiple brackets with multiple words in different places of your prompt. That works just fine.</li> <li>To improve typical anatomy problems, you can add negative prompts like <code>[bad anatomy, extra legs, extra arms, extra fingers, poorly drawn hands, poorly drawn feet, disfigured, out of frame, tiling, bad art, deformed, mutated]</code>.</li> </ul>"},{"location":"features/PROMPTS/#prompt-syntax-features","title":"Prompt Syntax Features","text":"<p>The InvokeAI prompting language has the following features:</p>"},{"location":"features/PROMPTS/#attention-weighting","title":"Attention weighting","text":"<p>Append a word or phrase with <code>-</code> or <code>+</code>, or a weight between <code>0</code> and <code>2</code> (<code>1</code>=default), to decrease or increase \"attention\" (= a mix of per-token CFG weighting multiplier and, for <code>-</code>, a weighted blend with the prompt without the term).</p> <p>The following syntax is recognised:</p> <ul> <li>single words without parentheses: <code>a tall thin man picking apricots+</code></li> <li>single or multiple words with parentheses:   <code>a tall thin man picking (apricots)+</code> <code>a tall thin man picking (apricots)-</code> <code>a tall thin man (picking apricots)+</code> <code>a tall thin man (picking apricots)-</code></li> <li>more effect with more symbols <code>a tall thin man (picking apricots)++</code></li> <li>nesting <code>a tall thin man (picking apricots+)++</code> (<code>apricots</code> effectively gets   <code>+++</code>)</li> <li>all of the above with explicit numbers <code>a tall thin man picking (apricots)1.1</code> <code>a tall thin man (picking (apricots)1.3)1.1</code>. (<code>+</code> is equivalent to 1.1, <code>++</code>   is pow(1.1,2), <code>+++</code> is pow(1.1,3), etc; <code>-</code> means 0.9, <code>--</code> means pow(0.9,2),   etc.)</li> <li>attention also applies to <code>[unconditioning]</code> so   <code>a tall thin man picking apricots [(ladder)0.01]</code> will very gently nudge SD   away from trying to draw the man on a ladder</li> </ul> <p>You can use this to increase or decrease the amount of something. Starting from this prompt of <code>a man picking apricots from a tree</code>, let's see what happens if we increase and decrease how much attention we want Stable Diffusion to pay to the word <code>apricots</code>:</p> <p></p> <p>Using <code>-</code> to reduce apricot-ness:</p> <code>a man picking apricots- from a tree</code> <code>a man picking apricots-- from a tree</code> <code>a man picking apricots--- from a tree</code> <p>Using <code>+</code> to increase apricot-ness:</p> <code>a man picking apricots+ from a tree</code> <code>a man picking apricots++ from a tree</code> <code>a man picking apricots+++ from a tree</code> <code>a man picking apricots++++ from a tree</code> <code>a man picking apricots+++++ from a tree</code> <p>You can also change the balance between different parts of a prompt. For example, below is a <code>mountain man</code>:</p> <p></p> <p>And here he is with more mountain:</p> <code>mountain+ man</code> <code>mountain++ man</code> <code>mountain+++ man</code> <p>Or, alternatively, with more man:</p> <code>mountain man+</code> <code>mountain man++</code> <code>mountain man+++</code> <code>mountain man++++</code>"},{"location":"features/PROMPTS/#blending-between-prompts","title":"Blending between prompts","text":"<ul> <li><code>(\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,1)</code></li> <li>The existing prompt blending using <code>:&lt;weight&gt;</code> will continue to be supported -   <code>(\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,1)</code>   is equivalent to   <code>a tall thin man picking apricots:1 a tall thin man picking pears:1</code> in the   old syntax.</li> <li>Attention weights can be nested inside blends.</li> <li>Non-normalized blends are supported by passing <code>no_normalize</code> as an additional   argument to the blend weights, eg   <code>(\"a tall thin man picking apricots\", \"a tall thin man picking pears\").blend(1,-1,no_normalize)</code>.   very fun to explore local maxima in the feature space, but also easy to   produce garbage output.</li> </ul> <p>See the section below on \"Prompt Blending\" for more information about how this works.</p>"},{"location":"features/PROMPTS/#cross-attention-control-prompt2prompt","title":"Cross-Attention Control ('prompt2prompt')","text":"<p>Sometimes an image you generate is almost right, and you just want to change one detail without affecting the rest. You could use a photo editor and inpainting to overpaint the area, but that's a pain. Here's where <code>prompt2prompt</code> comes in handy.</p> <p>Generate an image with a given prompt, record the seed of the image, and then use the <code>prompt2prompt</code> syntax to substitute words in the original prompt for words in a new prompt. This works for <code>img2img</code> as well.</p> <p>For example, consider the prompt <code>a cat.swap(dog) playing with a ball in the forest</code>. Normally, because of the word words interact with each other when doing a stable diffusion image generation, these two prompts would generate different compositions:   - <code>a cat playing with a ball in the forest</code>   - <code>a dog playing with a ball in the forest</code></p> <code>a cat playing with a ball in the forest</code> <code>a dog playing with a ball in the forest</code> img img <pre><code>  - For multiple word swaps, use parentheses: `a (fluffy cat).swap(barking dog) playing with a ball in the forest`.\n  - To swap a comma, use quotes: `a (\"fluffy, grey cat\").swap(\"big, barking dog\") playing with a ball in the forest`.\n</code></pre> <ul> <li>Supports options <code>t_start</code> and <code>t_end</code> (each 0-1) loosely corresponding to bloc97's <code>prompt_edit_tokens_start/_end</code> but with the math swapped to make it easier to   intuitively understand. <code>t_start</code> and <code>t_end</code> are used to control on which steps cross-attention control should run. With the default values <code>t_start=0</code> and <code>t_end=1</code>, cross-attention control is active on every step of image generation. Other values can be used to turn cross-attention control off for part of the image generation process.<ul> <li>For example, if doing a diffusion with 10 steps for the prompt is <code>a cat.swap(dog, t_start=0.3, t_end=1.0) playing with a ball in the forest</code>, the first 3 steps will be run as <code>a cat playing with a ball in the forest</code>, while the last 7 steps will run as <code>a dog playing with a ball in the forest</code>, but the pixels that represent <code>dog</code> will be locked to the pixels that would have represented <code>cat</code> if the <code>cat</code> prompt had been used instead.</li> <li>Conversely, for <code>a cat.swap(dog, t_start=0, t_end=0.7) playing with a ball in the forest</code>, the first 7 steps will run as <code>a dog playing with a ball in the forest</code> with the pixels that represent <code>dog</code> locked to the same pixels that would have represented <code>cat</code> if the <code>cat</code> prompt was being used instead. The final 3 steps will just run <code>a cat playing with a ball in the forest</code>. <p>For img2img, the step sequence does not start at 0 but instead at <code>(1.0-strength)</code> - so if the img2img <code>strength</code> is <code>0.7</code>, <code>t_start</code> and <code>t_end</code> must both be greater than <code>0.3</code> (<code>1.0-0.7</code>) to have any effect.</p> </li> </ul> </li> </ul> <p>Prompt2prompt <code>.swap()</code> is not compatible with xformers, which will be temporarily disabled when doing a <code>.swap()</code> - so you should expect to use more VRAM and run slower that with xformers enabled.</p> <p>The <code>prompt2prompt</code> code is based off bloc97's colab.</p> <p>Note that <code>prompt2prompt</code> is not currently working with the runwayML inpainting model, and may never work due to the way this model is set up. If you attempt to use <code>prompt2prompt</code> you will get the original image back. However, since this model is so good at inpainting, a good substitute is to use the <code>clipseg</code> text masking option:</p> <pre><code>invoke&gt; a fluffy cat eating a hotdot\nOutputs:\n[1010] outputs/000025.2182095108.png: a fluffy cat eating a hotdog\ninvoke&gt; a smiling dog eating a hotdog -I 000025.2182095108.png -tm cat\n</code></pre>"},{"location":"features/PROMPTS/#escaping-parantheses-and-speech-marks","title":"Escaping parantheses () and speech marks \"\"","text":"<p>If the model you are using has parentheses () or speech marks \"\" as part of its syntax, you will need to \"escape\" these using a backslash, so that<code>(my_keyword)</code> becomes <code>\\(my_keyword\\)</code>. Otherwise, the prompt parser will attempt to interpret the parentheses as part of the prompt syntax and it will get confused.</p>"},{"location":"features/PROMPTS/#prompt-blending","title":"Prompt Blending","text":"<p>You may blend together different sections of the prompt to explore the AI's latent semantic space and generate interesting (and often surprising!) variations. The syntax is:</p> <pre><code>blue sphere:0.25 red cube:0.75 hybrid\n</code></pre> <p>This will tell the sampler to blend 25% of the concept of a blue sphere with 75% of the concept of a red cube. The blend weights can use any combination of integers and floating point numbers, and they do not need to add up to 1. Everything to the left of the <code>:XX</code> up to the previous <code>:XX</code> is used for merging, so the overall effect is:</p> <pre><code>0.25 * \"blue sphere\" + 0.75 * \"white duck\" + hybrid\n</code></pre> <p>Because you are exploring the \"mind\" of the AI, the AI's way of mixing two concepts may not match yours, leading to surprising effects. To illustrate, here are three images generated using various combinations of blend weights. As usual, unless you fix the seed, the prompts will give you different results each time you run them.</p> <p>This example doesn't use melding at all and represents the default way of mixing concepts.</p> <p></p> <p>It's interesting to see how the AI expressed the concept of \"cube\" as the four quadrants of the enclosing frame. If you look closely, there is depth there, so the enclosing frame is actually a cube.</p> <p>Now that's interesting. We get neither a blue sphere nor a red cube, but a red sphere embedded in a brick wall, which represents a melding of concepts within the AI's \"latent space\" of semantic representations. Where is Ludwig Wittgenstein when you need him?</p> <p>Definitely more blue-spherey. The cube is gone entirely, but it's really cool abstract art.</p> <p>Whoa...! I see blue and red, but no spheres or cubes. Is the word \"hybrid\" summoning up the concept of some sort of scifi creature? Let's find out.</p> <p>Indeed, removing the word \"hybrid\" produces an image that is more like what we'd expect.</p> <p>In conclusion, prompt blending is great for exploring creative space, but can be difficult to direct. A forthcoming release of InvokeAI will feature more deterministic prompt weighting.</p>"},{"location":"features/PROMPTS/#blue-sphere-red-cube-hybrid","title":"\"blue sphere, red cube, hybrid\"","text":""},{"location":"features/PROMPTS/#blue-sphere025-red-cube075-hybrid","title":"\"blue sphere:0.25 red cube:0.75 hybrid\"","text":""},{"location":"features/PROMPTS/#blue-sphere075-red-cube025-hybrid","title":"\"blue sphere:0.75 red cube:0.25 hybrid\"","text":""},{"location":"features/PROMPTS/#blue-sphere05-red-cube05-hybrid","title":"\"blue sphere:0.5 red cube:0.5 hybrid\"","text":""},{"location":"features/PROMPTS/#blue-sphere05-red-cube05","title":"\"blue sphere:0.5 red cube:0.5\"","text":""},{"location":"features/TEXTUAL_INVERSION/","title":"Textual Inversion","text":""},{"location":"features/TEXTUAL_INVERSION/#personalizing-text-to-image-generation","title":"Personalizing Text-to-Image Generation","text":"<p>You may personalize the generated images to provide your own styles or objects by training a new LDM checkpoint and introducing a new vocabulary to the fixed model as a (.pt) embeddings file. Alternatively, you may use or train HuggingFace Concepts embeddings files (.bin) from https://huggingface.co/sd-concepts-library and its associated notebooks.</p>"},{"location":"features/TEXTUAL_INVERSION/#hardware-and-software-requirements","title":"Hardware and Software Requirements","text":"<p>You will need a GPU to perform training in a reasonable length of time, and at least 12 GB of VRAM. We recommend using the <code>xformers</code> library to accelerate the training process further. During training, about ~8 GB is temporarily needed in order to store intermediate models, checkpoints and logs.</p>"},{"location":"features/TEXTUAL_INVERSION/#preparing-for-training","title":"Preparing for Training","text":"<p>To train, prepare a folder that contains 3-5 images that illustrate the object or concept. It is good to provide a variety of examples or poses to avoid overtraining the system. Format these images as PNG (preferred) or JPG. You do not need to resize or crop the images in advance, but for more control you may wish to do so.</p> <p>Place the training images in a directory on the machine InvokeAI runs on. We recommend placing them in a subdirectory of the <code>text-inversion-training-data</code> folder located in the InvokeAI root directory, ordinarily <code>~/invokeai</code> (Linux/Mac), or <code>C:\\Users\\your_name\\invokeai</code> (Windows). For example, to create an embedding for the \"psychedelic\" style, you'd place the training images into the directory <code>~invokeai/text-inversion-training-data/psychedelic</code>.</p>"},{"location":"features/TEXTUAL_INVERSION/#launching-training-using-the-console-front-end","title":"Launching Training Using the Console Front End","text":"<p>InvokeAI 2.3 and higher comes with a text console-based training front end. From within the <code>invoke.sh</code>/<code>invoke.bat</code> Invoke launcher script, start the front end by selecting choice (3):</p> <pre><code>Do you want to generate images using the\n1. command-line\n2. browser-based UI\n3. textual inversion training\n4. open the developer console\nPlease enter 1, 2, 3, or 4: [1] 3\n</code></pre> <p>From the command line, with the InvokeAI virtual environment active, you can launch the front end with the command <code>invokeai-ti --gui</code>.</p> <p>This will launch a text-based front end that will look like this:</p> <p></p> <p>The interface is keyboard-based. Move from field to field using control-N (^N) to move to the next field and control-P (^P) to the previous one.  and  work as well. Once a field is active, use the cursor keys. In a checkbox group, use the up and down cursor keys to move from choice to choice, and  to select a choice. In a scrollbar, use the left and right cursor keys to increase and decrease the value of the scroll. In textfields, type the desired values. <p>The number of parameters may look intimidating, but in most cases the predefined defaults work fine. The red circled fields in the above illustration are the ones you will adjust most frequently.</p>"},{"location":"features/TEXTUAL_INVERSION/#model-name","title":"Model Name","text":"<p>This will list all the diffusers models that are currently installed. Select the one you wish to use as the basis for your embedding. Be aware that if you use a SD-1.X-based model for your training, you will only be able to use this embedding with other SD-1.X-based models. Similarly, if you train on SD-2.X, you will only be able to use the embeddings with models based on SD-2.X.</p>"},{"location":"features/TEXTUAL_INVERSION/#trigger-term","title":"Trigger Term","text":"<p>This is the prompt term you will use to trigger the embedding. Type a single word or phrase you wish to use as the trigger, example \"psychedelic\" (without angle brackets). Within InvokeAI, you will then be able to activate the trigger using the syntax <code>&lt;psychedelic&gt;</code>.</p>"},{"location":"features/TEXTUAL_INVERSION/#initializer","title":"Initializer","text":"<p>This is a single character that is used internally during the training process as a placeholder for the trigger term. It defaults to \"*\" and can usually be left alone.</p>"},{"location":"features/TEXTUAL_INVERSION/#resume-from-last-saved-checkpoint","title":"Resume from last saved checkpoint","text":"<p>As training proceeds, textual inversion will write a series of intermediate files that can be used to resume training from where it was left off in the case of an interruption. This checkbox will be automatically selected if you provide a previously used trigger term and at least one checkpoint file is found on disk.</p> <p>Note that as of 20 January 2023, resume does not seem to be working properly due to an issue with the upstream code.</p>"},{"location":"features/TEXTUAL_INVERSION/#data-training-directory","title":"Data Training Directory","text":"<p>This is the location of the images to be used for training. When you select a trigger term like \"my-trigger\", the frontend will prepopulate this field with <code>~/invokeai/text-inversion-training-data/my-trigger</code>, but you can change the path to wherever you want.</p>"},{"location":"features/TEXTUAL_INVERSION/#output-destination-directory","title":"Output Destination Directory","text":"<p>This is the location of the logs, checkpoint files, and embedding files created during training. When you select a trigger term like \"my-trigger\", the frontend will prepopulate this field with <code>~/invokeai/text-inversion-output/my-trigger</code>, but you can change the path to wherever you want.</p>"},{"location":"features/TEXTUAL_INVERSION/#image-resolution","title":"Image resolution","text":"<p>The images in the training directory will be automatically scaled to the value you use here. For best results, you will want to use the same default resolution of the underlying model (512 pixels for SD-1.5, 768 for the larger version of SD-2.1).</p>"},{"location":"features/TEXTUAL_INVERSION/#center-crop-images","title":"Center crop images","text":"<p>If this is selected, your images will be center cropped to make them square before resizing them to the desired resolution. Center cropping can indiscriminately cut off the top of subjects' heads for portrait aspect images, so if you have images like this, you may wish to use a photoeditor to manually crop them to a square aspect ratio.</p>"},{"location":"features/TEXTUAL_INVERSION/#mixed-precision","title":"Mixed precision","text":"<p>Select the floating point precision for the embedding. \"no\" will result in a full 32-bit precision, \"fp16\" will provide 16-bit precision, and \"bf16\" will provide mixed precision (only available when XFormers is used).</p>"},{"location":"features/TEXTUAL_INVERSION/#max-training-steps","title":"Max training steps","text":"<p>How many steps the training will take before the model converges. Most training sets will converge with 2000-3000 steps.</p>"},{"location":"features/TEXTUAL_INVERSION/#batch-size","title":"Batch size","text":"<p>This adjusts how many training images are processed simultaneously in each step. Higher values will cause the training process to run more quickly, but use more memory. The default size is selected based on whether you have the <code>xformers</code> memory-efficient attention library installed. If <code>xformers</code> is available, the batch size will be 8, otherwise 3.  These values were chosen to allow training to run with GPUs with as little as 12 GB VRAM.</p>"},{"location":"features/TEXTUAL_INVERSION/#learning-rate","title":"Learning rate","text":"<p>The rate at which the system adjusts its internal weights during training. Higher values risk overtraining (getting the same image each time), and lower values will take more steps to train a good model. The default of 0.0005 is conservative; you may wish to increase it to 0.005 to speed up training.</p>"},{"location":"features/TEXTUAL_INVERSION/#scale-learning-rate-by-number-of-gpus-steps-and-batch-size","title":"Scale learning rate by number of GPUs, steps and batch size","text":"<p>If this is selected (the default) the system will adjust the provided learning rate to improve performance.</p>"},{"location":"features/TEXTUAL_INVERSION/#use-xformers-acceleration","title":"Use xformers acceleration","text":"<p>This will activate XFormers memory-efficient attention, which will reduce memory requirements by half or more and allow you to select a higher batch size. You need to have XFormers installed for this to have an effect.</p>"},{"location":"features/TEXTUAL_INVERSION/#learning-rate-scheduler","title":"Learning rate scheduler","text":"<p>This adjusts how the learning rate changes over the course of training. The default \"constant\" means to use a constant learning rate for the entire training session. The other values scale the learning rate according to various formulas.</p> <p>Only \"constant\" is supported by the XFormers library.</p>"},{"location":"features/TEXTUAL_INVERSION/#gradient-accumulation-steps","title":"Gradient accumulation steps","text":"<p>This is a parameter that allows you to use bigger batch sizes than your GPU's VRAM would ordinarily accommodate, at the cost of some performance.</p>"},{"location":"features/TEXTUAL_INVERSION/#warmup-steps","title":"Warmup steps","text":"<p>If \"constant_with_warmup\" is selected in the learning rate scheduler, then this provides the number of warmup steps. Warmup steps have a very low learning rate, and are one way of preventing early overtraining.</p>"},{"location":"features/TEXTUAL_INVERSION/#the-training-run","title":"The training run","text":"<p>Start the training run by advancing to the OK button (bottom right) and pressing . A series of progress messages will be displayed as the training process proceeds. This may take an hour or two, depending on settings and the speed of your system. Various log and checkpoint files will be written into the output directory (ordinarily <code>~/invokeai/text-inversion-output/my-model/</code>) <p>At the end of successful training, the system will copy the file <code>learned_embeds.bin</code> into the InvokeAI root directory's <code>embeddings</code> directory, using a subdirectory named after the trigger token. For example, if the trigger token was <code>psychedelic</code>, then look for the embeddings file in <code>~/invokeai/embeddings/psychedelic/learned_embeds.bin</code></p> <p>You may now launch InvokeAI and try out a prompt that uses the trigger term. For example <code>a plate of banana sushi in &lt;psychedelic&gt; style</code>.</p>"},{"location":"features/TEXTUAL_INVERSION/#training-with-the-command-line-script","title":"Training with the Command-Line Script","text":"<p>Training can also be done using a traditional command-line script. It can be launched from within the \"developer's console\", or from the command line after activating InvokeAI's virtual environment.</p> <p>It accepts a large number of arguments, which can be summarized by passing the <code>--help</code> argument:</p> <pre><code>invokeai-ti --help\n</code></pre> <p>Typical usage is shown here: <pre><code>invokeai-ti \\\n--model=stable-diffusion-1.5 \\\n--resolution=512 \\\n--learnable_property=style \\\n--initializer_token='*' \\\n--placeholder_token='&lt;psychedelic&gt;' \\\n--train_data_dir=/home/lstein/invokeai/training-data/psychedelic \\\n--output_dir=/home/lstein/invokeai/text-inversion-training/psychedelic \\\n--scale_lr \\\n--train_batch_size=8 \\\n--gradient_accumulation_steps=4 \\\n--max_train_steps=3000 \\\n--learning_rate=0.0005 \\\n--resume_from_checkpoint=latest \\\n--lr_scheduler=constant \\\n--mixed_precision=fp16 \\\n--only_save_embeds\n</code></pre></p>"},{"location":"features/TEXTUAL_INVERSION/#using-distributed-training","title":"Using Distributed Training","text":"<p>If you have multiple GPUs on one machine, or a cluster of GPU-enabled machines, you can activate distributed training. See the HuggingFace Accelerate pages for full information, but the basic recipe is:</p> <ol> <li> <p>Enter the InvokeAI developer's console command line by selecting option [8] from the <code>invoke.sh</code>/<code>invoke.bat</code> script.</p> </li> <li> <p>Configurate Accelerate using <code>accelerate config</code>: <pre><code>accelerate config\n</code></pre> This will guide you through the configuration process, including specifying how many machines you will run training on and the number of GPUs pe rmachine.</p> </li> </ol> <p>You only need to do this once.</p> <ol> <li>Launch training from the command line using <code>accelerate launch</code>. Be sure that your current working directory is the InvokeAI root directory (usually named <code>invokeai</code> in your home directory):</li> </ol> <pre><code>accelerate launch .venv/bin/invokeai-ti \\\n--model=stable-diffusion-1.5 \\\n--resolution=512 \\\n--learnable_property=object \\\n--initializer_token='*' \\\n--placeholder_token='&lt;shraddha&gt;' \\\n--train_data_dir=/home/lstein/invokeai/text-inversion-training-data/shraddha \\\n--output_dir=/home/lstein/invokeai/text-inversion-training/shraddha \\\n--scale_lr \\\n--train_batch_size=10 \\\n--gradient_accumulation_steps=4 \\\n--max_train_steps=2000 \\\n--learning_rate=0.0005 \\\n--lr_scheduler=constant \\\n--mixed_precision=fp16 \\\n--only_save_embeds\n</code></pre>"},{"location":"features/TEXTUAL_INVERSION/#using-embeddings","title":"Using Embeddings","text":"<p>After training completes, the resultant embeddings will be saved into your <code>$INVOKEAI_ROOT/embeddings/&lt;trigger word&gt;/learned_embeds.bin</code>.</p> <p>These will be automatically loaded when you start InvokeAI.</p> <p>Add the trigger word, surrounded by angle brackets, to use that embedding. For example, if your trigger word was <code>terence</code>, use <code>&lt;terence&gt;</code> in prompts. This is the same syntax used by the HuggingFace concepts library.</p> <p>Note: <code>.pt</code> embeddings do not require the angle brackets.</p>"},{"location":"features/TEXTUAL_INVERSION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/TEXTUAL_INVERSION/#cannot-load-embedding-for-trigger-it-was-trained-on-a-model-with-token-dimension-1024-but-the-current-model-has-token-dimension-768","title":"<code>Cannot load embedding for &lt;trigger&gt;. It was trained on a model with token dimension 1024, but the current model has token dimension 768</code>","text":"<p>Messages like this indicate you trained the embedding on a different base model than the currently selected one.</p> <p>For example, in the error above, the training was done on SD2.1 (768x768) but it was used on SD1.5 (512x512).</p>"},{"location":"features/TEXTUAL_INVERSION/#reading","title":"Reading","text":"<p>For more information on textual inversion, please see the following resources:</p> <ul> <li>The textual inversion repository and   associated paper for details and limitations.</li> <li>HuggingFace's textual inversion training   page</li> <li>HuggingFace example script   documentation   (Note that this script is similar to, but not identical, to   <code>textual_inversion</code>, but produces embed files that are completely compatible.</li> </ul> <p>copyright \u00a9 2023, Lincoln Stein and the InvokeAI Development Team</p>"},{"location":"features/UNIFIED_CANVAS/","title":"Unified Canvas","text":"<p>The Unified Canvas is a tool designed to streamline and simplify the process of composing an image using Stable Diffusion. It offers artists all of the available Stable Diffusion generation modes (Text To Image, Image To Image, Inpainting, and Outpainting) as a single unified workflow. The flexibility of the tool allows you to tweak and edit image generations, extend images beyond their initial size, and to create new content in a freeform way both inside and outside of existing images.</p> <p>This document explains the basics of using the Unified Canvas, introducing you to its features and tools one by one. It also describes some of the more advanced tools available to power users of the Canvas.</p>"},{"location":"features/UNIFIED_CANVAS/#basics","title":"Basics","text":"<p>The Unified Canvas consists of two layers: the Base Layer and the Mask Layer. You can swap from one layer to the other by selecting the layer you want in the drop-down menu on the top left corner of the Unified Canvas, or by pressing the (Q) hotkey.</p>"},{"location":"features/UNIFIED_CANVAS/#base-layer","title":"Base Layer","text":"<p>The Base Layer is the image content currently managed by the Canvas, and can be exported at any time to the gallery by using the Save to Gallery option. When the Base Layer is selected, the Brush (B) and Eraser (E) tools will directly manipulate the base layer. Any images uploaded to the Canvas, or sent to the Unified Canvas from the gallery, will clear out all existing content and set the Base layer to the new image.</p>"},{"location":"features/UNIFIED_CANVAS/#staging-area","title":"Staging Area","text":"<p>When you generate images, they will display in the Canvas's Staging Area, alongside the Staging Area toolbar buttons. While the Staging Area is active, you cannot interact with the Canvas itself.</p> <p></p> <p>Accepting generations will commit the new generation to the Base Layer. You can review all generated images using the Prev/Next arrows, save any individual generations to your gallery (without committing to the Base layer) or discard generations. While you can Undo a discard in an individual Canvas session, any generations that are not saved will be lost when the Canvas resets.</p>"},{"location":"features/UNIFIED_CANVAS/#mask-layer","title":"Mask Layer","text":"<p>The Mask Layer consists of any masked sections that have been created to inform Inpainting generations. You can paint a new mask, or edit an existing mask, using the Brush tool and the Eraser with the Mask layer set as your Active layer. Any masked areas will only affect generation inside of the current bounding box.</p>"},{"location":"features/UNIFIED_CANVAS/#bounding-box","title":"Bounding Box","text":"<p>When generating a new image, Invoke will process and apply new images within the area denoted by the Bounding Box. The Width &amp; Height settings of the Bounding Box, as well as its location within the Unified Canvas and pixels or empty space that it encloses, determine how new invocations are generated - see Inpainting &amp; Outpainting below. The Bounding Box can be moved and resized using the Move (V) tool. It can also be resized using the Bounding Box options in the Options Panel. By using these controls you can generate larger or smaller images, control which sections of the image are being processed, as well as control Bounding Box tools like the Bounding Box fill/erase.</p>"},{"location":"features/UNIFIED_CANVAS/#inpainting-outpainting","title":"Inpainting &amp; Outpainting","text":"<p>\"Inpainting\" means asking the AI to refine part of an image while leaving the rest alone. For example, updating a portrait of your grandmother to have her wear a biker's jacket.</p> masked original inpaint result <p>\"Outpainting\" means asking the AI to expand the original image beyond its original borders, making a bigger image that's still based on the original. For example, extending the above image of your Grandmother in a biker's jacket to include her wearing jeans (and while we're at it, a motorcycle!)</p> <p></p> <p>When you are using the Unified Canvas, Invoke decides automatically whether to do Inpainting, Outpainting, ImageToImage, or TextToImage by looking inside the area enclosed by the Bounding Box. It chooses the appropriate type of generation based on whether the Bounding Box contains empty (transparent) areas on the Base layer, or whether it contains colored areas from previous generations (or from painted brushstrokes) on the Base layer, and/or whether the Mask layer contains any brushstrokes. See Generation Methods below for more information.</p>"},{"location":"features/UNIFIED_CANVAS/#getting-started","title":"Getting Started","text":"<p>To get started with the Unified Canvas, you will want to generate a new base layer using Txt2Img or importing an initial image. We'll refer to either of these methods as the \"initial image\" in the below guide.</p> <p>From there, you can consider the following techniques to augment your image:</p> <ul> <li>New Images: Move the bounding box to an empty area of the Canvas, type in   your prompt, and Invoke, to generate a new image using the Text to Image   function.</li> <li>Image Correction: Use the color picker and brush tool to paint corrections   on the image, switch to the Mask layer, and brush a mask over your painted   area to use Inpainting. You can also use the ImageToImage generation   method to invoke new interpretations of the image.</li> <li>Image Expansion: Move the bounding box to include a portion of your   initial image, and a portion of transparent/empty pixels, then Invoke using a   prompt that describes what you'd like to see in that area. This will Outpaint   the image. You'll typically find more coherent results if you keep about   50-60% of the original image in the bounding box. Make sure that the Image To   Image Strength slider is set to a high value - you may need to set it higher   than you are used to.</li> <li>New Content on Existing Images: If you want to add new details or objects   into your image, use the brush tool to paint a sketch of what you'd like to   see on the image, switch to the Mask layer, and brush a mask over your painted   area to use Inpainting. If the masked area is small, consider using a   smaller bounding box to take advantage of Invoke's automatic Scaling features,   which can help to produce better details.</li> <li>And more: There are a number of creative ways to use the Canvas, and the   above are just starting points. We're excited to see what you come up with!</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#generation-methods","title":"Generation Methods","text":"<p>The Canvas can use all generation methods available (Txt2Img, Img2Img, Inpainting, and Outpainting), and these will be automatically selected and used based on the current selection area within the Bounding Box.</p>"},{"location":"features/UNIFIED_CANVAS/#text-to-image","title":"Text to Image","text":"<p>If the Bounding Box is placed over an area of Canvas with an empty Base Layer, invoking a new image will use TextToImage. This generates an entirely new image based on your prompt.</p>"},{"location":"features/UNIFIED_CANVAS/#image-to-image","title":"Image to Image","text":"<p>If the Bounding Box is placed over an area of Canvas with an existing Base Layer area with no transparent pixels or masks, invoking a new image will use ImageToImage. This uses the image within the bounding box and your prompt to interpret a new image. The image will be closer to your original image at lower Image to Image strengths.</p>"},{"location":"features/UNIFIED_CANVAS/#inpainting","title":"Inpainting","text":"<p>If the Bounding Box is placed over an area of Canvas with an existing Base Layer and any pixels selected using the Mask layer, invoking a new image will use Inpainting. Inpainting uses the existing colors/forms in the masked area in order to generate a new image for the masked area only. The unmasked portion of the image will remain the same. Image to Image strength applies to the inpainted area.</p> <p>If you desire something completely different from the original image in your new generation (i.e., if you want Invoke to ignore existing colors/forms), consider toggling the Inpaint Replace setting on, and use high values for both Inpaint Replace and Image To Image Strength.</p> <p>Note</p> <p>By default, the Scale Before Processing option \u2014 which inpaints more coherent details by generating at a larger resolution and then scaling \u2014 is only activated when the Bounding Box is relatively small. To get the best inpainting results you should therefore resize your Bounding Box to the smallest area that contains your mask and enough surrounding detail to help Stable Diffusion understand the context of what you want it to draw. You should also update your prompt so that it describes just the area within the Bounding Box.</p>"},{"location":"features/UNIFIED_CANVAS/#outpainting","title":"Outpainting","text":"<p>If the Bounding Box is placed over an area of Canvas partially filled by an existing Base Layer area and partially by transparent pixels or masks, invoking a new image will use Outpainting, as well as Inpainting any masked areas.</p>"},{"location":"features/UNIFIED_CANVAS/#advanced-features","title":"Advanced Features","text":"<p>Features with non-obvious behavior are detailed below, in order to provide clarity on the intent and common use cases we expect for utilizing them.</p>"},{"location":"features/UNIFIED_CANVAS/#toolbar","title":"Toolbar","text":""},{"location":"features/UNIFIED_CANVAS/#mask-options","title":"Mask Options","text":"<ul> <li>Enable Mask - This flag can be used to Enable or Disable the currently   painted mask. If you have painted a mask, but you don't want it affect the   next invocation, but you also don't want to delete it, then you can set this   option to Disable. When you want the mask back, set this back to Enable.</li> <li>Preserve Masked Area - When enabled, Preserve Masked Area inverts the   effect of the Mask on the Inpainting process. Pixels in masked areas will be   kept unchanged, and unmasked areas will be regenerated.</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#creative-tools","title":"Creative Tools","text":"<ul> <li>Brush - Base/Mask Modes - The Brush tool switches automatically between   different modes of operation for the Base and Mask layers respectively.<ul> <li>On the Base layer, the brush will directly paint on the Canvas using the   color selected on the Brush Options menu.</li> <li>On the Mask layer, the brush will create a new mask. If you're finding the   mask difficult to see over the existing content of the Unified Canvas, you   can change the color it is drawn with using the color selector on the Mask   Options dropdown.</li> </ul> </li> <li>Erase Bounding Box - On the Base layer, erases all pixels within the   Bounding Box.</li> <li>Fill Bounding Box - On the Base layer, fills all pixels within the   Bounding Box with the currently selected color.</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#canvas-tools","title":"Canvas Tools","text":"<ul> <li>Move Tool - Allows for manipulation of the Canvas view (by dragging on the   Canvas, outside the bounding box), the Bounding Box (by dragging the edges of   the box), or the Width/Height of the Bounding Box (by dragging one of the 9   directional handles).</li> <li>Reset View - Click to re-orients the view to the center of the Bounding   Box.</li> <li>Merge Visible - If your browser is having performance problems drawing the   image in the Unified Canvas, click this to consolidate all of the information   currently being rendered by your browser into a merged copy of the image. This   lowers the resource requirements and should improve performance.</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#seam-correction","title":"Seam Correction","text":"<p>When doing Inpainting or Outpainting, Invoke needs to merge the pixels generated by Stable Diffusion into your existing image. To do this, the area around the <code>seam</code> at the boundary between your image and the new generation is automatically blended to produce a seamless output. In a fully automatic process, a mask is generated to cover the seam, and then the area of the seam is Inpainted.</p> <p>Although the default options should work well most of the time, sometimes it can help to alter the parameters that control the seam Inpainting. A wider seam and a blur setting of about \u2153 of the seam have been noted as producing consistently strong results (e.g. 96 wide and 16 blur - adds up to 32 blur with both sides). Seam strength of 0.7 is best for reducing hard seams.</p> <ul> <li>Seam Size - The size of the seam masked area. Set higher to make a larger   mask around the seam.</li> <li>Seam Blur - The size of the blur that is applied on each side of the   masked area.</li> <li>Seam Strength - The Image To Image Strength parameter used for the   Inpainting generation that is applied to the seam area.</li> <li>Seam Steps - The number of generation steps that should be used to Inpaint   the seam.</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#infill-scaling","title":"Infill &amp; Scaling","text":"<ul> <li>Scale Before Processing &amp; W/H: When generating images with a bounding box   smaller than the optimized W/H of the model (e.g., 512x512 for SD1.5), this   feature first generates at a larger size with the same aspect ratio, and then   scales that image down to fill the selected area. This is particularly useful   when inpainting very small details. Scaling is optional but is enabled by   default.</li> <li>Inpaint Replace: When Inpainting, the default method is to utilize the   existing RGB values of the Base layer to inform the generation process. If   Inpaint Replace is enabled, noise is generated and blended with the existing   pixels (completely replacing the original RGB values at an Inpaint Replace   value of 1). This can help generate more variation from the pixels on the Base   layers.<ul> <li>When using Inpaint Replace you should use a higher Image To Image Strength   value, especially at higher Inpaint Replace values</li> </ul> </li> <li>Infill Method: Invoke currently supports two methods for producing RGB   values for use in the Outpainting process: Patchmatch and Tile. We believe   that Patchmatch is the superior method, however we provide support for Tile in   case Patchmatch cannot be installed or is unavailable on your computer.</li> <li>Tile Size: The Tile method for Outpainting sources small portions of the   original image and randomly place these into the areas being Outpainted. This   value sets the size of those tiles.</li> </ul>"},{"location":"features/UNIFIED_CANVAS/#hot-keys","title":"Hot Keys","text":"<p>The Unified Canvas is a tool that excels when you use hotkeys. You can view the full list of keyboard shortcuts, updated with all new features, by clicking the Keyboard Shortcuts icon at the top right of the InvokeAI WebUI.</p>"},{"location":"features/VARIATIONS/","title":"Variations","text":""},{"location":"features/VARIATIONS/#intro","title":"Intro","text":"<p>Release 1.13 of SD-Dream adds support for image variations.</p> <p>You are able to do the following:</p> <ol> <li> <p>Generate a series of systematic variations of an image, given a prompt. The    amount of variation from one image to the next can be controlled.</p> </li> <li> <p>Given two or more variations that you like, you can combine them in a    weighted fashion.</p> </li> </ol> <p>This cheat sheet provides a quick guide for how this works in practice, using variations to create the desired image of Xena, Warrior Princess.</p>"},{"location":"features/VARIATIONS/#step-1-find-a-base-image-that-you-like","title":"Step 1 -- Find a base image that you like","text":"<p>The prompt we will use throughout is:</p> <p><code>\"lucy lawless as xena, warrior princess, character portrait, high resolution.\"</code></p> <p>This will be indicated as <code>\"prompt\"</code> in the examples below.</p> <p>First we let SD create a series of images in the usual way, in this case requesting six iterations:</p> <pre><code>invoke&gt; lucy lawless as xena, warrior princess, character portrait, high resolution -n6\n...\nOutputs:\n./outputs/Xena/000001.1579445059.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1579445059\n./outputs/Xena/000001.1880768722.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S1880768722\n./outputs/Xena/000001.332057179.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S332057179\n./outputs/Xena/000001.2224800325.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S2224800325\n./outputs/Xena/000001.465250761.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S465250761\n./outputs/Xena/000001.3357757885.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -S3357757885\n</code></pre> <p></p>  Seed 3357757885 looks nice"},{"location":"features/VARIATIONS/#step-2-generating-variations","title":"Step 2 - Generating Variations","text":"<p>Let's try to generate some variations. Using the same seed, we pass the argument <code>-v0.1</code> (or --variant_amount), which generates a series of variations each differing by a variation amount of 0.2. This number ranges from <code>0</code> to <code>1.0</code>, with higher numbers being larger amounts of variation.</p> <pre><code>invoke&gt; \"prompt\" -n6 -S3357757885 -v0.2\n...\nOutputs:\n./outputs/Xena/000002.784039624.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 784039624:0.2 -S3357757885\n./outputs/Xena/000002.3647897225.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.2 -S3357757885\n./outputs/Xena/000002.917731034.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 917731034:0.2 -S3357757885\n./outputs/Xena/000002.4116285959.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 4116285959:0.2 -S3357757885\n./outputs/Xena/000002.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1614299449:0.2 -S3357757885\n./outputs/Xena/000002.1335553075.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 1335553075:0.2 -S3357757885\n</code></pre>"},{"location":"features/VARIATIONS/#variation-sub-seeding","title":"Variation Sub Seeding","text":"<p>Note that the output for each image has a <code>-V</code> option giving the \"variant subseed\" for that image, consisting of a seed followed by the variation amount used to generate it.</p> <p>This gives us a series of closely-related variations, including the two shown here.</p> <p></p> subseed 3647897225 <p></p> subseed 1614299449 <p>I like the expression on Xena's face in the first one (subseed 3647897225), and the armor on her shoulder in the second one (subseed 1614299449). Can we combine them to get the best of both worlds?</p> <p>We combine the two variations using <code>-V</code> (<code>--with_variations</code>). Again, we must provide the seed for the originally-chosen image in order for this to work.</p> <pre><code>invoke&gt; \"prompt\"  -S3357757885 -V3647897225,0.1,1614299449,0.1\nOutputs:\n./outputs/Xena/000003.1614299449.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1 -S3357757885\n</code></pre> <p>Here we are providing equal weights (0.1 and 0.1) for both the subseeds. The resulting image is close, but not exactly what I wanted:</p> <p></p>  subseed 1614299449  <p>We could either try combining the images with different weights, or we can generate more variations around the almost-but-not-quite image. We do the latter, using both the <code>-V</code> (combining) and <code>-v</code> (variation strength) options. Note that we use <code>-n6</code> to generate 6 variations:</p> <pre><code>invoke&gt; \"prompt\" -S3357757885 -V3647897225,0.1,1614299449,0.1 -v0.05 -n6\nOutputs:\n./outputs/Xena/000004.3279757577.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,3279757577:0.05 -S3357757885\n./outputs/Xena/000004.2853129515.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2853129515:0.05 -S3357757885\n./outputs/Xena/000004.3747154981.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,3747154981:0.05 -S3357757885\n./outputs/Xena/000004.2664260391.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2664260391:0.05 -S3357757885\n./outputs/Xena/000004.1642517170.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,1642517170:0.05 -S3357757885\n./outputs/Xena/000004.2183375608.png: \"prompt\" -s50 -W512 -H512 -C7.5 -Ak_lms -V 3647897225:0.1,1614299449:0.1,2183375608:0.05 -S3357757885\n</code></pre> <p>This produces six images, all slight variations on the combination of the chosen two images. Here's the one I like best:</p> <p></p>  subseed 3747154981  <p>As you can see, this is a very powerful tool, which when combined with subprompt weighting, gives you great control over the content and quality of your generated images.</p>"},{"location":"features/VARIATIONS/#variations-and-samplers","title":"Variations and Samplers","text":"<p>The sampler you choose has a strong effect on variation strength. Some samplers, such as <code>k_euler_a</code> are very \"creative\" and produce significant amounts of image-to-image variation even when the seed is fixed and the <code>-v</code> argument is very low. Others are more deterministic. Feel free to experiment until you find the combination that you like.</p> <p>Also be aware of the Perlin Noise feature, which provides another way of introducing variability into your image generation requests.</p>"},{"location":"features/WEB/","title":"InvokeAI Web Server","text":"<p>As of version 2.0.0, this distribution comes with a full-featured web server (see screenshot).</p> <p>To use it, launch the <code>invoke.sh</code>/<code>invoke.bat</code> script and select option (2). Alternatively, with the InvokeAI environment active, run the <code>invokeai</code> script by adding the <code>--web</code> option:</p> <pre><code>invokeai --web\n</code></pre> <p>You can then connect to the server by pointing your web browser at http://localhost:9090. To reach the server from a different machine on your LAN, you may launch the web server with the <code>--host</code> argument and either the IP address of the host you are running it on, or the wildcard <code>0.0.0.0</code>. For example:</p> <pre><code>invoke.sh --host 0.0.0.0\n</code></pre> <p>or</p> <pre><code>invokeai --web --host 0.0.0.0\n</code></pre>"},{"location":"features/WEB/#quick-guided-walkthrough-of-the-webuis-features","title":"Quick guided walkthrough of the WebUI's features","text":"<p>While most of the WebUI's features are intuitive, here is a guided walkthrough through its various components.</p> <p></p> <p>The screenshot above shows the Text to Image tab of the WebUI. There are three main sections:</p> <ol> <li> <p>A control panel on the left, which contains various settings for text to    image generation. The most important part is the text field (currently    showing <code>strawberry sushi</code>) for entering the text prompt, and the camera icon    directly underneath that will render the image. We'll call this the Invoke    button from now on.</p> </li> <li> <p>The current image section in the middle, which shows a large format    version of the image you are currently working on. A series of buttons at the    top (\"image to image\", \"Use All\", \"Use Seed\", etc) lets you modify the image    in various ways.</p> </li> <li> <p>A *gallery section on the left that contains a history of the images you    have generated. These images are read and written to the directory specified    at launch time in <code>--outdir</code>.</p> </li> </ol> <p>In addition to these three elements, there are a series of icons for changing global settings, reporting bugs, and changing the theme on the upper right.</p> <p>There are also a series of icons to the left of the control panel (see highlighted area in the screenshot below) which select among a series of tabs for performing different types of operations.</p> <p></p> <p>From top to bottom, these are:</p> <ol> <li>Text to Image - generate images from text</li> <li>Image to Image - from an uploaded starting image (drawing or photograph)    generate a new one, modified by the text prompt</li> <li>Unified Canvas - Interactively combine multiple images, extend them    with outpainting,and modify interior portions of the image with    inpainting, erase portions of a starting image and have the AI fill in    the erased region from a text prompt.</li> <li>Workflow Management (not yet implemented) - this panel will allow you to create    pipelines of common operations and combine them into workflows.</li> <li>Training (not yet implemented) - this panel will provide an interface to textual    inversion training and fine tuning.</li> </ol> <p>The inpainting, outpainting and postprocessing tabs are currently in development. However, limited versions of their features can already be accessed through the Text to Image and Image to Image tabs.</p>"},{"location":"features/WEB/#walkthrough","title":"Walkthrough","text":"<p>The following walkthrough will exercise most (but not all) of the WebUI's feature set.</p>"},{"location":"features/WEB/#text-to-image","title":"Text to Image","text":"<ol> <li> <p>Launch the WebUI using <code>python scripts/invoke.py --web</code> and connect to it    with your browser by accessing <code>http://localhost:9090</code>. If the browser and    server are running on different machines on your LAN, add the option    <code>--host 0.0.0.0</code> to the launch command line and connect to the machine    hosting the web server using its IP address or domain name.</p> </li> <li> <p>If all goes well, the WebUI should come up and you'll see a green    <code>connected</code> message on the upper right.</p> </li> </ol>"},{"location":"features/WEB/#basics","title":"Basics","text":"<ol> <li> <p>Generate an image by typing strawberry sushi into the large prompt field     on the upper left and then clicking on the Invoke button (the one with the     Camera icon). After a short wait, you'll see a large image of sushi in the     image panel, and a new thumbnail in the gallery on the right.</p> <p>If you need more room on the screen, you can turn the gallery off by clicking on the x to the right of \"Your Invocations\". You can turn it back on later by clicking the image icon that appears in the gallery's place.</p> <p>The images are written into the directory indicated by the <code>--outdir</code> option provided at script launch time. By default, this is <code>outputs/img-samples</code> under the InvokeAI directory.</p> </li> <li> <p>Generate a bunch of strawberry sushi images by increasing the number of     requested images by adjusting the Images counter just below the Camera     button. As each is generated, it will be added to the gallery. You can     switch the active image by clicking on the gallery thumbnails.</p> </li> <li> <p>Try playing with different settings, including image width and height, the     Sampler, the Steps and the CFG scale.</p> <p>Image Width and Height do what you'd expect. However, be aware that larger images consume more VRAM memory and take longer to generate.</p> <p>The Sampler controls how the AI selects the image to display. Some samplers are more \"creative\" than others and will produce a wider range of variations (see next section). Some samplers run faster than others.</p> <p>Steps controls how many noising/denoising/sampling steps the AI will take. The higher this value, the more refined the image will be, but the longer the image will take to generate. A typical strategy is to generate images with a low number of steps in order to select one to work on further, and then regenerate it using a higher number of steps.</p> <p>The CFG Scale controls how hard the AI tries to match the generated image to the input prompt. You can go as high or low as you like, but generally values greater than 20 won't improve things much, and values lower than 5 will produce unexpected images. There are complex interactions between Steps, CFG Scale and the Sampler, so experiment to find out what works for you.</p> </li> <li> <p>To regenerate a previously-generated image, select the image you want and     click Use All. This loads the text prompt and other original settings into     the control panel. If you then press Invoke it will regenerate the image     exactly. You can also selectively modify the prompt or other settings to     tweak the image.</p> <p>Alternatively, you may click on Use Seed to load just the image's seed, and leave other settings unchanged.</p> </li> <li> <p>To regenerate a Stable Diffusion image that was generated by another SD     package, you need to know its text prompt and its Seed. Copy-paste the     prompt into the prompt box, unset the Randomize Seed control in the     control panel, and copy-paste the desired Seed into its text field. When     you Invoke, you will get something similar to the original image. It will     not be exact unless you also set the correct values for the original     sampler, CFG, steps and dimensions, but it will (usually) be close.</p> </li> </ol>"},{"location":"features/WEB/#variations-on-a-theme","title":"Variations on a theme","text":"<ol> <li> <p>Let's try generating some variations. Select your favorite sushi image from     the gallery to load it. Then select \"Use All\" from the list of buttons     above. This will load up all the settings used to generate this image,     including its unique seed.</p> <p>Go down to the Variations section of the Control Panel and set the button to On. Set Variation Amount to 0.2 to generate a modest number of variations on the image, and also set the Image counter to <code>4</code>. Press the <code>invoke</code> button. This will generate a series of related images. To obtain smaller variations, just lower the Variation Amount. You may also experiment with changing the Sampler. Some samplers generate more variability than others. k_euler_a is particularly creative, while ddim is pretty conservative.</p> </li> <li> <p>For even more variations, experiment with increasing the setting for     Perlin. This adds a bit of noise to the image generation process. Note     that values of Perlin noise greater than 0.15 produce poor images for     several of the samplers.</p> </li> </ol>"},{"location":"features/WEB/#facial-reconstruction-and-upscaling","title":"Facial reconstruction and upscaling","text":"<p>Stable Diffusion frequently produces mangled faces, particularly when there are multiple figures in the same scene. Stable Diffusion has particular issues with generating reallistic eyes. InvokeAI provides the ability to reconstruct faces using either the GFPGAN or CodeFormer libraries. For more information see POSTPROCESS.</p> <ol> <li> <p>Invoke a prompt that generates a mangled face. A prompt that often gives     this is \"portrait of a lawyer, \u00be shot\" (this is not intended as a slur     against lawyers!) Once you have an image that needs some touching up, load     it into the Image panel, and press the button with the face icon     (highlighted in the first screenshot below). A dialog box will appear. Leave     Strength at 0.8 and press *Restore Faces\". If all goes well, the eyes and     other aspects of the face will be improved (see the second screenshot)</p> <p></p> <p></p> <p>The facial reconstruction Strength field adjusts how aggressively the face library will try to alter the face. It can be as high as 1.0, but be aware that this often softens the face airbrush style, losing some details. The default 0.8 is usually sufficient.</p> </li> <li> <p>\"Upscaling\" is the process of increasing the size of an image while     retaining the sharpness. InvokeAI uses an external library called \"ESRGAN\"     to do this. To invoke upscaling, simply select an image and press the HD     button above it. You can select between 2X and 4X upscaling, and adjust the     upscaling strength, which has much the same meaning as in facial     reconstruction. Try running this on one of your previously-generated images.</p> </li> <li> <p>Finally, you can run facial reconstruction and/or upscaling automatically     after each Invocation. Go to the Advanced Options section of the Control     Panel and turn on Restore Face and/or Upscale.</p> </li> </ol>"},{"location":"features/WEB/#image-to-image","title":"Image to Image","text":"<p>InvokeAI lets you take an existing image and use it as the basis for a new creation. You can use any sort of image, including a photograph, a scanned sketch, or a digital drawing, as long as it is in PNG or JPEG format.</p> <p>For this tutorial, we'll use files named Lincoln-and-Parrot-512.png, and Lincoln-and-Parrot-512-transparent.png. Download these images to your local machine now to continue with the walkthrough.</p> <ol> <li> <p>Click on the Image to Image tab icon, which is the second icon from the     top on the left-hand side of the screen:</p> <p> </p> <p>This will bring you to a screen similar to the one shown here:</p> <p> </p> </li> <li> <p>Drag-and-drop the Lincoln-and-Parrot image into the Image panel, or click     the blank area to get an upload dialog. The image will load into an area     marked Initial Image. (The WebUI will also load the most     recently-generated image from the gallery into a section on the left, but     this image will be replaced in the next step.)</p> </li> <li> <p>Go to the prompt box and type old sea captain with raven on shoulder and     press Invoke. A derived image will appear to the right of the original one:</p> <p></p> </li> <li> <p>Experiment with the different settings. The most influential one in Image to     Image is Image to Image Strength located about midway down the control     panel. By default it is set to 0.75, but can range from 0.0 to 0.99. The     higher the value, the more of the original image the AI will replace. A     value of 0 will leave the initial image completely unchanged, while 0.99     will replace it completely. However, the Sampler and CFG Scale also     influence the final result. You can also generate variations in the same way     as described in Text to Image.</p> </li> <li> <p>What if we only want to change certain part(s) of the image and leave the     rest intact? This is called Inpainting, and a future version of the InvokeAI     web server will provide an interactive painting canvas on which you can     directly draw the areas you wish to Inpaint into. For now, you can achieve     this effect by using an external photoeditor tool to make one or more     regions of the image transparent as described in [INPAINTING.md] and     uploading that.</p> <p>The file Lincoln-and-Parrot-512-transparent.png is a version of the earlier image in which the area around the parrot has been replaced with transparency. Click on the \"x\" in the upper right of the Initial Image and upload the transparent version. Using the same prompt \"old sea captain with raven on shoulder\" try Invoking an image. This time, only the parrot will be replaced, leaving the rest of the original image intact:</p> <p> </p> </li> <li> <p>Would you like to modify a previously-generated image using the Image to     Image facility? Easy! While in the Image to Image panel, hover over any of     the gallery images to see a little menu of icons pop up. Click the picture     icon to instantly send the selected image to Image to Image as the initial     image.</p> </li> </ol> <p>You can do the same from the Text to Image tab by clicking on the picture icon above the central image panel. The screenshot below shows where the \"use as initial image\" icons are located.</p> <p></p>"},{"location":"features/WEB/#unified-canvas","title":"Unified Canvas","text":"<p>See the Unified Canvas Guide</p>"},{"location":"features/WEB/#parting-remarks","title":"Parting remarks","text":"<p>This concludes the walkthrough, but there are several more features that you can explore. Please check out the Command Line Interface documentation for further explanation of the advanced features that were not covered here.</p> <p>The WebUI is only rapid development. Check back regularly for updates!</p>"},{"location":"features/WEB/#reference","title":"Reference","text":""},{"location":"features/WEB/#additional-options","title":"Additional Options","text":"parameter  effect <code>--web_develop</code> Starts the web server in development mode. <code>--web_verbose</code> Enables verbose logging <code>--cors [CORS ...]</code> Additional allowed origins, comma-separated <code>--host HOST</code> Web server: Host or IP to listen on. Set to 0.0.0.0 to accept traffic from other devices on your network. <code>--port PORT</code> Web server: Port to listen on <code>--certfile CERTFILE</code> Web server: Path to certificate file to use for SSL. Use together with --keyfile <code>--keyfile KEYFILE</code> Web server: Path to private key file to use for SSL. Use together with --certfile' <code>--gui</code> Start InvokeAI GUI - This is the \"desktop mode\" version of the web app. It uses Flask to create a desktop app experience of the webserver."},{"location":"features/WEB/#web-specific-features","title":"Web Specific Features","text":"<p>The web experience offers an incredibly easy-to-use experience for interacting with the InvokeAI toolkit. For detailed guidance on individual features, see the Feature-specific help documents available in this directory. Note that the latest functionality available in the CLI may not always be available in the Web interface.</p>"},{"location":"features/WEB/#dark-mode-light-mode","title":"Dark Mode &amp; Light Mode","text":"<p>The InvokeAI interface is available in a nano-carbon black &amp; purple Dark Mode, and a \"burn your eyes out Nosferatu\" Light Mode. These can be toggled by clicking the Sun/Moon icons at the top right of the interface.</p> <p></p> <p></p>"},{"location":"features/WEB/#invocation-toolbar","title":"Invocation Toolbar","text":"<p>The left side of the InvokeAI interface is available for customizing the prompt and the settings used for invoking your new image. Typing your prompt into the open text field and clicking the Invoke button will produce the image based on the settings configured in the toolbar.</p> <p>See below for additional documentation related to each feature:</p> <ul> <li>Core Prompt Settings</li> <li>Variations</li> <li>Upscaling</li> <li>Image to Image</li> <li>Inpainting</li> <li>Other</li> </ul>"},{"location":"features/WEB/#invocation-gallery","title":"Invocation Gallery","text":"<p>The currently selected --outdir (or the default outputs folder) will display all previously generated files on load. As new invocations are generated, these will be dynamically added to the gallery, and can be previewed by selecting them. Each image also has a simple set of actions (e.g., Delete, Use Seed, Use All Parameters, etc.) that can be accessed by hovering over the image.</p>"},{"location":"features/WEB/#image-workspace","title":"Image Workspace","text":"<p>When an image from the Invocation Gallery is selected, or is generated, the image will be displayed within the center of the interface. A quickbar of common image interactions are displayed along the top of the image, including:</p> <ul> <li>Use image in the <code>Image to Image</code> workflow</li> <li>Initialize Face Restoration on the selected file</li> <li>Initialize Upscaling on the selected file</li> <li>View File metadata and details</li> <li>Delete the file</li> </ul>"},{"location":"features/WEB/#acknowledgements","title":"Acknowledgements","text":"<p>A huge shout-out to the core team working to make this vision a reality, including psychedelicious, Kyle0654 and blessedcoolant. hipsterusername was the team's unofficial cheerleader and added tooltips/docs.</p>"},{"location":"features/WEBUIHOTKEYS/","title":"WebUI Hotkey List","text":""},{"location":"features/WEBUIHOTKEYS/#app-hotkeys","title":"App Hotkeys","text":"Setting Hotkey Ctrl+Enter Invoke Shift+X Cancel Alt+A Focus Prompt O Toggle Options Shift+O Pin Options Z Toggle Viewer G Toggle Gallery F Maximize Workspace 1 - 5 Change Tabs ` Toggle Console"},{"location":"features/WEBUIHOTKEYS/#general-hotkeys","title":"General Hotkeys","text":"Setting Hotkey P Set Prompt S Set Seed A Set Parameters Shift+R Restore Faces Shift+U Upscale I Show Info Shift+I Send To Image To Image Del Delete Image Esc Close Panels"},{"location":"features/WEBUIHOTKEYS/#gallery-hotkeys","title":"Gallery Hotkeys","text":"Setting Hotkey Left Previous Image Right Next Image Shift+G Toggle Gallery Pin Shift+Up Increase Gallery Image Size Shift+Down Decrease Gallery Image Size"},{"location":"features/WEBUIHOTKEYS/#unified-canvas-hotkeys","title":"Unified Canvas Hotkeys","text":"Setting Hotkey B Select Brush E Select Eraser [ Decrease Brush Size ] Increase Brush Size Shift+[ Decrease Brush Opacity Shift+] Increase Brush Opacity V Move Tool Shift+F Fill Bounding Box Del / Backspace Erase Bounding Box C Select Color Picker N Toggle Snap Hold Space Quick Toggle Move Q Toggle Layer Shift+C Clear Mask H Hide Mask Shift+H Show/Hide Bounding Box Shift+M Merge Visible Shift+S Save To Gallery Ctrl+C Copy To Clipboard Shift+D Download Image Ctrl+Z Undo Ctrl+Y / Ctrl+Shift+Z Redo R Reset View Left Previous Staging Image Right Next Staging Image Enter Accept Staging Image"},{"location":"help/","title":"Help","text":"<p>If you are looking for help with the installation of InvokeAI, please take a look into the Installation section of the docs.</p> <p>Here you will find help to topics like</p> <ul> <li>how to contribute</li> <li>configuration recommendation for IDEs</li> </ul> <p>If you have an Idea about what's missing and aren't scared from contributing, just take a look at DOCS to find out how to do so.</p>"},{"location":"help/SAMPLER_CONVERGENCE/","title":"Sampler Convergence","text":"<p>As features keep increasing, making the right choices for your needs can become increasingly difficult. What sampler to use? And for how many steps? Do you change the CFG value? Do you use prompt weighting? Do you allow variations?</p> <p>Even once you have a result, do you blend it with other images? Pass it through <code>img2img</code>? With what strength? Do you use inpainting to correct small details? Outpainting to extend cropped sections?</p> <p>The purpose of this series of documents is to help you better understand these tools, so you can make the best out of them. Feel free to contribute with your own findings!</p> <p>In this document, we will talk about sampler convergence.</p> <p>Looking for a short version? Here's a TL;DR in 3 tables.</p> <p>Remember</p> <ul> <li>Results converge as steps (<code>-s</code>) are increased (except for <code>K_DPM_2_A</code> and <code>K_EULER_A</code>). Often at \u2265 <code>-s100</code>, but may require \u2265 <code>-s700</code>).</li> <li>Producing a batch of candidate images at low (<code>-s8</code> to <code>-s30</code>) step counts can save you hours of computation.</li> <li><code>K_HEUN</code> and <code>K_DPM_2</code>  converge in less steps (but are slower).</li> <li><code>K_DPM_2_A</code> and <code>K_EULER_A</code> incorporate a lot of creativity/variability.</li> </ul> Sampler (3 sample avg) it/s (M1 Max 64GB, 512x512) <code>DDIM</code> 1.89 <code>PLMS</code> 1.86 <code>K_EULER</code> 1.86 <code>K_LMS</code> 1.91 <code>K_HEUN</code> 0.95 (slower) <code>K_DPM_2</code> 0.95 (slower) <code>K_DPM_2_A</code> 0.95 (slower) <code>K_EULER_A</code> 1.86 <p>suggestions</p> <p>For most use cases, <code>K_LMS</code>, <code>K_HEUN</code> and <code>K_DPM_2</code> are the best choices (the latter 2 run 0.5x as quick, but tend to converge 2x as quick as <code>K_LMS</code>). At very low steps (\u2264 <code>-s8</code>), <code>K_HEUN</code> and <code>K_DPM_2</code> are not recommended. Use <code>K_LMS</code> instead.</p> <p>For variability, use <code>K_EULER_A</code> (runs 2x as quick as <code>K_DPM_2_A</code>).</p>"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-results","title":"Sampler results","text":"<p>Let's start by choosing a prompt and using it with each of our 8 samplers, running it for 10, 20, 30, 40, 50 and 100 steps.</p> <p>Anime. <code>\"an anime girl\" -W512 -H512 -C7.5 -S3031912972</code></p> <p></p>"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-convergence_1","title":"Sampler convergence","text":"<p>Immediately, you can notice results tend to converge -that is, as <code>-s</code> (step) values increase, images look more and more similar until there comes a point where the image no longer changes.</p> <p>You can also notice how <code>DDIM</code> and <code>PLMS</code> eventually tend to converge to K-sampler results as steps are increased. Among K-samplers, <code>K_HEUN</code> and <code>K_DPM_2</code> seem to require the fewest steps to converge, and even at low step counts they are good indicators of the final result. And finally, <code>K_DPM_2_A</code> and <code>K_EULER_A</code> seem to do a bit of their own thing and don't keep much similarity with the rest of the samplers.</p>"},{"location":"help/SAMPLER_CONVERGENCE/#batch-generation-speedup","title":"Batch generation speedup","text":"<p>This realization is very useful because it means you don't need to create a batch of 100 images (<code>-n100</code>) at <code>-s100</code> to choose your favorite 2 or 3 images. You can produce the same 100 images at <code>-s10</code> to <code>-s30</code> using a K-sampler (since they converge faster), get a rough idea of the final result, choose your 2 or 3 favorite ones, and then run <code>-s100</code> on those images to polish some details. The latter technique is 3-8x as quick.</p> <p>Example</p> <p>At 60s per 100 steps.</p> <p>A) 60s * 100 images = 6000s (100 images at <code>-s100</code>, manually picking 3 favorites)</p> <p>B) 6s 100 images + 60s 3 images = 780s (100 images at <code>-s10</code>, manually picking 3 favorites, and running those 3 at <code>-s100</code> to polish details)</p> <p>The result is 1 hour and 40 minutes for Variant A, vs 13 minutes for Variant B.</p>"},{"location":"help/SAMPLER_CONVERGENCE/#topic-convergance","title":"Topic convergance","text":"<p>Now, these results seem interesting, but do they hold for other topics? How about nature? Food? People? Animals? Let's try!</p> <p>Nature. <code>\"valley landscape wallpaper, d&amp;d art, fantasy, painted, 4k, high detail, sharp focus, washed colors, elaborate excellent painted illustration\" -W512 -H512 -C7.5 -S1458228930</code></p> <p></p> <p>With nature, you can see how initial results are even more indicative of final result -more so than with characters/people. <code>K_HEUN</code> and <code>K_DPM_2</code> are again the quickest indicators, almost right from the start. Results also converge faster (e.g. <code>K_HEUN</code> converged at <code>-s21</code>).</p> <p>Food. <code>\"a hamburger with a bowl of french fries\" -W512 -H512 -C7.5 -S4053222918</code></p> <p></p> <p>Again, <code>K_HEUN</code> and <code>K_DPM_2</code> take the fewest number of steps to be good indicators of the final result. <code>K_DPM_2_A</code> and <code>K_EULER_A</code> seem to incorporate a lot of creativity/variability, capable of producing rotten hamburgers, but also of adding lettuce to the mix. And they're the only samplers that produced an actual 'bowl of fries'!</p> <p>Animals. <code>\"grown tiger, full body\" -W512 -H512 -C7.5 -S3721629802</code></p> <p></p> <p><code>K_HEUN</code> and <code>K_DPM_2</code> once again require the least number of steps to be indicative of the final result (around <code>-s30</code>), while other samplers are still struggling with several tails or malformed back legs.</p> <p>It also takes longer to converge (for comparison, <code>K_HEUN</code> required around 150 steps to converge). This is normal, as producing human/animal faces/bodies is one of the things the model struggles the most with. For these topics, running for more steps will often increase coherence within the composition.</p> <p>People. <code>\"Ultra realistic photo, (Miranda Bloom-Kerr), young, stunning model, blue eyes, blond hair, beautiful face, intricate, highly detailed, smooth, art by artgerm and greg rutkowski and alphonse mucha, stained glass\" -W512 -H512 -C7.5 -S2131956332</code>. This time, we will go up to 300 steps.</p> <p></p> <p>Observing the results, it again takes longer for all samplers to converge (<code>K_HEUN</code> took around 150 steps), but we can observe good indicative results much earlier (see: <code>K_HEUN</code>). Conversely, <code>DDIM</code> and <code>PLMS</code> are still undergoing moderate changes (see: lace around her neck), even at <code>-s300</code>.</p> <p>In fact, as we can see in this other experiment, some samplers can take 700+ steps to converge when generating people.</p> <p></p> <p>Note also the point of convergence may not be the most desirable state (e.g. I prefer an earlier version of the face, more rounded), but it will probably be the most coherent arms/hands/face attributes-wise. You can always merge different images with a photo editing tool and pass it through <code>img2img</code> to smoothen the composition.</p>"},{"location":"help/SAMPLER_CONVERGENCE/#sampler-generation-times","title":"Sampler generation times","text":"<p>Once we understand the concept of sampler convergence, we must look into the performance of each sampler in terms of steps (iterations) per second, as not all samplers run at the same speed.</p> <p>On my M1 Max with 64GB of RAM, for a 512x512 image</p> Sampler (3 sample average) it/s <code>DDIM</code> 1.89 <code>PLMS</code> 1.86 <code>K_EULER</code> 1.86 <code>K_LMS</code> 1.91 <code>K_HEUN</code> 0.95 (slower) <code>K_DPM_2</code> 0.95 (slower) <code>K_DPM_2_A</code> 0.95 (slower) <code>K_EULER_A</code> 1.86 <p>Combining our results with the steps per second of each sampler, three choices come out on top: <code>K_LMS</code>, <code>K_HEUN</code> and <code>K_DPM_2</code> (where the latter two run 0.5x as quick but tend to converge 2x as quick as <code>K_LMS</code>). For creativity and a lot of variation between iterations, <code>K_EULER_A</code> can be a good choice (which runs 2x as quick as <code>K_DPM_2_A</code>).</p> <p>Additionally, image generation at very low steps (\u2264 <code>-s8</code>) is not recommended for <code>K_HEUN</code> and <code>K_DPM_2</code>. Use <code>K_LMS</code> instead.</p> <p></p>"},{"location":"help/SAMPLER_CONVERGENCE/#three-key-points","title":"Three key points","text":"<p>Finally, it is relevant to mention that, in general, there are 3 important moments in the process of image formation as steps increase:</p> <ul> <li> <p>The (earliest) point at which an image becomes a good indicator of the final result (useful for batch generation at low step values, to then improve the quality/coherence of the chosen images via running the same prompt and seed for more steps).</p> </li> <li> <p>The (earliest) point at which an image becomes coherent, even if different from the result if steps are increased (useful for batch generation at low step values, where quality/coherence is improved via techniques other than increasing the steps -e.g. via inpainting).</p> </li> <li> <p>The point at which an image fully converges.</p> </li> </ul> <p>Hence, remember that your workflow/strategy should define your optimal number of steps, even for the same prompt and seed (for example, if you seek full convergence, you may run <code>K_LMS</code> for <code>-s200</code> in the case of the red-haired girl, but <code>K_LMS</code> and <code>-s20</code>-taking one tenth the time- may do as well if your workflow includes adding small details, such as the missing shoulder strap, via <code>img2img</code>).</p>"},{"location":"help/IDE-Settings/","title":"IDE-Settings","text":"<p>Here we will share settings for IDEs used by our developers, maybe you can find something interestening which will help to boost your development efficency \ud83d\udd25</p>"},{"location":"help/IDE-Settings/vs-code/","title":"Visual Studio Code","text":"<p>The Workspace Settings are stored in the project (repository) root and get higher priorized than your user settings.</p> <p>This helps to have different settings for different projects, while the user settings get used as a default value if no workspace settings are provided.</p>"},{"location":"help/IDE-Settings/vs-code/#tasksjson","title":"tasks.json","text":"<p>First we will create a task configuration which will create a virtual environment and update the deps (pip, setuptools and wheel).</p> <p>Into this venv we will then install the pyproject.toml in editable mode with dev, docs and test dependencies.</p> .vscode/tasks.json<pre><code>{\n// See https://go.microsoft.com/fwlink/?LinkId=733558\n// for the documentation about the tasks.json format\n\"version\": \"2.0.0\",\n\"tasks\": [\n{\n\"label\": \"Create virtual environment\",\n\"detail\": \"Create .venv and upgrade pip, setuptools and wheel\",\n\"command\": \"python3\",\n\"args\": [\n\"-m\",\n\"venv\",\n\".venv\",\n\"--prompt\",\n\"InvokeAI\",\n\"--upgrade-deps\"\n],\n\"runOptions\": {\n\"instanceLimit\": 1,\n\"reevaluateOnRerun\": true\n},\n\"group\": {\n\"kind\": \"build\"\n},\n\"presentation\": {\n\"echo\": true,\n\"reveal\": \"always\",\n\"focus\": false,\n\"panel\": \"shared\",\n\"showReuseMessage\": true,\n\"clear\": false\n}\n},\n{\n\"label\": \"build InvokeAI\",\n\"detail\": \"Build pyproject.toml with extras dev, docs and test\",\n\"command\": \"${workspaceFolder}/.venv/bin/python3\",\n\"args\": [\n\"-m\",\n\"pip\",\n\"install\",\n\"--use-pep517\",\n\"--editable\",\n\".[dev,docs,test]\"\n],\n\"dependsOn\": \"Create virtual environment\",\n\"dependsOrder\": \"sequence\",\n\"group\": {\n\"kind\": \"build\",\n\"isDefault\": true\n},\n\"presentation\": {\n\"echo\": true,\n\"reveal\": \"always\",\n\"focus\": false,\n\"panel\": \"shared\",\n\"showReuseMessage\": true,\n\"clear\": false\n}\n}\n]\n}\n</code></pre> <p>The fastest way to build InvokeAI now is Cmd+Shift+B</p>"},{"location":"help/IDE-Settings/vs-code/#launchjson","title":"launch.json","text":"<p>This file is used to define debugger configurations, so that you can one-click launch and monitor the application, set halt points to inspect specific states, ...</p> .vscode/launch.json<pre><code>{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n\"name\": \"invokeai web\",\n\"type\": \"python\",\n\"request\": \"launch\",\n\"program\": \".venv/bin/invokeai\",\n\"justMyCode\": true\n},\n{\n\"name\": \"invokeai cli\",\n\"type\": \"python\",\n\"request\": \"launch\",\n\"program\": \".venv/bin/invokeai\",\n\"justMyCode\": true\n},\n{\n\"name\": \"mkdocs serve\",\n\"type\": \"python\",\n\"request\": \"launch\",\n\"program\": \".venv/bin/mkdocs\",\n\"args\": [\"serve\"],\n\"justMyCode\": true\n}\n]\n}\n</code></pre> <p>Then you only need to hit F5 and the fun begins  (It is asumed that you have created a virtual environment via the tasks from the previous step.)</p>"},{"location":"help/IDE-Settings/vs-code/#extensionsjson","title":"extensions.json","text":"<p>A list of recommended vscode-extensions to make your life easier:</p> .vscode/extensions.json<pre><code>{\n\"recommendations\": [\n\"editorconfig.editorconfig\",\n\"github.vscode-pull-request-github\",\n\"ms-python.black-formatter\",\n\"ms-python.flake8\",\n\"ms-python.isort\",\n\"ms-python.python\",\n\"ms-python.vscode-pylance\",\n\"redhat.vscode-yaml\",\n\"tamasfe.even-better-toml\",\n\"eamodio.gitlens\",\n\"foxundermoon.shell-format\",\n\"timonwong.shellcheck\",\n\"esbenp.prettier-vscode\",\n\"davidanson.vscode-markdownlint\",\n\"yzhang.markdown-all-in-one\",\n\"bierner.github-markdown-preview\",\n\"ms-azuretools.vscode-docker\",\n\"mads-hartmann.bash-ide-vscode\"\n]\n}\n</code></pre>"},{"location":"help/IDE-Settings/vs-code/#settingsjson","title":"settings.json","text":"<p>With bellow settings your files already get formated when you save them (only your modifications if available), which will help you to not run into trouble with the pre-commit hooks. If the hooks fail, they will prevent you from commiting, but most hooks directly add a fixed version, so that you just need to stage and commit them:</p> .vscode/settings.json<pre><code>{\n\"[json]\": {\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\"editor.quickSuggestions\": {\n\"comments\": false,\n\"strings\": true,\n\"other\": true\n},\n\"editor.suggest.insertMode\": \"replace\",\n\"gitlens.codeLens.scopes\": [\"document\"]\n},\n\"[jsonc]\": {\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\"editor.formatOnSave\": true,\n\"editor.formatOnSaveMode\": \"modificationsIfAvailable\"\n},\n\"[python]\": {\n\"editor.defaultFormatter\": \"ms-python.black-formatter\",\n\"editor.formatOnSave\": true,\n\"editor.formatOnSaveMode\": \"file\"\n},\n\"[toml]\": {\n\"editor.defaultFormatter\": \"tamasfe.even-better-toml\",\n\"editor.formatOnSave\": true,\n\"editor.formatOnSaveMode\": \"modificationsIfAvailable\"\n},\n\"[yaml]\": {\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\"editor.formatOnSave\": true,\n\"editor.formatOnSaveMode\": \"modificationsIfAvailable\"\n},\n\"[markdown]\": {\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n\"editor.rulers\": [80],\n\"editor.unicodeHighlight.ambiguousCharacters\": false,\n\"editor.unicodeHighlight.invisibleCharacters\": false,\n\"diffEditor.ignoreTrimWhitespace\": false,\n\"editor.wordWrap\": \"on\",\n\"editor.quickSuggestions\": {\n\"comments\": \"off\",\n\"strings\": \"off\",\n\"other\": \"off\"\n},\n\"editor.formatOnSave\": true,\n\"editor.formatOnSaveMode\": \"modificationsIfAvailable\"\n},\n\"[shellscript]\": {\n\"editor.defaultFormatter\": \"foxundermoon.shell-format\"\n},\n\"[ignore]\": {\n\"editor.defaultFormatter\": \"foxundermoon.shell-format\"\n},\n\"editor.rulers\": [88],\n\"evenBetterToml.formatter.alignEntries\": false,\n\"evenBetterToml.formatter.allowedBlankLines\": 1,\n\"evenBetterToml.formatter.arrayAutoExpand\": true,\n\"evenBetterToml.formatter.arrayTrailingComma\": true,\n\"evenBetterToml.formatter.arrayAutoCollapse\": true,\n\"evenBetterToml.formatter.columnWidth\": 88,\n\"evenBetterToml.formatter.compactArrays\": true,\n\"evenBetterToml.formatter.compactInlineTables\": true,\n\"evenBetterToml.formatter.indentEntries\": false,\n\"evenBetterToml.formatter.inlineTableExpand\": true,\n\"evenBetterToml.formatter.reorderArrays\": true,\n\"evenBetterToml.formatter.reorderKeys\": true,\n\"evenBetterToml.formatter.compactEntries\": false,\n\"evenBetterToml.schema.enabled\": true,\n\"python.analysis.typeCheckingMode\": \"basic\",\n\"python.formatting.provider\": \"black\",\n\"python.languageServer\": \"Pylance\",\n\"python.linting.enabled\": true,\n\"python.linting.flake8Enabled\": true,\n\"python.testing.unittestEnabled\": false,\n\"python.testing.pytestEnabled\": true,\n\"python.testing.pytestArgs\": [\n\"tests\",\n\"--cov=ldm\",\n\"--cov-branch\",\n\"--cov-report=term:skip-covered\"\n],\n\"yaml.schemas\": {\n\"https://json.schemastore.org/prettierrc.json\": \"${workspaceFolder}/.prettierrc.yaml\"\n}\n}\n</code></pre>"},{"location":"help/contributing/","title":"Contributing","text":"<p>There are different ways how you can contribute to InvokeAI, like Translations, opening Issues for Bugs or ideas how to improve.</p> <p>This Section of the docs will explain some of the different ways of how you can contribute to make it easier for newcommers as well as advanced users </p> <p>If you want to contribute code, but you do not have an exact idea yet, take a look at the currently open  Bug Reports</p>"},{"location":"help/contributing/010_PULL_REQUEST/","title":"Pull-Request","text":""},{"location":"help/contributing/010_PULL_REQUEST/#pre-requirements","title":"pre-requirements","text":"<p>To follow the steps in this tutorial you will need:</p> <ul> <li>GitHub account</li> <li>git source controll</li> <li>Text / Code Editor (personally I preffer     Visual Studio Code)</li> <li>Terminal:<ul> <li>If you are on Linux/MacOS you can use bash or zsh</li> <li>for Windows Users the commands are written for PowerShell</li> </ul> </li> </ul>"},{"location":"help/contributing/010_PULL_REQUEST/#fork-repository","title":"Fork Repository","text":"<p>The first step to be done if you want to contribute to InvokeAI, is to fork the rpeository.</p> <p>Since you are already reading this doc, the easiest way to do so is by clicking here. You could also open InvokeAI and click on the \"Fork\" Button in the top right.</p>"},{"location":"help/contributing/010_PULL_REQUEST/#clone-your-fork","title":"Clone your fork","text":"<p>After you forked the Repository, you should clone it to your dev machine:</p> Linux / macOSWindows <pre><code>git clone https://github.com/&lt;github username&gt;/InvokeAI \\\n&amp;&amp; cd InvokeAI\n</code></pre> <pre><code>git clone https://github.com/&lt;github username&gt;/InvokeAI `\n&amp;&amp; cd InvokeAI\n</code></pre>"},{"location":"help/contributing/010_PULL_REQUEST/#install-in-editable-mode","title":"Install in Editable Mode","text":"<p>To install InvokeAI in editable mode, (as always) we recommend to create and activate a venv first. Afterwards you can install the InvokeAI Package, including dev and docs extras in editable mode, follwed by the installation of the pre-commit hook:</p> Linux / macOSWindows <pre><code>python -m venv .venv \\\n--prompt InvokeAI \\\n--upgrade-deps \\\n&amp;&amp; source .venv/bin/activate \\\n&amp;&amp; pip install \\\n--upgrade-deps \\\n--use-pep517 \\\n--editable=\".[dev,docs]\" \\\n&amp;&amp; pre-commit install\n</code></pre> <pre><code>python -m venv .venv `\n--prompt InvokeAI `\n--upgrade-deps `\n&amp;&amp; .venv/scripts/activate.ps1 `\n&amp;&amp; pip install `\n--upgrade `\n--use-pep517 `\n--editable=\".[dev,docs]\" `\n&amp;&amp; pre-commit install\n</code></pre>"},{"location":"help/contributing/010_PULL_REQUEST/#create-a-branch","title":"Create a branch","text":"<p>Make sure you are on main branch, from there create your feature branch:</p> Linux / macOSWindows <pre><code>git checkout main \\\n&amp;&amp; git pull \\\n&amp;&amp; git checkout -B &lt;branch name&gt;\n</code></pre> <pre><code>git checkout main `\n&amp;&amp; git pull `\n&amp;&amp; git checkout -B &lt;branch name&gt;\n</code></pre>"},{"location":"help/contributing/010_PULL_REQUEST/#commit-your-changes","title":"Commit your changes","text":"<p>When you are done with adding / updating content, you need to commit those changes to your repository before you can actually open an PR:</p> <pre><code>git add &lt;files you have changed&gt; # (1)!\ngit commit -m \"A commit message which describes your change\"\ngit push\n</code></pre> <ol> <li>Replace this with a space seperated list of the files you changed, like:    <code>README.md foo.sh bar.json baz</code></li> </ol>"},{"location":"help/contributing/010_PULL_REQUEST/#create-a-pull-request","title":"Create a Pull Request","text":"<p>After pushing your changes, you are ready to create a Pull Request. just head over to your fork on GitHub, which should already show you a message that there have been recent changes on your feature branch and a green button which you could use to create the PR.</p> <p>The default target for your PRs would be the main branch of invoke-ai/InvokeAI</p> <p>Another way would be to create it in VS-Code or via the GitHub CLI (or even via the GitHub CLI in a VS-Code Terminal Window \ud83e\udd2d):</p> <pre><code>gh pr create\n</code></pre> <p>The CLI will inform you if there are still unpushed commits on your branch. It will also prompt you for things like the the Title and the Body (Description) if you did not already pass them as arguments.</p>"},{"location":"help/contributing/020_ISSUES/","title":"Issues","text":""},{"location":"help/contributing/020_ISSUES/#report-a-bug","title":"Report a bug","text":"<p>If you stumbled over a bug while using InvokeAI, we would apreciate it a lot if you open a issue to inform us about the details so that our developers can look into it.</p> <p>If you also know how to fix the bug, take a look here to find out how to create a Pull Request.</p>"},{"location":"help/contributing/020_ISSUES/#request-a-feature","title":"Request a feature","text":"<p>If you have a idea for a new feature on your mind which you would like to see in InvokeAI, there is a feature request available in the issues section of the repository.</p> <p>If you are just curious which features already got requested you can find the overview of open requests here</p>"},{"location":"help/contributing/030_DOCS/","title":"MkDocs-Material","text":"<p>If you want to contribute to the docs, there is a easy way to verify the results of your changes before commiting them.</p> <p>Just follow the steps in the Pull-Requests docs, there we already create a venv and install the docs extras. When installed it's as simple as:</p> <pre><code>mkdocs serve\n</code></pre> <p>This will build the docs locally and serve them on your local host, even auto-refresh is included, so you can just update a doc, save it and tab to the browser, without the needs of restarting the <code>mkdocs serve</code>.</p> <p>More information about the \"mkdocs flavored markdown syntax\" can be found here.</p>"},{"location":"help/contributing/030_DOCS/#vs-code","title":"VS-Code","text":"<p>We also provide a launch configuration for VS-Code which includes a <code>mkdocs serve</code> entrypoint as well. You also don't have to worry about the formatting since this is automated via prettier, but this is of course not limited to VS-Code.</p>"},{"location":"help/contributing/090_NODE_TRANSFORMATION/","title":"Tranformation to nodes","text":""},{"location":"help/contributing/090_NODE_TRANSFORMATION/#current-state","title":"Current state","text":"<pre><code>flowchart TD\n    web[WebUI];\n    cli[CLI];\n    web --&gt; |img2img| generate(generate);\n    web --&gt; |txt2img| generate(generate);\n    cli --&gt; |txt2img| generate(generate);\n    cli --&gt; |img2img| generate(generate);\n    generate --&gt; model_manager;\n    generate --&gt; generators;\n    generate --&gt; ti_manager[TI Manager];\n    generate --&gt; etc;</code></pre>"},{"location":"help/contributing/090_NODE_TRANSFORMATION/#transitional-architecture","title":"Transitional Architecture","text":""},{"location":"help/contributing/090_NODE_TRANSFORMATION/#first-step","title":"first step","text":"<pre><code>flowchart TD\n    web[WebUI];\n    cli[CLI];\n    web --&gt; |img2img| img2img_node(Img2img node);\n    web --&gt; |txt2img| generate(generate);\n    img2img_node --&gt; model_manager;\n    img2img_node --&gt; generators;\n    cli --&gt; |txt2img| generate;\n    cli --&gt; |img2img| generate;\n    generate --&gt; model_manager;\n    generate --&gt; generators;\n    generate --&gt; ti_manager[TI Manager];\n    generate --&gt; etc;</code></pre>"},{"location":"help/contributing/090_NODE_TRANSFORMATION/#second-step","title":"second step","text":"<pre><code>flowchart TD\n    web[WebUI];\n    cli[CLI];\n    web --&gt; |img2img| img2img_node(img2img node);\n    img2img_node --&gt; model_manager;\n    img2img_node --&gt; generators;\n    web --&gt; |txt2img| txt2img_node(txt2img node);\n    cli --&gt; |txt2img| txt2img_node;\n    cli --&gt; |img2img| generate(generate);\n    generate --&gt; model_manager;\n    generate --&gt; generators;\n    generate --&gt; ti_manager[TI Manager];\n    generate --&gt; etc;\n    txt2img_node --&gt; model_manager;\n    txt2img_node --&gt; generators;\n    txt2img_node --&gt; ti_manager[TI Manager];</code></pre>"},{"location":"help/contributing/090_NODE_TRANSFORMATION/#final-architecture","title":"Final Architecture","text":"<pre><code>flowchart TD\n    web[WebUI];\n    cli[CLI];\n    web --&gt; |img2img|img2img_node(img2img node);\n    cli --&gt; |img2img|img2img_node;\n    web --&gt; |txt2img|txt2img_node(txt2img node);\n    cli --&gt; |txt2img|txt2img_node;\n    img2img_node --&gt; model_manager;\n    txt2img_node --&gt; model_manager;\n    img2img_node --&gt; generators;\n    txt2img_node --&gt; generators;\n    img2img_node --&gt; ti_manager[TI Manager];\n    txt2img_node --&gt; ti_manager[TI Manager];</code></pre>"},{"location":"help/deprecated/TROUBLESHOOT/","title":"F.A.Q.","text":""},{"location":"help/deprecated/TROUBLESHOOT/#frequently-asked-questions","title":"Frequently-Asked-Questions","text":"<p>Here are a few common installation problems and their solutions. Often these are caused by incomplete installations or crashes during the install process.</p>"},{"location":"help/deprecated/TROUBLESHOOT/#during-conda-env-create-conda-hangs-indefinitely","title":"During <code>conda env create</code>, conda hangs indefinitely","text":"<p>If it is because of the last PIP step (usually stuck in the Git Clone step, you can check the detailed log by this method):</p> <pre><code>export PIP_LOG=\"/tmp/pip_log.txt\"\ntouch ${PIP_LOG}\ntail -f ${PIP_LOG} &amp;\nconda env create -f environment-mac.yaml --debug --verbose\nkillall tail\nrm ${PIP_LOG}\n</code></pre> <p>SOLUTION</p> <p>Conda sometimes gets stuck at the last PIP step, in which several git repositories are cloned and built.</p> <p>Enter the stable-diffusion directory and completely remove the <code>src</code> directory and all its contents. The safest way to do this is to enter the stable-diffusion directory and give the command <code>git clean -f</code>. If this still doesn't fix the problem, try \"conda clean -all\" and then restart at the <code>conda env create</code> step.</p> <p>To further understand the problem to checking the install lot using this method:</p> <pre><code>export PIP_LOG=\"/tmp/pip_log.txt\"\ntouch ${PIP_LOG}\ntail -f ${PIP_LOG} &amp;\nconda env create -f environment-mac.yaml --debug --verbose\nkillall tail\nrm ${PIP_LOG}\n</code></pre>"},{"location":"help/deprecated/TROUBLESHOOT/#invokepy-crashes-with-the-complaint-that-it-cant-find-ldmsimplet2ipy","title":"<code>invoke.py</code> crashes with the complaint that it can't find <code>ldm.simplet2i.py</code>","text":"<p>Or it complains that function is being passed incorrect parameters.</p> <p>SOLUTION</p> <p>Reinstall the stable diffusion modules. Enter the <code>stable-diffusion</code> directory and give the command <code>pip install -e .</code></p>"},{"location":"help/deprecated/TROUBLESHOOT/#missing-modules","title":"Missing modules","text":"<p><code>invoke.py</code> dies, complaining of various missing modules, none of which starts with <code>ldm</code>.</p> <p>SOLUTION</p> <p>From within the <code>InvokeAI</code> directory, run <code>conda env update</code> This is also frequently the solution to complaints about an unknown function in a module.</p>"},{"location":"help/deprecated/TROUBLESHOOT/#how-can-i-try-new-features","title":"How can I try new features","text":"<p>There's a feature or bugfix in the Stable Diffusion GitHub that you want to try out.</p> <p>SOLUTIONS</p>"},{"location":"help/deprecated/TROUBLESHOOT/#main-branch","title":"Main Branch","text":"<p>If the fix/feature is on the <code>main</code> branch, enter the stable-diffusion directory and do a <code>git pull</code>.</p> <p>Usually this will be sufficient, but if you start to see errors about missing or incorrect modules, use the command <code>pip install -e .</code> and/or <code>conda env update</code> (These commands won't break anything.)</p> <p><code>pip install -e .</code> and/or <code>conda env update -f environment.yaml</code></p> <p>(These commands won't break anything.)</p>"},{"location":"help/deprecated/TROUBLESHOOT/#sub-branch","title":"Sub Branch","text":"<p>If the feature/fix is on a branch (e.g. \"foo-bugfix\"), the recipe is similar, but do a <code>git pull &lt;name of branch&gt;</code>.</p>"},{"location":"help/deprecated/TROUBLESHOOT/#not-committed","title":"Not Committed","text":"<p>If the feature/fix is in a pull request that has not yet been made part of the main branch or a feature/bugfix branch, then from the page for the desired pull request, look for the line at the top that reads \"xxxx wants to merge xx commits into lstein:main from YYYYYY\". Copy the URL in YYYY. It should have the format</p> <p><code>https://github.com/&lt;name of contributor&gt;/stable-diffusion/tree/&lt;name of branch&gt;</code></p> <p>Then go to the directory above stable-diffusion and rename the directory to \"stable-diffusion.lstein\", \"stable-diffusion.old\", or anything else. You can then git clone the branch that contains the pull request:</p> <p><code>git clone https://github.com/&lt;name of contributor&gt;/stable-diffusion/tree/&lt;name of branch&gt;</code></p> <p>You will need to go through the install procedure again, but it should be fast because all the dependencies are already loaded.</p>"},{"location":"help/deprecated/TROUBLESHOOT/#cuda-out-of-memory","title":"CUDA out of memory","text":"<p>Image generation crashed with CUDA out of memory error after successful sampling.</p> <p>SOLUTION</p> <p>Try to run script with option <code>--free_gpu_mem</code> This will free memory before image decoding step.</p>"},{"location":"installation/","title":"Overview","text":"<p>We offer several ways to install InvokeAI, each one suited to your experience and preferences. We suggest that everyone start by reviewing the hardware and software requirements, as they are the same across each install method. Then pick the install method most suitable to your level of experience and needs.</p> <p>See the troubleshooting section of the automated install guide for frequently-encountered installation issues.</p>"},{"location":"installation/#main-application","title":"Main Application","text":"<ol> <li> <p>Automated Installer</p> <p>This is a script that will install all of InvokeAI's essential third party libraries and InvokeAI itself. It includes access to a \"developer console\" which will help us debug problems with you and give you to access experimental features.</p> </li> <li> <p>Manual Installation</p> <p>In this method you will manually run the commands needed to install InvokeAI and its dependencies. We offer two recipes: one suited to those who prefer the <code>conda</code> tool, and one suited to those who prefer <code>pip</code> and Python virtual environments. In our hands the pip install is faster and more reliable, but your mileage may vary. Note that the conda installation method is currently deprecated and will not be supported at some point in the future.</p> <p>This method is recommended for users who have previously used <code>conda</code> or <code>pip</code> in the past, developers, and anyone who wishes to remain on the cutting edge of future InvokeAI development and is willing to put up with occasional glitches and breakage.</p> </li> <li> <p>Docker Installation</p> <p>We also offer a method for creating Docker containers containing InvokeAI and its dependencies. This method is recommended for individuals with experience with Docker containers and understand the pluses and minuses of a container-based install.</p> </li> </ol>"},{"location":"installation/#quick-guides","title":"Quick Guides","text":"<ul> <li>Installing CUDA and ROCm Drivers</li> <li>Installing XFormers</li> <li>Installing PyPatchMatch</li> <li>Installing New Models</li> </ul>"},{"location":"installation/010_INSTALL_AUTOMATED/","title":"InvokeAI Automated Installation","text":""},{"location":"installation/010_INSTALL_AUTOMATED/#introduction","title":"Introduction","text":"<p>The automated installer is a Python script that automates the steps needed to install and run InvokeAI on a stock computer running recent versions of Linux, MacOS or Windows. It will leave you with a version that runs a stable version of InvokeAI with the option to upgrade to experimental versions later.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#walk-through","title":"Walk through","text":"<ol> <li> <p>Hardware Requirements: Make sure that your system meets the hardware     requirements and has the     appropriate GPU drivers installed. For a system with an NVIDIA     card installed, you will need to install the CUDA driver, while     AMD-based cards require the ROCm driver. In most cases, if you've     already used the system for gaming or other graphics-intensive     tasks, the appropriate drivers will already be installed. If     unsure, check the GPU Driver Guide</p> <p>Required Space</p> <p>Installation requires roughly 18G of free disk space to load the libraries and recommended model weights files.</p> <p>Regardless of your destination disk, your system drive (<code>C:\\</code> on Windows, <code>/</code> on macOS/Linux) requires at least 6GB of free disk space to download and cache python dependencies.</p> <p>NOTE for Linux users: if your temporary directory is mounted     as a <code>tmpfs</code>, ensure it has sufficient space.</p> </li> <li> <p>Software Requirements: Check that your system has an up-to-date Python installed. To do     this, open up a command-line window (\"Terminal\" on Linux and     Macintosh, \"Command\" or \"Powershell\" on Windows) and type <code>python     --version</code>. If Python is installed, it will print out the version     number. If it is version <code>3.9.*</code> or <code>3.10.*</code>, you meet     requirements. We do not recommend using Python 3.11 or higher,     as not all the libraries that InvokeAI depends on work properly     with this version.</p> <p>What to do if you have an unsupported version</p> <p>Go to Python Downloads and download the appropriate installer package for your platform. We recommend Version 3.10.9, which has been extensively tested with InvokeAI.</p> <p>Please select your platform in the section below for platform-specific setup requirements.</p> WindowsLinuxMac <p>During the Python configuration process, look out for a checkbox to add Python to your PATH and select it. If the install script complains that it can't find python, then open the Python installer again and choose \"Modify\" existing installation.</p> <p>Installation requires an up to date version of the Microsoft Visual C libraries. Please install the 2015-2022 libraries available here: https://learn.microsoft.com/en-US/cpp/windows/latest-supported-vc-redist?view=msvc-170</p> <p>Please double-click on the file <code>WinLongPathsEnabled.reg</code> and accept the dialog box that asks you if you wish to modify your registry. This activates long filename support on your system and will prevent mysterious errors during installation.</p> <p>To install an appropriate version of Python on Ubuntu 22.04  and higher, run the following:</p> <pre><code>sudo apt update\nsudo apt install -y python3 python3-pip python3-venv\nsudo update-alternatives --install /usr/local/bin/python python /usr/bin/python3.10 3\n</code></pre> <p>On Ubuntu 20.04, the process is slightly different:</p> <pre><code>sudo apt update\nsudo apt install -y software-properties-common\nsudo add-apt-repository -y ppa:deadsnakes/ppa\nsudo apt install python3.10 python3-pip python3.10-venv\nsudo update-alternatives --install /usr/local/bin/python python /usr/bin/python3.10 3\n</code></pre> <p>Both <code>python</code> and <code>python3</code> commands are now pointing at  Python3.10. You can still access older versions of Python by  calling <code>python2</code>, <code>python3.8</code>, etc.</p> <p>Linux systems require a couple of additional graphics  libraries to be installed for proper functioning of  <code>python3-opencv</code>. Please run the following:</p> <p><code>sudo apt update &amp;&amp; sudo apt install -y libglib2.0-0 libgl1-mesa-glx</code></p> <p>After installing Python, you may need to run the following command from the Terminal in order to install the Web certificates needed to download model data from https sites. If you see lots of CERTIFICATE ERRORS during the last part of the install, this is the problem, and you can fix it with this command:</p> <pre><code>`/Applications/Python\\ 3.10/Install\\ Certificates.command`\n</code></pre> <p>You may need to install the Xcode command line tools. These are a set of tools that are needed to run certain applications in a Terminal, including InvokeAI. This package is provided directly by Apple. To install, open a terminal window and run <code>xcode-select --install</code>. You will get a macOS system popup guiding you through the install. If you already have them installed, you will instead see some output in the Terminal advising you that the tools are already installed. More information can be found at FreeCode Camp</p> </li> <li> <p>Download the Installer: The InvokeAI installer is distributed as a ZIP files. Go to the     latest release,     and look for a file named:</p> <ul> <li>InvokeAI-installer-v2.X.X.zip</li> </ul> <p>where \"2.X.X\" is the latest released version. The file is located at the very bottom of the release page, under Assets.</p> </li> <li> <p>Unpack the installer: Unpack the zip file into a convenient directory. This will create a new     directory named \"InvokeAI-Installer\". When unpacked, the directory     will look like this:</p> <p> </p> </li> <li> <p>Launch the installer script from the desktop: If you are using a desktop GUI, double-click the installer file     appropriate for your platform. It will be named <code>install.bat</code> on     Windows systems and <code>install.sh</code> on Linux and Macintosh     systems. Be aware that your system's file browser may suppress the     display of the file extension.</p> <p>On Windows systems if you get an \"Untrusted Publisher\" warning. Click on \"More Info\" and then select \"Run Anyway.\" You trust us, right?</p> </li> <li> <p>[Alternative] Launch the installer script from the command line: Alternatively, from the command line, run the shell script or .bat file:</p> <pre><code>C:\\Documents\\Linco&gt; cd InvokeAI-Installer\nC:\\Documents\\Linco\\invokeAI&gt; .\\install.bat\n</code></pre> </li> <li> <p>Select the location to install InvokeAI: The script will ask you to choose where to install InvokeAI. Select a     directory with at least 18G of free space for a full install. InvokeAI and     all its support files will be installed into a new directory named     <code>invokeai</code> located at the location you specify.</p> <p> </p> <ul> <li>The default is to install the <code>invokeai</code> directory in your home directory,   usually <code>C:\\Users\\YourName\\invokeai</code> on Windows systems,   <code>/home/YourName/invokeai</code> on Linux systems, and <code>/Users/YourName/invokeai</code>   on Macintoshes, where \"YourName\" is your login name.</li> </ul> <p>-If you have previously installed InvokeAI, you will be asked to  confirm whether you want to reinstall into this directory.  You  may choose to reinstall, in which case your version will be upgraded,  or choose a different directory.</p> <ul> <li>The script uses tab autocompletion to suggest directory path completions.   Type part of the path (e.g. \"C:\\Users\") and press Tab repeatedly   to suggest completions.</li> </ul> </li> <li> <p>Select your GPU: The installer will autodetect your platform and will request you to     confirm the type of GPU your graphics card has. On Linux systems,     you will have the choice of CUDA (NVidia cards), ROCm (AMD cards),     or CPU (no graphics acceleration). On Windows, you'll have the     choice of CUDA vs CPU, and on Macs you'll be offered CPU only. When     you select CPU on M1 or M2 Macintoshes, you will get MPS-based     graphics acceleration without installing additional drivers. If you     are unsure what GPU you are using, you can ask the installer to     guess.</p> </li> <li> <p>Watch it go!: Sit back and let the install script work. It will install the third-party     libraries needed by InvokeAI and the application itself.</p> <p>Be aware that some of the library download and install steps take a long time. In particular, the <code>pytorch</code> package is quite large and often appears to get \"stuck\" at 99.9%. Have patience and the installation step will eventually resume. However, there are occasions when the library install does legitimately get stuck. If you have been waiting for more than ten minutes and nothing is happening, you can interrupt the script with ^C. You may restart it and it will pick up where it left off.</p> <p> </p> </li> <li> <p>Post-install Configuration: After installation completes, the     installer will launch the configuration form, which will guide you     through the first-time process of adjusting some of InvokeAI's     startup settings. To move around this form use ctrl-N for     &lt;N&gt;ext and ctrl-P for &lt;P&gt;revious, or use &lt;tab&gt;     and shift-&lt;tab&gt; to move forward and back. Once you are in a     multi-checkbox field use the up and down cursor keys to select the     item you want, and &lt;space&gt; to toggle it on and off.  Within     a directory field, pressing &lt;tab&gt; will provide autocomplete     options.</p> <p>Generally the defaults are fine, and you can come back to this screen at any time to tweak your system. Here are the options you can adjust:</p> <ul> <li> <p>Output directory for images   This is the path to a directory in which InvokeAI will store all its   generated images.</p> </li> <li> <p>NSFW checker   If checked, InvokeAI will test images for potential sexual content   and blur them out if found. Note that the NSFW checker consumes   an additional 0.6 GB of VRAM on top of the 2-3 GB of VRAM used   by most image models. If you have a low VRAM GPU (4-6 GB), you   can reduce out of memory errors by disabling the checker.</p> </li> <li> <p>HuggingFace Access Token   InvokeAI has the ability to download embedded styles and subjects   from the HuggingFace Concept Library on-demand. However, some of   the concept library files are password protected. To make download   smoother, you can set up an account at huggingface.co, obtain an   access token, and paste it into this field. Note that you paste   to this screen using ctrl-shift-V</p> </li> <li> <p>Free GPU memory after each generation     This is useful for low-memory machines and helps minimize the amount of GPU VRAM used by InvokeAI.</p> </li> <li> <p>Enable xformers support if available     If the xformers library was successfully installed, this will activate it to reduce memory consumption and increase rendering speed noticeably. Note that xformers has the side effect of generating slightly different images even when presented with the same seed and other settings.</p> </li> <li> <p>Force CPU to be used on GPU systems     This will use the (slow) CPU rather than the accelerated GPU. This can be used to generate images on systems that don't have a compatible GPU.</p> </li> <li> <p>Precision     This controls whether to use float32 or float16 arithmetic. float16 uses less memory but is also slightly less accurate. Ordinarily the right arithmetic is picked automatically (\"auto\"), but you may have to use float32 to get images on certain systems and graphics cards. The \"autocast\" option is deprecated and shouldn't be used unless you are asked to by a member of the team.</p> </li> <li> <p>Number of models to cache in CPU memory     This allows you to keep models in memory and switch rapidly among them rather than having them load from disk each time. This slider controls how many models to keep loaded at once. Each model will use 2-4 GB of RAM, so use this cautiously</p> </li> <li> <p>Directory containing embedding/textual inversion files     This is the directory in which you can place custom embedding files (.pt or .bin). During startup, this directory will be scanned and InvokeAI will print out the text terms that are available to trigger the embeddings.</p> </li> </ul> <p>At the bottom of the screen you will see a checkbox for accepting the CreativeML Responsible AI License. You need to accept the license in order to download Stable Diffusion models from the next screen.</p> <p>You can come back to the startup options form as many times as you like. From the <code>invoke.sh</code> or <code>invoke.bat</code> launcher, select option (6) to relaunch this script. On the command line, it is named <code>invokeai-configure</code>.</p> </li> <li> <p>Downloading Models: After you press <code>[NEXT]</code> on the screen, you will be taken     to another screen that prompts you to download a series of starter models. The ones     we recommend are preselected for you, but you are encouraged to use the checkboxes to     pick and choose.     You will probably wish to download <code>autoencoder-840000</code> for use with models that     were trained with an older version of the Stability VAE.</p> <p> </p> <p>Below the preselected list of starter models is a large text field which you can use to specify a series of models to import. You can specify models in a variety of formats, each separated by a space or newline. The formats accepted are:</p> <ul> <li> <p>The path to a .ckpt or .safetensors file. On most systems, you can drag a file from   the file browser to the textfield to automatically paste the path. Be sure to remove   extraneous quotation marks and other things that come along for the ride.</p> </li> <li> <p>The path to a directory containing a combination of <code>.ckpt</code> and <code>.safetensors</code> files.   The directory will be scanned from top to bottom (including subfolders) and any   file that can be imported will be.</p> </li> <li> <p>A URL pointing to a <code>.ckpt</code> or <code>.safetensors</code> file. You can cut   and paste directly from a web page, or simply drag the link from the web page   or navigation bar. (You can also use ctrl-shift-V to paste into this field)   The file will be downloaded and installed.</p> </li> <li> <p>The HuggingFace repository ID (repo_id) for a <code>diffusers</code> model. These IDs have    the format author_name/model_name, as in <code>andite/anything-v4.0</code></p> </li> <li> <p>The path to a local directory containing a <code>diffusers</code>   model. These directories always have the file <code>model_index.json</code>   at their top level.</p> </li> </ul> <p>Select a directory for models to import You may select a local directory for autoimporting at startup time. If you select this option, the directory you choose will be scanned for new .ckpt/.safetensors files each time InvokeAI starts up, and any new files will be automatically imported and made available for your use.</p> <p>Convert imported models into diffusers When legacy checkpoint files are imported, you may select to use them unmodified (the default) or to convert them into <code>diffusers</code> models. The latter load much faster and have slightly better rendering performance, but not all checkpoint files can be converted. Note that Stable Diffusion Version 2.X files are only supported in <code>diffusers</code> format and will be converted regardless.</p> <p>You can come back to the model install form as many times as you like.  From the <code>invoke.sh</code> or <code>invoke.bat</code> launcher, select option (5) to relaunch  this script. On the command line, it is named <code>invokeai-model-install</code>.</p> </li> <li> <p>Running InvokeAI for the first time: The script will now exit and you'll be ready to generate some images. Look     for the directory <code>invokeai</code> installed in the location you chose at the     beginning of the install session. Look for a shell script named <code>invoke.sh</code>     (Linux/Mac) or <code>invoke.bat</code> (Windows). Launch the script by double-clicking     it or typing its name at the command-line:</p> <pre><code>C:\\Documents\\Linco&gt; cd invokeai\nC:\\Documents\\Linco\\invokeAI&gt; invoke.bat\n</code></pre> <ul> <li> <p>The <code>invoke.bat</code> (<code>invoke.sh</code>) script will give you the choice   of starting (1) the command-line interface, (2) the web GUI, (3)   textual inversion training, and (4) model merging.</p> </li> <li> <p>By default, the script will launch the web interface. When you   do this, you'll see a series of startup messages ending with   instructions to point your browser at   http://localhost:9090. Click on this link to open up a browser   and start exploring InvokeAI's features.</p> </li> </ul> </li> <li> <p>InvokeAI Options: You can launch InvokeAI with several different command-line arguments that     customize its behavior. For example, you can change the location of the     image output directory, or select your favorite sampler. See the     Command-Line Interface for a full list of the options.</p> <ul> <li> <p>To set defaults that will take effect every time you launch InvokeAI,   use a text editor (e.g. Notepad) to exit the file   <code>invokeai\\invokeai.init</code>. It contains a variety of examples that you can   follow to add and modify launch options.</p> </li> <li> <p>The launcher script also offers you an option labeled \"open the developer   console\". If you choose this option, you will be dropped into a   command-line interface in which you can run python commands directly,   access developer tools, and launch InvokeAI with customized options.</p> </li> </ul> <p>Do not move or remove the <code>invokeai</code> directory</p> <p>The <code>invokeai</code> directory contains the <code>invokeai</code> application, its configuration files, the model weight files, and outputs of image generation. Once InvokeAI is installed, do not move or remove this directory.\"</p> </li> </ol>"},{"location":"installation/010_INSTALL_AUTOMATED/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/010_INSTALL_AUTOMATED/#package-dependency-conflicts","title":"Package dependency conflicts","text":"<p>If you have previously installed InvokeAI or another Stable Diffusion package, the installer may occasionally pick up outdated libraries and either the installer or <code>invoke</code> will fail with complaints about library conflicts. In this case, run the <code>invoke.sh</code>/<code>invoke.bat</code> command and enter the Developer's Console by picking option (5). This will take you to a command-line prompt.</p> <p>Then give this command:</p> <p><code>pip install InvokeAI --force-reinstall</code></p> <p>This should fix the issues.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#invokeai-runs-extremely-slowly-on-linux-or-windows-systems","title":"InvokeAI runs extremely slowly on Linux or Windows systems","text":"<p>The most frequent cause of this problem is when the installation process installed the CPU-only version of the torch machine-learning library, rather than a version that takes advantage of GPU acceleration. To confirm this issue, look at the InvokeAI startup messages. If you see a message saying \"&gt;&gt; Using device CPU\", then this is what happened.</p> <p>To fix this problem, first determine whether you have an NVidia or an AMD GPU. The former uses the CUDA driver, and the latter uses ROCm (only available on Linux). Then run the <code>invoke.sh</code>/<code>invoke.bat</code> command and enter the Developer's Console by picking option (5). This will take you to a command-line prompt.</p> <p>Then type the following commands:</p> NVIDIA SystemAMD System <pre><code>pip install torch torchvision --force-reinstall --extra-index-url https://download.pytorch.org/whl/cu117\npip install xformers\n</code></pre> <pre><code>pip install torch torchvision --force-reinstall --extra-index-url https://download.pytorch.org/whl/rocm5.4.2\n</code></pre>"},{"location":"installation/010_INSTALL_AUTOMATED/#corrupted-configuration-file","title":"Corrupted configuration file","text":"<p>Everything seems to install ok, but <code>invokeai</code> complains of a corrupted configuration file and goes back into the configuration process (asking you to download models, etc), but this doesn't fix the problem.</p> <p>This issue is often caused by a misconfigured configuration directive in the <code>invokeai\\invokeai.init</code> initialization file that contains startup settings. The easiest way to fix the problem is to move the file out of the way and re-run <code>invokeai-configure</code>. Enter the developer's console (option 3 of the launcher script) and run this command:</p> <pre><code>invokeai-configure --root=.\n</code></pre> <p>Note the dot (.) after <code>--root</code>. It is part of the command.</p> <p>If none of these maneuvers fixes the problem then please report the problem to the InvokeAI Issues section, or visit our Discord Server for interactive assistance.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#out-of-memory-issues","title":"Out of Memory Issues","text":"<p>The models are large, VRAM is expensive, and you may find yourself faced with Out of Memory errors when generating images. Here are some tips to reduce the problem:</p> <ul> <li>4 GB of VRAM</li> </ul> <p>This should be adequate for 512x512 pixel images using Stable Diffusion 1.5 and derived models, provided that you disable the NSFW checker. To disable the filter, do one of the following:</p> <ul> <li>Select option (6) \"change InvokeAI startup options\" from the      launcher. This will bring up the console-based startup settings      dialogue and allow you to unselect the \"NSFW Checker\" option.</li> <li>Start the startup settings dialogue directly by running      <code>invokeai-configure --skip-sd-weights --skip-support-models</code>      from the command line.</li> <li>Find the <code>invokeai.init</code> initialization file in the InvokeAI root      directory, open it in a text editor, and change <code>--nsfw_checker</code>      to <code>--no-nsfw_checker</code></li> </ul> <p>If you are on a CUDA system, you can realize significant memory savings by activating the <code>xformers</code> library as described above. The downside is <code>xformers</code> introduces non-deterministic behavior, such that images generated with exactly the same prompt and settings will be slightly different from each other. See above for more information.</p> <ul> <li>6 GB of VRAM</li> </ul> <p>This is a border case. Using the SD 1.5 series you should be able to generate images up to 640x640 with the NSFW checker enabled, and up to 1024x1024 with it disabled and <code>xformers</code> activated. </p> <p>If you run into persistent memory issues there are a series of environment variables that you can set before launching InvokeAI that alter how the PyTorch machine learning library manages memory.  See https://pytorch.org/docs/stable/notes/cuda.html#memory-management for a list of these tweaks.</p> <ul> <li>12 GB of VRAM</li> </ul> <p>This should be sufficient to generate larger images up to about 1280x1280. If you wish to push further, consider activating <code>xformers</code>.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#other-problems","title":"Other Problems","text":"<p>If you run into problems during or after installation, the InvokeAI team is available to help you. Either create an Issue at our GitHub site, or make a request for help on the \"bugs-and-support\" channel of our Discord server. We are a 100% volunteer organization, but typically somebody will be available to help you within 24 hours, and often much sooner.</p>"},{"location":"installation/010_INSTALL_AUTOMATED/#updating-to-newer-versions","title":"Updating to newer versions","text":"<p>This distribution is changing rapidly, and we add new features regularly. Releases are announced at http://github.com/invoke-ai/InvokeAI/releases, and at https://pypi.org/project/InvokeAI/ To update to the latest released version (recommended), follow these steps:</p> <ol> <li> <p>Start the <code>invoke.sh</code>/<code>invoke.bat</code> launch script from within the    <code>invokeai</code> root directory.</p> </li> <li> <p>Choose menu item (10) \"Update InvokeAI\".</p> </li> <li> <p>This will launch a menu that gives you the option of:</p> </li> <li> <p>Updating to the latest official release;</p> </li> <li>Updating to the bleeding-edge development version; or</li> <li>Manually entering the tag or branch name of a version of       InvokeAI you wish to try out.</li> </ol>"},{"location":"installation/020_INSTALL_MANUAL/","title":"Installing Manually","text":"<p>This is for advanced Users</p> <p>python experience is mandatory</p>"},{"location":"installation/020_INSTALL_MANUAL/#linux-macos-windows","title":"Linux |  macOS |  Windows","text":""},{"location":"installation/020_INSTALL_MANUAL/#introduction","title":"Introduction","text":"<p>Conda</p> <p>As of InvokeAI v2.3.0 installation using the <code>conda</code> package manager is no longer being supported. It will likely still work, but we are not testing this installation method.</p> <p>On Windows systems, you are encouraged to install and use the PowerShell, which provides compatibility with Linux and Mac shells and nice features such as command-line completion.</p>"},{"location":"installation/020_INSTALL_MANUAL/#prerequisites","title":"Prerequisites","text":"<p>Before you start, make sure you have the following preqrequisites installed.  These are described in more detail in Automated Installation, and in many cases will already be installed (if, for example, you have used your system for gaming):</p> <ul> <li> <p>Python</p> <p>version 3.9 or 3.10 (3.11 is not recommended).</p> </li> <li> <p>CUDA Tools</p> <p>For those with NVidia GPUs, you will need to install the CUDA toolkit and optionally the XFormers library.</p> </li> <li> <p>ROCm Tools</p> <p>For Linux users with AMD GPUs, you will need to install the ROCm toolkit. Note that InvokeAI does not support AMD GPUs on Windows systems due to lack of a Windows ROCm library.</p> </li> <li> <p>Visual C++ Libraries</p> <p>Windows users must install the free Visual C++ libraries from Microsoft</p> </li> <li> <p>The Xcode command line tools</p> <p>for Macintosh users. Instructions are available at Free Code Camp</p> <ul> <li>Macintosh users may also need to run the <code>Install Certificates</code> command   if model downloads give lots of certificate errors. Run:   <code>/Applications/Python\\ 3.10/Install\\ Certificates.command</code></li> </ul> </li> </ul>"},{"location":"installation/020_INSTALL_MANUAL/#installation-walkthrough","title":"Installation Walkthrough","text":"<p>To install InvokeAI with virtual environments and the PIP package manager, please follow these steps:</p> <ol> <li> <p>Please make sure you are using Python 3.9 or 3.10. The rest of the install     procedure depends on this and will not work with other versions:</p> <pre><code>python -V\n</code></pre> </li> <li> <p>Create a directory to contain your InvokeAI library, configuration     files, and models. This is known as the \"runtime\" or \"root\"     directory, and often lives in your home directory under the name <code>invokeai</code>.</p> <p>Please keep in mind the disk space requirements - you will need at least 20GB for the models and the virtual environment.  From now on we will refer to this directory as <code>INVOKEAI_ROOT</code>. For convenience, the steps below create a shell variable of that name which contains the path to <code>HOME/invokeai</code>.</p> Linux/MacWindows (Powershell) <pre><code>export INVOKEAI_ROOT=~/invokeai\nmkdir $INVOKEAI_ROOT\n</code></pre> <pre><code>Set-Variable -Name INVOKEAI_ROOT -Value $Home/invokeai\nmkdir $INVOKEAI_ROOT\n</code></pre> </li> <li> <p>Enter the root (invokeai) directory and create a virtual Python    environment within it named <code>.venv</code>. If the command <code>python</code>    doesn't work, try <code>python3</code>. Note that while you may create the    virtual environment anywhere in the file system, we recommend that    you create it within the root directory as shown here. This makes    it possible for the InvokeAI applications to find the model data    and configuration. If you do not choose to install the virtual    environment inside the root directory, then you must set the    <code>INVOKEAI_ROOT</code> environment variable in your shell environment, for    example, by editing <code>~/.bashrc</code> or <code>~/.zshrc</code> files, or setting the    Windows environment variable using the Advanced System Settings dialogue.    Refer to your operating system documentation for details.</p> <pre><code>cd $INVOKEAI_ROOT\npython -m venv .venv --prompt InvokeAI\n</code></pre> </li> <li> <p>Activate the new environment:</p> Linux/MacWindows <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>.venv\\Scripts\\activate\n</code></pre> <p>If you get a permissions error at this point, run this command and try again</p> <p><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</code></p> <p>The command-line prompt should change to to show <code>(InvokeAI)</code> at the beginning of the prompt. Note that all the following steps should be run while inside the INVOKEAI_ROOT directory</p> </li> <li> <p>Make sure that pip is installed in your virtual environment and up to date:</p> <pre><code>python -m pip install --upgrade pip\n</code></pre> </li> <li> <p>Install the InvokeAI Package. The <code>--extra-index-url</code> option is used to select among    CUDA, ROCm and CPU/MPS drivers as shown below:</p> CUDA (NVidia)ROCm (AMD)CPU (Intel Macs &amp; non-GPU systems)MPS (M1 and M2 Macs) <pre><code>pip install InvokeAI[xformers] --use-pep517 --extra-index-url https://download.pytorch.org/whl/cu117\n</code></pre> <pre><code>pip install InvokeAI --use-pep517 --extra-index-url https://download.pytorch.org/whl/rocm5.2\n</code></pre> <pre><code>pip install InvokeAI --use-pep517 --extra-index-url https://download.pytorch.org/whl/cpu\n</code></pre> <pre><code>pip install InvokeAI --use-pep517\n</code></pre> </li> <li> <p>Deactivate and reactivate your runtime directory so that the invokeai-specific commands     become available in the environment</p> Linux/MacintoshWindows <pre><code>deactivate &amp;&amp; source .venv/bin/activate\n</code></pre> <pre><code>deactivate\n.venv\\Scripts\\activate\n</code></pre> </li> <li> <p>Set up the runtime directory</p> <p>In this step you will initialize your runtime directory with the downloaded models, model config files, directory for textual inversion embeddings, and your outputs.</p> <pre><code>invokeai-configure\n</code></pre> <p>The script <code>invokeai-configure</code> will interactively guide you through the process of downloading and installing the weights files needed for InvokeAI. Note that the main Stable Diffusion weights file is protected by a license agreement that you have to agree to. The script will list the steps you need to take to create an account on the site that hosts the weights files, accept the agreement, and provide an access token that allows InvokeAI to legally download and install the weights files.</p> <p>If you get an error message about a module not being installed, check that the <code>invokeai</code> environment is active and if not, repeat step 5.</p> <p>Tip</p> <p>If you have already downloaded the weights file(s) for another Stable Diffusion distribution, you may skip this step (by selecting \"skip\" when prompted) and configure InvokeAI to use the previously-downloaded files. The process for this is described in Installing Models.</p> </li> <li> <p>Run the command-line- or the web- interface:</p> <p>From within INVOKEAI_ROOT, activate the environment (with <code>source .venv/bin/activate</code> or <code>.venv\\scripts\\activate), and then run the script</code>invokeai<code>. If the virtual environment you selected is NOT inside INVOKEAI_ROOT, then you must specify the path to the root directory by adding</code>--root_dir \\path\\to\\invokeai` to the commands below:</p> <p>Make sure that the virtual environment is activated, which should create <code>(.venv)</code> in front of your prompt!</p> CLIlocal WebserverPublic Webserver <pre><code>invokeai\n</code></pre> <pre><code>invokeai --web\n</code></pre> <pre><code>invokeai --web --host 0.0.0.0\n</code></pre> <p>If you choose the run the web interface, point your browser at http://localhost:9090 in order to load the GUI.</p> <p>Tip</p> <p>You can permanently set the location of the runtime directory by setting the environment variable <code>INVOKEAI_ROOT</code> to the path of the directory. As mentioned previously, this is highly recommended* if your virtual environment is located outside of your runtime directory.</p> </li> <li> <p>Render away!</p> <p>Browse the features section to learn about all the things you can do with InvokeAI.</p> </li> <li> <p>Subsequently, to relaunch the script, activate the virtual environment, and     then launch <code>invokeai</code> command. If you forget to activate the virtual     environment you will most likeley receive a <code>command not found</code> error.</p> <p>Warning</p> <p>Do not move the runtime directory after installation. The virtual environment will get confused if the directory is moved.</p> </li> <li> <p>Other scripts</p> <p>The Textual Inversion script can be launched with the command:</p> <pre><code>invokeai-ti --gui\n</code></pre> <p>Similarly, the Model Merging script can be launched with the command:</p> <pre><code>invokeai-merge --gui\n</code></pre> <p>Leave off the <code>--gui</code> option to run the script using command-line arguments. Pass the <code>--help</code> argument to get usage instructions.</p> </li> </ol>"},{"location":"installation/020_INSTALL_MANUAL/#developer-install","title":"Developer Install","text":"<p>If you have an interest in how InvokeAI works, or you would like to add features or bugfixes, you are encouraged to install the source code for InvokeAI. For this to work, you will need to install the <code>git</code> source code management program. If it is not already installed on your system, please see the Git Installation Guide</p> <ol> <li> <p>From the command line, run this command:    <pre><code>git clone https://github.com/invoke-ai/InvokeAI.git\n</code></pre></p> <p>This will create a directory named <code>InvokeAI</code> and populate it with the full source code from the InvokeAI repository.</p> </li> <li> <p>Activate the InvokeAI virtual environment as per step (4) of the manual installation protocol (important!)</p> </li> <li> <p>Enter the InvokeAI repository directory and run one of these    commands, based on your GPU:</p> CUDA (NVidia)ROCm (AMD)CPU (Intel Macs &amp; non-GPU systems)MPS (M1 and M2 Macs) <pre><code>pip install -e .[xformers] --use-pep517 --extra-index-url https://download.pytorch.org/whl/cu117\n</code></pre> <pre><code>pip install -e . --use-pep517 --extra-index-url https://download.pytorch.org/whl/rocm5.2\n</code></pre> <pre><code>pip install -e . --use-pep517 --extra-index-url https://download.pytorch.org/whl/cpu\n</code></pre> <pre><code>pip install -e . --use-pep517\n</code></pre> <p>Be sure to pass <code>-e</code> (for an editable install) and don't forget the dot (\".\"). It is part of the command.</p> <p>You can now run <code>invokeai</code> and its related commands. The code will be read from the repository, so that you can edit the .py source files and watch the code's behavior change.</p> </li> <li> <p>If you wish to contribute to the InvokeAI project, you are     encouraged to establish a GitHub account and \"fork\"     https://github.com/invoke-ai/InvokeAI into your own copy of the     repository. You can then use GitHub functions to create and submit     pull requests to contribute improvements to the project.</p> <p>Please see Contributing for hints on getting started.</p> </li> </ol>"},{"location":"installation/020_INSTALL_MANUAL/#unsupported-conda-install","title":"Unsupported Conda Install","text":"<p>Congratulations, you found the \"secret\" Conda installation instructions. If you really really want to use Conda with InvokeAI you can do so using this unsupported recipe:</p> <pre><code>mkdir ~/invokeai\nconda create -n invokeai python=3.10\nconda activate invokeai\npip install InvokeAI[xformers] --use-pep517 --extra-index-url https://download.pytorch.org/whl/cu117\ninvokeai-configure --root ~/invokeai\ninvokeai --root ~/invokeai --web\n</code></pre> <p>The <code>pip install</code> command shown in this recipe is for Linux/Windows systems with an NVIDIA GPU. See step (6) above for the command to use with other platforms/GPU combinations. If you don't wish to pass the <code>--root</code> argument to <code>invokeai</code> with each launch, you may set the environment variable INVOKEAI_ROOT to point to the installation directory.</p> <p>Note that if you run into problems with the Conda installation, the InvokeAI staff will not be able to help you out. Caveat Emptor!</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/","title":"NVIDIA Cuda / AMD ROCm","text":"<p>In order for InvokeAI to run at full speed, you will need a graphics card with a supported GPU. InvokeAI supports NVidia cards via the CUDA driver on Windows and Linux, and AMD cards via the ROCm driver on Linux.</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#cuda-rocm","title":"CUDA |  ROCm","text":""},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#cuda","title":"CUDA","text":""},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#linux-and-windows-install","title":"Linux and Windows Install","text":"<p>If you have used your system for other graphics-intensive tasks, such as gaming, you may very well already have the CUDA drivers installed. To confirm, open up a command-line window and type:</p> <pre><code>nvidia-smi\n</code></pre> <p>If this command produces a status report on the GPU(s) installed on your system, CUDA is installed and you have no more work to do. If instead you get \"command not found\", or similar, then the driver will need to be installed.</p> <p>We strongly recommend that you install the CUDA Toolkit package directly from NVIDIA. Do not try to install Ubuntu's nvidia-cuda-toolkit package. It is out of date and will cause conflicts among the NVIDIA driver and binaries.</p> <p>Go to CUDA Toolkit 11.7 Downloads, and use the target selection wizard to choose your operating system, hardware platform, and preferred installation method (e.g. \"local\" versus \"network\").</p> <p>This will provide you with a downloadable install file or, depending on your choices, a recipe for downloading and running a install shell script. Be sure to read and follow the full installation instructions.</p> <p>After an install that seems successful, you can confirm by again running <code>nvidia-smi</code> from the command line.</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#linux-install-with-a-runtime-container","title":"Linux Install with a Runtime Container","text":"<p>On Linux systems, an alternative to installing CUDA Toolkit directly on your system is to run an NVIDIA software container that has the CUDA libraries already in place. This is recommended if you are already  familiar with containerization technologies such as Docker.</p> <p>For downloads and instructions, visit the NVIDIA CUDA Container Runtime Site</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#torch-installation","title":"Torch Installation","text":"<p>When installing torch and torchvision manually with <code>pip</code>, remember to provide the argument <code>--extra-index-url https://download.pytorch.org/whl/cu117</code> as described in the Manual Installation Guide.</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#rocm","title":"ROCm","text":""},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#linux-install","title":"Linux Install","text":"<p>AMD GPUs are only supported on Linux platforms due to the lack of a Windows ROCm driver at the current time. Also be aware that support for newer AMD GPUs is spotty. Your mileage may vary.</p> <p>It is possible that the ROCm driver is already installed on your machine. To test, open up a terminal window and issue the following command:</p> <pre><code>rocminfo\n</code></pre> <p>If you get a table labeled \"ROCm System Management Interface\" the driver is installed and you are done. If you get \"command not found,\" then the driver needs to be installed.</p> <p>Go to AMD's ROCm Downloads Guide and scroll to the Installation Methods section. Find the subsection for the install method for your preferred Linux distribution, and issue the commands given in the recipe.</p> <p>Annoyingly, the official AMD site does not have a recipe for the most recent version of Ubuntu, 22.04. However, this community-contributed recipe is reported to work well.</p> <p>After installation, please run <code>rocminfo</code> a second time to confirm that the driver is present and the GPU is recognized. You may need to do a reboot in order to load the driver. In addition, if you see errors relating to your username not being a member of the <code>render</code> group, you may fix this by adding yourself to this group with the command:</p> <pre><code>sudo usermod -a -G render myUserName\n</code></pre> <p>(Thanks to @EgoringKosmos for the usermod recipe.)</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#linux-install-with-a-rocm-docker-container","title":"Linux Install with a ROCm-docker Container","text":"<p>If you are comfortable with the Docker containerization system, then you can build a ROCm docker file. The source code and installation recipes are available Here</p>"},{"location":"installation/030_INSTALL_CUDA_AND_ROCM/#torch-installation_1","title":"Torch Installation","text":"<p>When installing torch and torchvision manually with <code>pip</code>, remember to provide the argument <code>--extra-index-url https://download.pytorch.org/whl/rocm5.4.2</code> as described in the Manual Installation Guide.</p> <p>This will be done automatically for you if you use the installer script.</p> <p>Be aware that the torch machine learning library does not seamlessly interoperate with all AMD GPUs and you may experience garbled images, black images, or long startup delays before rendering commences. Most of these issues can be solved by Googling for workarounds. If you have a problem and find a solution, please post an Issue so that other users benefit and we can update this document.</p>"},{"location":"installation/040_INSTALL_DOCKER/","title":"Docker","text":"<p>For end users</p> <p>We highly recommend to Install InvokeAI locally using these instructions</p> <p>For developers</p> <p>For container-related development tasks or for enabling easy deployment to other environments (on-premises or cloud), follow these instructions.</p> <p>For general use, install locally to leverage your machine's GPU.</p>"},{"location":"installation/040_INSTALL_DOCKER/#why-containers","title":"Why containers?","text":"<p>They provide a flexible, reliable way to build and deploy InvokeAI. You'll also use a Docker volume to store the largest model files and image outputs as a first step in decoupling storage and compute. Future enhancements can do this for other assets. See Processes under the Twelve-Factor App methodology for details on why running applications in such a stateless fashion is important.</p> <p>You can specify the target platform when building the image and running the container. You'll also need to specify the InvokeAI requirements file that matches the container's OS and the architecture it will run on.</p> <p>Developers on Apple silicon (M1/M2): You can't access your GPU cores from Docker containers and performance is reduced compared with running it directly on macOS but for development purposes it's fine. Once you're done with development tasks on your laptop you can build for the target platform and architecture and deploy to another environment with NVIDIA GPUs on-premises or in the cloud.</p>"},{"location":"installation/040_INSTALL_DOCKER/#installation-in-a-linux-container-desktop","title":"Installation in a Linux container (desktop)","text":""},{"location":"installation/040_INSTALL_DOCKER/#prerequisites","title":"Prerequisites","text":""},{"location":"installation/040_INSTALL_DOCKER/#install-docker","title":"Install Docker","text":"<p>On the Docker Desktop app, go to Preferences, Resources, Advanced. Increase the CPUs and Memory to avoid this Issue. You may need to increase Swap and Disk image size too.</p>"},{"location":"installation/040_INSTALL_DOCKER/#get-a-huggingface-token","title":"Get a Huggingface-Token","text":"<p>Besides the Docker Agent you will need an Account on huggingface.co.</p> <p>After you succesfully registered your account, go to huggingface.co/settings/tokens, create a token and copy it, since you will need in for the next step.</p>"},{"location":"installation/040_INSTALL_DOCKER/#setup","title":"Setup","text":"<p>Set the fork you want to use and other variables.</p> <p>Tip</p> <p>I preffer to save my env vars in the repository root in a <code>.env</code> (or <code>.envrc</code>) file to automatically re-apply them when I come back.</p> <p>The build- and run- scripts contain default values for almost everything, besides the Hugging Face Token you created in the last step.</p> <p>Some Suggestions of variables you may want to change besides the Token:</p> Environment-Variable  Default value  Description <code>HUGGING_FACE_HUB_TOKEN</code> No default, but required! This is the only required variable, without it you can't download the huggingface models <code>REPOSITORY_NAME</code> The Basename of the Repo folder This name will used as the container repository/image name <code>VOLUMENAME</code> <code>${REPOSITORY_NAME,,}_data</code> Name of the Docker Volume where model files will be stored <code>ARCH</code> arch of the build machine Can be changed if you want to build the image for another arch <code>CONTAINER_REGISTRY</code> ghcr.io Name of the Container Registry to use for the full tag <code>CONTAINER_REPOSITORY</code> <code>$(whoami)/${REPOSITORY_NAME}</code> Name of the Container Repository <code>CONTAINER_FLAVOR</code> <code>cuda</code> The flavor of the image to built, available options are <code>cuda</code>, <code>rocm</code> and <code>cpu</code>. If you choose <code>rocm</code> or <code>cpu</code>, the extra-index-url will be selected automatically, unless you set one yourself. <code>CONTAINER_TAG</code> <code>${INVOKEAI_BRANCH##*/}-${CONTAINER_FLAVOR}</code> The Container Repository / Tag which will be used <code>INVOKE_DOCKERFILE</code> <code>Dockerfile</code> The Dockerfile which should be built, handy for development <code>PIP_EXTRA_INDEX_URL</code> If you want to use a custom pip-extra-index-url"},{"location":"installation/040_INSTALL_DOCKER/#build-the-image","title":"Build the Image","text":"<p>I provided a build script, which is located next to the Dockerfile in <code>docker/build.sh</code>. It can be executed from repository root like this:</p> <pre><code>./docker/build.sh\n</code></pre> <p>The build Script not only builds the container, but also creates the docker volume if not existing yet.</p>"},{"location":"installation/040_INSTALL_DOCKER/#run-the-container","title":"Run the Container","text":"<p>After the build process is done, you can run the container via the provided <code>docker/run.sh</code> script</p> <pre><code>./docker/run.sh\n</code></pre> <p>When used without arguments, the container will start the webserver and provide you the link to open it. But if you want to use some other parameters you can also do so.</p> <p>run script example</p> <pre><code>./docker/run.sh \"banana sushi\" -Ak_lms -S42 -s10\n</code></pre> <p>This would generate the legendary \"banana sushi\" with Seed 42, k_lms Sampler and 10 steps.</p> <p>Find out more about available CLI-Parameters at features/CLI.md</p>"},{"location":"installation/040_INSTALL_DOCKER/#running-the-container-on-your-gpu","title":"Running the container on your GPU","text":"<p>If you have an Nvidia GPU, you can enable InvokeAI to run on the GPU by running the container with an extra environment variable to enable GPU usage and have the process run much faster:</p> <pre><code>GPU_FLAGS=all ./docker/run.sh\n</code></pre> <p>This passes the <code>--gpus all</code> to docker and uses the GPU.</p> <p>If you don't have a GPU (or your host is not yet setup to use it) you will see a message like this:</p> <p><code>docker: Error response from daemon: could not select device driver \"\" with capabilities: [[gpu]].</code></p> <p>You can use the full set of GPU combinations documented here:</p> <p>https://docs.docker.com/config/containers/resource_constraints/#gpu</p> <p>For example, use <code>GPU_FLAGS=device=GPU-3a23c669-1f69-c64e-cf85-44e9b07e7a2a</code> to choose a specific device identified by a UUID.</p> <p>Deprecated</p> <p>From here on you will find the the previous Docker-Docs, which will still provide some usefull informations.</p>"},{"location":"installation/040_INSTALL_DOCKER/#usage-time-to-have-fun","title":"Usage (time to have fun)","text":""},{"location":"installation/040_INSTALL_DOCKER/#startup","title":"Startup","text":"<p>If you're on a Linux container the <code>invoke</code> script is automatically started and the output dir set to the Docker volume you created earlier.</p> <p>If you're directly on macOS follow these startup instructions. With the Conda environment activated (<code>conda activate ldm</code>), run the interactive interface that combines the functionality of the original scripts <code>txt2img</code> and <code>img2img</code>: Use the more accurate but VRAM-intensive full precision math because half-precision requires autocast and won't work. By default the images are saved in <code>outputs/img-samples/</code>.</p> <pre><code>python3 scripts/invoke.py --full_precision\n</code></pre> <p>You'll get the script's prompt. You can see available options or quit.</p> <pre><code>invoke&gt; -h\ninvoke&gt; q\n</code></pre>"},{"location":"installation/040_INSTALL_DOCKER/#text-to-image","title":"Text to Image","text":"<p>For quick (but bad) image results test with 5 steps (default 50) and 1 sample image. This will let you know that everything is set up correctly. Then increase steps to 100 or more for good (but slower) results. The prompt can be in quotes or not.</p> <pre><code>invoke&gt; The hulk fighting with sheldon cooper -s5 -n1\ninvoke&gt; \"woman closeup highly detailed\"  -s 150\n# Reuse previous seed and apply face restoration\ninvoke&gt; \"woman closeup highly detailed\"  --steps 150 --seed -1 -G 0.75\n</code></pre> <p>You'll need to experiment to see if face restoration is making it better or worse for your specific prompt.</p> <p>If you're on a container the output is set to the Docker volume. You can copy it wherever you want. You can download it from the Docker Desktop app, Volumes, my-vol, data. Or you can copy it from your Mac terminal. Keep in mind <code>docker cp</code> can't expand <code>*.png</code> so you'll need to specify the image file name.</p> <p>On your host Mac (you can use the name of any container that mounted the volume):</p> <pre><code>docker cp dummy:/data/000001.928403745.png /Users/&lt;your-user&gt;/Pictures\n</code></pre>"},{"location":"installation/040_INSTALL_DOCKER/#image-to-image","title":"Image to Image","text":"<p>You can also do text-guided image-to-image translation. For example, turning a sketch into a detailed drawing.</p> <p><code>strength</code> is a value between 0.0 and 1.0 that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. 0.0 preserves image exactly, 1.0 replaces it completely.</p> <p>Make sure your input image size dimensions are multiples of 64 e.g. 512x512. Otherwise you'll get <code>Error: product of dimension sizes &gt; 2**31'</code>. If you still get the error try a different size like 512x256.</p> <p>If you're on a Docker container, copy your input image into the Docker volume</p> <pre><code>docker cp /Users/&lt;your-user&gt;/Pictures/sketch-mountains-input.jpg dummy:/data/\n</code></pre> <p>Try it out generating an image (or more). The <code>invoke</code> script needs absolute paths to find the image so don't use <code>~</code>.</p> <p>If you're on your Mac</p> <pre><code>invoke&gt; \"A fantasy landscape, trending on artstation\" -I /Users/&lt;your-user&gt;/Pictures/sketch-mountains-input.jpg --strength 0.75  --steps 100 -n4\n</code></pre> <p>If you're on a Linux container on your Mac</p> <pre><code>invoke&gt; \"A fantasy landscape, trending on artstation\" -I /data/sketch-mountains-input.jpg --strength 0.75  --steps 50 -n1\n</code></pre>"},{"location":"installation/040_INSTALL_DOCKER/#web-interface","title":"Web Interface","text":"<p>You can use the <code>invoke</code> script with a graphical web interface. Start the web server with:</p> <pre><code>python3 scripts/invoke.py --full_precision --web\n</code></pre> <p>If it's running on your Mac point your Mac web browser to http://127.0.0.1:9090</p> <p>Press Control-C at the command line to stop the web server.</p>"},{"location":"installation/040_INSTALL_DOCKER/#notes","title":"Notes","text":"<p>Some text you can add at the end of the prompt to make it very pretty:</p> <pre><code>cinematic photo, highly detailed, cinematic lighting, ultra-detailed, ultrarealistic, photorealism, Octane Rendering, cyberpunk lights, Hyper Detail, 8K, HD, Unreal Engine, V-Ray, full hd, cyberpunk, abstract, 3d octane render + 4k UHD + immense detail + dramatic lighting + well lit + black, purple, blue, pink, cerulean, teal, metallic colours, + fine details, ultra photoreal, photographic, concept art, cinematic composition, rule of thirds, mysterious, eerie, photorealism, breathtaking detailed, painting art deco pattern, by hsiao, ron cheng, john james audubon, bizarre compositions, exquisite detail, extremely moody lighting, painted by greg rutkowski makoto shinkai takashi takeuchi studio ghibli, akihiko yoshida\n</code></pre> <p>The original scripts should work as well.</p> <pre><code>python3 scripts/orig_scripts/txt2img.py --help\npython3 scripts/orig_scripts/txt2img.py --ddim_steps 100 --n_iter 1 --n_samples 1  --plms --prompt \"new born baby kitten. Hyper Detail, Octane Rendering, Unreal Engine, V-Ray\"\npython3 scripts/orig_scripts/txt2img.py --ddim_steps 5   --n_iter 1 --n_samples 1  --plms --prompt \"ocean\" # or --klms\n</code></pre>"},{"location":"installation/050_INSTALLING_MODELS/","title":"Installing Models","text":""},{"location":"installation/050_INSTALLING_MODELS/#checkpoint-and-diffusers-models","title":"Checkpoint and Diffusers Models","text":"<p>The model checkpoint files ('*.ckpt') are the Stable Diffusion \"secret sauce\". They are the product of training the AI on millions of captioned images gathered from multiple sources.</p> <p>Originally there was only a single Stable Diffusion weights file, which many people named <code>model.ckpt</code>. Now there are hundreds that have been fine tuned to provide particulary styles, genres, or other features. In addition, there are several new formats that improve on the original checkpoint format: a <code>.safetensors</code> format which prevents malware from masquerading as a model, and <code>diffusers</code> models, the most recent innovation.</p> <p>InvokeAI supports all three formats but strongly prefers the <code>diffusers</code> format. These are distributed as directories containing multiple subfolders, each of which contains a different aspect of the model. The advantage of this is that the models load from disk really fast. Another advantage is that <code>diffusers</code> models are supported by a large and active set of open source developers working at and with HuggingFace organization, and improvements in both rendering quality and performance are being made at a rapid pace. Among other features is the ability to download and install a <code>diffusers</code> model just by providing its HuggingFace repository ID.</p> <p>While InvokeAI will continue to support legacy <code>.ckpt</code> and <code>.safetensors</code> models for the near future, these are deprecated and support will be withdrawn in version 3.0, after which all legacy models will be converted into diffusers at the time they are loaded.</p> <p>This manual will guide you through installing and configuring model weight files and converting legacy <code>.ckpt</code> and <code>.safetensors</code> files into performant <code>diffusers</code> models.</p>"},{"location":"installation/050_INSTALLING_MODELS/#base-models","title":"Base Models","text":"<p>InvokeAI comes with support for a good set of starter models. You'll find them listed in the master models file <code>configs/INITIAL_MODELS.yaml</code> in the InvokeAI root directory. The subset that are currently installed are found in <code>configs/models.yaml</code>. As of v2.3.1, the list of starter models is:</p> Model Name HuggingFace Repo ID Description URL stable-diffusion-1.5 runwayml/stable-diffusion-v1-5 Stable Diffusion version 1.5 diffusers model (4.27 GB) https://huggingface.co/runwayml/stable-diffusion-v1-5 sd-inpainting-1.5 runwayml/stable-diffusion-inpainting RunwayML SD 1.5 model optimized for inpainting, diffusers version (4.27 GB) https://huggingface.co/runwayml/stable-diffusion-inpainting stable-diffusion-2.1 stabilityai/stable-diffusion-2-1 Stable Diffusion version 2.1 diffusers model, trained on 768 pixel images (5.21 GB) https://huggingface.co/stabilityai/stable-diffusion-2-1 sd-inpainting-2.0 stabilityai/stable-diffusion-2-1 Stable Diffusion version 2.0 inpainting model (5.21 GB) https://huggingface.co/stabilityai/stable-diffusion-2-1 analog-diffusion-1.0 wavymulder/Analog-Diffusion An SD-1.5 model trained on diverse analog photographs (2.13 GB) https://huggingface.co/wavymulder/Analog-Diffusion deliberate-1.0 XpucT/Deliberate Versatile model that produces detailed images up to 768px (4.27 GB) https://huggingface.co/XpucT/Deliberate d&amp;d-diffusion-1.0 0xJustin/Dungeons-and-Diffusion Dungeons &amp; Dragons characters (2.13 GB) https://huggingface.co/0xJustin/Dungeons-and-Diffusion dreamlike-photoreal-2.0 dreamlike-art/dreamlike-photoreal-2.0 A photorealistic model trained on 768 pixel images based on SD 1.5 (2.13 GB) https://huggingface.co/dreamlike-art/dreamlike-photoreal-2.0 inkpunk-1.0 Envvi/Inkpunk-Diffusion Stylized illustrations inspired by Gorillaz, FLCL and Shinkawa; prompt with \"nvinkpunk\" (4.27 GB) https://huggingface.co/Envvi/Inkpunk-Diffusion openjourney-4.0 prompthero/openjourney An SD 1.5 model fine tuned on Midjourney; prompt with \"mdjrny-v4 style\" (2.13 GB) https://huggingface.co/prompthero/openjourney portrait-plus-1.0 wavymulder/portraitplus An SD-1.5 model trained on close range portraits of people; prompt with \"portrait+\" (2.13 GB) https://huggingface.co/wavymulder/portraitplus seek-art-mega-1.0 coreco/seek.art_MEGA A general use SD-1.5 \"anything\" model that supports multiple styles (2.1 GB) https://huggingface.co/coreco/seek.art_MEGA trinart-2.0 naclbit/trinart_stable_diffusion_v2 An SD-1.5 model finetuned with ~40K assorted high resolution manga/anime-style images (2.13 GB) https://huggingface.co/naclbit/trinart_stable_diffusion_v2 waifu-diffusion-1.4 hakurei/waifu-diffusion An SD-1.5 model trained on 680k anime/manga-style images (2.13 GB) https://huggingface.co/hakurei/waifu-diffusion <p>Note that these files are covered by an \"Ethical AI\" license which forbids certain uses. When you initially download them, you are asked to accept the license terms. In addition, some of these models carry additional license terms that limit their use in commercial applications or on public servers. Be sure to familiarize yourself with the model terms by visiting the URLs in the table above.</p>"},{"location":"installation/050_INSTALLING_MODELS/#community-contributed-models","title":"Community-Contributed Models","text":"<p>There are too many to list here and more are being contributed every day.  HuggingFace is a great resource for diffusers models, and is also the home of a fast-growing repository of embedding (\".bin\") models that add subjects and/or styles to your images. The latter are automatically installed on the fly when you include the text <code>&lt;concept-name&gt;</code> in your prompt. See Concepts Library for more information.</p> <p>Another popular site for community-contributed models is CIVITAI. This extensive site currently supports only <code>.safetensors</code> and <code>.ckpt</code> models, but they can be easily loaded into InvokeAI and/or converted into optimized <code>diffusers</code> models. Be aware that CIVITAI hosts many models that generate NSFW content.</p> <p>Note</p> <p>InvokeAI 2.3.x does not support directly importing and running Stable Diffusion version 2 checkpoint models. If you try to import them, they will be automatically converted into <code>diffusers</code> models on the fly. This adds about 20s to loading time. To avoid this overhead, you are encouraged to use one of the conversion methods described below to convert them permanently.</p>"},{"location":"installation/050_INSTALLING_MODELS/#installation","title":"Installation","text":"<p>There are multiple ways to install and manage models:</p> <ol> <li> <p>The <code>invokeai-model-install</code> script which will download and install them for you.</p> </li> <li> <p>The command-line tool (CLI) has commands that allows you to import, configure and modify    models files.</p> </li> <li> <p>The web interface (WebUI) has a GUI for importing and managing    models.</p> </li> </ol>"},{"location":"installation/050_INSTALLING_MODELS/#installation-via-invokeai-model-install","title":"Installation via <code>invokeai-model-install</code>","text":"<p>From the <code>invoke</code> launcher, choose option (5) \"Download and install models.\"  This will launch the same script that prompted you to select models at install time. You can use this to add models that you skipped the first time around. It is all right to specify a model that was previously downloaded; the script will just confirm that the files are complete.</p> <p>This script allows you to load 3d party models. Look for a large text entry box labeled \"IMPORT LOCAL AND REMOTE MODELS.\" In this box, you can cut and paste one or more of any of the following:</p> <ol> <li>A URL that points to a downloadable .ckpt or .safetensors file.</li> <li>A file path pointing to a .ckpt or .safetensors  file.</li> <li>A diffusers model repo_id (from HuggingFace) in the format    \"owner/repo_name\".</li> <li>A directory path pointing to a diffusers model directory.</li> <li>A directory path pointing to a directory containing a bunch of    .ckpt and .safetensors files. All will be imported.</li> </ol> <p>You can enter multiple items into the textbox, each one on a separate line. You can paste into the textbox using ctrl-shift-V or by dragging and dropping a file/directory from the desktop into the box.</p> <p>The script also lets you designate a directory that will be scanned for new model files each time InvokeAI starts up. These models will be added automatically.</p> <p>Lastly, the script gives you a checkbox option to convert legacy models into diffusers, or to run the legacy model directly. If you choose to convert, the original .ckpt/.safetensors file will not be deleted, but a new diffusers directory will be created, using twice your disk space. However, the diffusers version will load faster, and will be compatible with InvokeAI 3.0.</p>"},{"location":"installation/050_INSTALLING_MODELS/#installation-via-the-cli","title":"Installation via the CLI","text":"<p>You can install a new model, including any of the community-supported ones, via the command-line client's <code>!import_model</code> command.</p>"},{"location":"installation/050_INSTALLING_MODELS/#installing-individual-ckpt-and-safetensors-models","title":"Installing individual <code>.ckpt</code> and <code>.safetensors</code> models","text":"<p>If the model is already downloaded to your local disk, use <code>!import_model /path/to/file.ckpt</code> to load it. For example:</p> <pre><code>invoke&gt; !import_model C:/Users/fred/Downloads/martians.safetensors\n</code></pre> <p>Forward Slashes</p> <p>On Windows systems, use forward slashes rather than backslashes in your file paths. If you do use backslashes, you must double them like this: <code>C:\\\\Users\\\\fred\\\\Downloads\\\\martians.safetensors</code></p> <p>Alternatively you can directly import the file using its URL:</p> <pre><code>invoke&gt; !import_model https://example.org/sd_models/martians.safetensors\n</code></pre> <p>For this to work, the URL must not be password-protected. Otherwise you will receive a 404 error.</p> <p>When you import a legacy model, the CLI will try to figure out what type of model it is and select the correct load configuration file. However, one thing it can't do is to distinguish between Stable Diffusion 2.x models trained on 512x512 vs 768x768 images. In this case, the CLI will pop up a menu of choices, asking you to select which type of model it is. Please consult the model documentation to identify the correct answer, as loading with the wrong configuration will lead to black images. You can correct the model type after the fact using the <code>!edit_model</code> command.</p> <p>After importing, the model will load. If this is successful, you will be asked if you want to keep the model loaded in memory to start generating immediately. You'll also be asked if you wish to make this the default model on startup. You can change this later using <code>!edit_model</code>.</p>"},{"location":"installation/050_INSTALLING_MODELS/#importing-a-batch-of-ckpt-and-safetensors-models-from-a-directory","title":"Importing a batch of <code>.ckpt</code> and <code>.safetensors</code> models from a directory","text":"<p>You may also point <code>!import_model</code> to a directory containing a set of <code>.ckpt</code> or <code>.safetensors</code> files. They will be imported en masse.</p> <p>Example</p> <pre><code>invoke&gt; !import_model C:/Users/fred/Downloads/civitai_models/\n</code></pre> <p>You will be given the option to import all models found in the directory, or select which ones to import. If there are subfolders within the directory, they will be searched for models to import.</p>"},{"location":"installation/050_INSTALLING_MODELS/#installing-diffusers-models","title":"Installing <code>diffusers</code> models","text":"<p>You can install a <code>diffusers</code> model from the HuggingFace site using <code>!import_model</code> and the HuggingFace repo_id for the model:</p> <pre><code>invoke&gt; !import_model andite/anything-v4.0\n</code></pre> <p>Alternatively, you can download the model to disk and import it from there. The model may be distributed as a ZIP file, or as a Git repository:</p> <pre><code>invoke&gt; !import_model C:/Users/fred/Downloads/andite--anything-v4.0\n</code></pre> <p>The CLI supports file path autocompletion<p>Type a bit of the path name and hit Tab in order to get a choice of  possible completions.</p> </p> <p>On Windows, you can drag model files onto the command-line<p>Once you have typed in <code>!import_model</code>, you can drag the  model  file or directory onto the command-line to insert the model path. This way, you don't need to  type it or copy/paste. However, you will need to reverse or  double backslashes as noted above.</p> </p> <p>Before installing, the CLI will ask you for a short name and description for the model, whether to make this the default model that is loaded at InvokeAI startup time, and whether to replace its VAE. Generally the answer to the latter question is \"no\".</p>"},{"location":"installation/050_INSTALLING_MODELS/#installation-via-the-webui","title":"Installation via the WebUI","text":"<p>To access the WebUI Model Manager, click on the button that looks like a cube in the upper right side of the browser screen. This will bring up a dialogue that lists the models you have already installed, and allows you to load, delete or edit them:</p> <p></p> <p>To add a new model, click on + Add New and select to either a checkpoint/safetensors model, or a diffusers model:</p> <p></p> <p>In this example, we chose Add Diffusers. As shown in the figure below, a new dialogue prompts you to enter the name to use for the model, its description, and either the location of the <code>diffusers</code> model on disk, or its Repo ID on the HuggingFace web site. If you choose to enter a path to disk, the system will autocomplete for you as you type:</p> <p></p> <p>Press Add Model at the bottom of the dialogue (scrolled out of site in the figure), and the model will be downloaded, imported, and registered in <code>models.yaml</code>.</p> <p>The Add Checkpoint/Safetensor Model option is similar, except that in this case you can choose to scan an entire folder for checkpoint/safetensors files to import. Simply type in the path of the directory and press the \"Search\" icon. This will display the <code>.ckpt</code> and <code>.safetensors</code> found inside the directory and its subfolders, and allow you to choose which ones to import:</p> <p></p>"},{"location":"installation/050_INSTALLING_MODELS/#model-management-startup-options","title":"Model Management Startup Options","text":"<p>The <code>invoke</code> launcher and the <code>invokeai</code> script accept a series of command-line arguments that modify InvokeAI's behavior when loading models. These can be provided on the command line, or added to the InvokeAI root directory's <code>invokeai.init</code> initialization file.</p> <p>The arguments are:</p> <ul> <li><code>--model &lt;model name&gt;</code> -- Start up with the indicated model loaded</li> <li><code>--ckpt_convert</code> -- When a checkpoint/safetensors model is loaded, convert it into a <code>diffusers</code> model in memory. This does not permanently save the converted model to disk.</li> <li><code>--autoconvert &lt;path/to/directory&gt;</code> -- Scan the indicated directory path for new checkpoint/safetensors files, convert them into <code>diffusers</code> models, and import them into InvokeAI.</li> </ul> <p>Here is an example of providing an argument on the command line using the <code>invoke.sh</code> launch script:</p> <pre><code>invoke.sh --autoconvert /home/fred/stable-diffusion-checkpoints\n</code></pre> <p>And here is what the same argument looks like in <code>invokeai.init</code>:</p> <pre><code>--outdir=\"/home/fred/invokeai/outputs\n--no-nsfw_checker\n--autoconvert /home/fred/stable-diffusion-checkpoints\n</code></pre>"},{"location":"installation/050_INSTALLING_MODELS/#specifying-a-configuration-file-for-legacy-checkpoints","title":"Specifying a configuration file for legacy checkpoints","text":"<p>Some checkpoint files come with instructions to use a specific .yaml configuration file. For InvokeAI load this file correctly, please put the config file in the same directory as the corresponding <code>.ckpt</code> or <code>.safetensors</code> file and make sure the file has the same basename as the model file. Here is an example:</p> <pre><code>wonderful-model-v2.ckpt\nwonderful-model-v2.yaml\n</code></pre> <p>This is not needed for <code>diffusers</code> models, which come with their own pre-packaged configuration.</p>"},{"location":"installation/050_INSTALLING_MODELS/#specifying-a-custom-vae-file-for-legacy-checkpoints","title":"Specifying a custom VAE file for legacy checkpoints","text":"<p>To associate a custom VAE with a legacy file, place the VAE file in the same directory as the corresponding <code>.ckpt</code> or <code>.safetensors</code> file and make sure the file has the same basename as the model file. Use the suffix <code>.vae.pt</code> for VAE checkpoint files, and <code>.vae.safetensors</code> for VAE safetensors files. There is no requirement that both the model and the VAE follow the same format.</p> <p>Example:</p> <pre><code>wonderful-model-v2.pt\nwonderful-model-v2.vae.safetensors\n</code></pre>"},{"location":"installation/050_INSTALLING_MODELS/#converting-legacy-models-into-diffusers","title":"Converting legacy models into <code>diffusers</code>","text":"<p>The CLI <code>!convert_model</code> will convert a <code>.safetensors</code> or <code>.ckpt</code> models file into <code>diffusers</code> and install it.This will enable the model to load and run faster without loss of image quality.</p> <p>The usage is identical to <code>!import_model</code>. You may point the command to either a downloaded model file on disk, or to a (non-password protected) URL:</p> <pre><code>invoke&gt; !convert_model C:/Users/fred/Downloads/martians.safetensors\n</code></pre> <p>After a successful conversion, the CLI will offer you the option of deleting the original <code>.ckpt</code> or <code>.safetensors</code> file.</p>"},{"location":"installation/050_INSTALLING_MODELS/#optimizing-a-previously-installed-model","title":"Optimizing a previously-installed model","text":"<p>Lastly, if you have previously installed a <code>.ckpt</code> or <code>.safetensors</code> file and wish to convert it into a <code>diffusers</code> model, you can do this without re-downloading and converting the original file using the <code>!optimize_model</code> command. Simply pass the short name of an existing installed model:</p> <pre><code>invoke&gt; !optimize_model martians-v1.0\n</code></pre> <p>The model will be converted into <code>diffusers</code> format and replace the previously installed version. You will again be offered the opportunity to delete the original <code>.ckpt</code> or <code>.safetensors</code> file.</p> <p>Alternatively you can use the WebUI's model manager to handle diffusers optimization. Select the legacy model you wish to convert, and then look for a button labeled \"Convert to Diffusers\" in the upper right of the window.</p>"},{"location":"installation/050_INSTALLING_MODELS/#related-cli-commands","title":"Related CLI Commands","text":"<p>There are a whole series of additional model management commands in the CLI that you can read about in Command-Line Interface. These include:</p> <ul> <li><code>!models</code> - List all installed models</li> <li><code>!switch &lt;model name&gt;</code> - Switch to the indicated model</li> <li><code>!edit_model &lt;model name&gt;</code> - Edit the indicated model to change its name, description or other properties</li> <li><code>!del_model &lt;model name&gt;</code> - Delete the indicated model</li> </ul>"},{"location":"installation/050_INSTALLING_MODELS/#manually-editing-configsmodelsyaml","title":"Manually editing <code>configs/models.yaml</code>","text":"<p>If you are comfortable with a text editor then you may simply edit <code>models.yaml</code> directly.</p> <p>You will need to download the desired <code>.ckpt/.safetensors</code> file and place it somewhere on your machine's filesystem. Alternatively, for a <code>diffusers</code> model, record the repo_id or download the whole model directory. Then using a text editor (e.g. the Windows Notepad application), open the file <code>configs/models.yaml</code>, and add a new stanza that follows this model:</p>"},{"location":"installation/050_INSTALLING_MODELS/#a-legacy-model","title":"A legacy model","text":"<p>A legacy <code>.ckpt</code> or <code>.safetensors</code> entry will look like this:</p> <pre><code>arabian-nights-1.0:\ndescription: A great fine-tune in Arabian Nights style\nweights: ./path/to/arabian-nights-1.0.ckpt\nconfig: ./configs/stable-diffusion/v1-inference.yaml\nformat: ckpt\nwidth: 512\nheight: 512\ndefault: false\n</code></pre> <p>Note that <code>format</code> is <code>ckpt</code> for both <code>.ckpt</code> and <code>.safetensors</code> files.</p>"},{"location":"installation/050_INSTALLING_MODELS/#a-diffusers-model","title":"A diffusers model","text":"<p>A stanza for a <code>diffusers</code> model will look like this for a HuggingFace model with a repository ID:</p> <pre><code>arabian-nights-1.1:\ndescription: An even better fine-tune of the Arabian Nights\nrepo_id: captahab/arabian-nights-1.1\nformat: diffusers\ndefault: true\n</code></pre> <p>And for a downloaded directory:</p> <pre><code>arabian-nights-1.1:\ndescription: An even better fine-tune of the Arabian Nights\npath: /path/to/captahab-arabian-nights-1.1\nformat: diffusers\ndefault: true\n</code></pre> <p>There is additional syntax for indicating an external VAE to use with this model. See <code>INITIAL_MODELS.yaml</code> and <code>models.yaml</code> for examples.</p> <p>After you save the modified <code>models.yaml</code> file relaunch <code>invokeai</code>. The new model will now be available for your use.</p>"},{"location":"installation/060_INSTALL_PATCHMATCH/","title":"Installing PyPatchMatch","text":"<p>pypatchmatch is a Python module for inpainting images. It is not needed to run InvokeAI, but it greatly improves the quality of inpainting and outpainting and is recommended.</p> <p>Unfortunately, it is a C++ optimized module and installation can be somewhat challenging. This guide leads you through the steps.</p>"},{"location":"installation/060_INSTALL_PATCHMATCH/#windows","title":"Windows","text":"<p>You're in luck! On Windows platforms PyPatchMatch will install automatically on Windows systems with no extra intervention.</p>"},{"location":"installation/060_INSTALL_PATCHMATCH/#macintosh","title":"Macintosh","text":"<p>You need to have opencv installed so that pypatchmatch can be built:</p> <pre><code>brew install opencv\n</code></pre> <p>The next time you start <code>invoke</code>, after sucesfully installing opencv, pypatchmatch will be built.</p>"},{"location":"installation/060_INSTALL_PATCHMATCH/#linux","title":"Linux","text":"<p>Prior to installing PyPatchMatch, you need to take the following steps:</p>"},{"location":"installation/060_INSTALL_PATCHMATCH/#debian-based-distros","title":"Debian Based Distros","text":"<ol> <li> <p>Install the <code>build-essential</code> tools:</p> <pre><code>sudo apt update\nsudo apt install build-essential\n</code></pre> </li> <li> <p>Install <code>opencv</code>:</p> <pre><code>sudo apt install python3-opencv libopencv-dev\n</code></pre> </li> <li> <p>Activate the environment you use for invokeai, either with <code>conda</code> or with a    virtual environment.</p> </li> <li> <p>Install pypatchmatch:</p> <pre><code>pip install pypatchmatch\n</code></pre> </li> <li> <p>Confirm that pypatchmatch is installed. At the command-line prompt enter    <code>python</code>, and then at the <code>&gt;&gt;&gt;</code> line type    <code>from patchmatch import patch_match</code>: It should look like the follwing:</p> <pre><code>Python 3.9.5 (default, Nov 23 2021, 15:27:38)\n[GCC 9.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from patchmatch import patch_match\nCompiling and loading c extensions from \"/home/lstein/Projects/InvokeAI/.invokeai-env/src/pypatchmatch/patchmatch\".\nrm -rf build/obj libpatchmatch.so\nmkdir: created directory 'build/obj'\nmkdir: created directory 'build/obj/csrc/'\n[dep] csrc/masked_image.cpp ...\n[dep] csrc/nnf.cpp ...\n[dep] csrc/inpaint.cpp ...\n[dep] csrc/pyinterface.cpp ...\n[CC] csrc/pyinterface.cpp ...\n[CC] csrc/inpaint.cpp ...\n[CC] csrc/nnf.cpp ...\n[CC] csrc/masked_image.cpp ...\n[link] libpatchmatch.so ...\n</code></pre> </li> </ol>"},{"location":"installation/060_INSTALL_PATCHMATCH/#arch-based-distros","title":"Arch Based Distros","text":"<ol> <li> <p>Install the <code>base-devel</code> package:</p> <pre><code>sudo pacman -Syu\nsudo pacman -S --needed base-devel\n</code></pre> </li> <li> <p>Install <code>opencv</code>:</p> <pre><code>sudo pacman -S opencv\n</code></pre> <p>or for CUDA support</p> <pre><code>sudo pacman -S opencv-cuda\n</code></pre> </li> <li> <p>Fix the naming of the <code>opencv</code> package configuration file:</p> <pre><code>cd /usr/lib/pkgconfig/\nln -sf opencv4.pc opencv.pc\n</code></pre> </li> </ol> <p>Next, Follow Steps 4-6 from the Debian Section above</p> <p>If you see no errors, then you're ready to go!</p>"},{"location":"installation/070_INSTALL_XFORMERS/","title":"Installing xformers","text":"<p>xFormers is toolbox that integrates with the pyTorch and CUDA libraries to provide accelerated performance and reduced memory consumption for applications using the transformers machine learning architecture. After installing xFormers, InvokeAI users who have CUDA GPUs will see a noticeable decrease in GPU memory consumption and an increase in speed.</p> <p>xFormers can be installed into a working InvokeAI installation without any code changes or other updates. This document explains how to install xFormers.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#pip-install","title":"Pip Install","text":"<p>For both Windows and Linux, you can install <code>xformers</code> in just a couple of steps from the command line.</p> <p>If you are used to launching <code>invoke.sh</code> or <code>invoke.bat</code> to start InvokeAI, then run the launcher and select the \"developer's console\" to get to the command line. If you run invoke.py directly from the command line, then just be sure to activate it's virtual environment.</p> <p>Then run the following three commands:</p> <pre><code>pip install xformers==0.0.16rc425\npip install triton\npython -m xformers.info output\n</code></pre> <p>The first command installs <code>xformers</code>, the second installs the <code>triton</code> training accelerator, and the third prints out the <code>xformers</code> installation status. If all goes well, you'll see a report like the following:</p> <pre><code>xFormers 0.0.16rc425\nmemory_efficient_attention.cutlassF:               available\nmemory_efficient_attention.cutlassB:               available\nmemory_efficient_attention.flshattF:               available\nmemory_efficient_attention.flshattB:               available\nmemory_efficient_attention.smallkF:                available\nmemory_efficient_attention.smallkB:                available\nmemory_efficient_attention.tritonflashattF:        available\nmemory_efficient_attention.tritonflashattB:        available\nswiglu.fused.p.cpp:                                available\nis_triton_available:                               True\nis_functorch_available:                            False\npytorch.version:                                   1.13.1+cu117\npytorch.cuda:                                      available\ngpu.compute_capability:                            8.6\ngpu.name:                                          NVIDIA RTX A2000 12GB\nbuild.info:                                        available\nbuild.cuda_version:                                1107\nbuild.python_version:                              3.10.9\nbuild.torch_version:                               1.13.1+cu117\nbuild.env.TORCH_CUDA_ARCH_LIST:                    5.0+PTX 6.0 6.1 7.0 7.5 8.0 8.6\nbuild.env.XFORMERS_BUILD_TYPE:                     Release\nbuild.env.XFORMERS_ENABLE_DEBUG_ASSERTIONS:        None\nbuild.env.NVCC_FLAGS:                              None\nbuild.env.XFORMERS_PACKAGE_FROM:                   wheel-v0.0.16rc425\nsource.privacy:                                    open source\n</code></pre>"},{"location":"installation/070_INSTALL_XFORMERS/#source-builds","title":"Source Builds","text":"<p><code>xformers</code> is currently under active development and at some point you may wish to build it from sourcce to get the latest features and bugfixes.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#source-build-on-linux","title":"Source Build on Linux","text":"<p>Note that xFormers only works with true NVIDIA GPUs and will not work properly with the ROCm driver for AMD acceleration.</p> <p>xFormers is not currently available as a pip binary wheel and must be installed from source. These instructions were written for a system running Ubuntu 22.04, but other Linux distributions should be able to adapt this recipe.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#1-install-cuda-toolkit-117","title":"1. Install CUDA Toolkit 11.7","text":"<p>You will need the CUDA developer's toolkit in order to compile and install xFormers. Do not try to install Ubuntu's nvidia-cuda-toolkit package. It is out of date and will cause conflicts among the NVIDIA driver and binaries. Instead install the CUDA Toolkit package provided by NVIDIA itself. Go to CUDA Toolkit 11.7 Downloads and use the target selection wizard to choose your platform and Linux distribution. Select an installer type of \"runfile (local)\" at the last step.</p> <p>This will provide you with a recipe for downloading and running a install shell script that will install the toolkit and drivers. For example, the install script recipe for Ubuntu 22.04 running on a x86_64 system is:</p> <pre><code>wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux.run\nsudo sh cuda_11.7.0_515.43.04_linux.run\n</code></pre> <p>Rather than cut-and-paste this example, We recommend that you walk through the toolkit wizard in order to get the most up to date installer for your system.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#2-confirminstall-pytorch-113-with-cuda-117-support","title":"2. Confirm/Install pyTorch 1.13 with CUDA 11.7 support","text":"<p>If you are using InvokeAI 2.3 or higher, these will already be installed. If not, you can check whether you have the needed libraries using a quick command. Activate the invokeai virtual environment, either by entering the \"developer's console\", or manually with a command similar to <code>source ~/invokeai/.venv/bin/activate</code> (depending on where your <code>invokeai</code> directory is.</p> <p>Then run the command:</p> <pre><code>python -c 'exec(\"import torch\\nprint(torch.__version__)\")'\n</code></pre> <p>If it prints 1.13.1+cu117 you're good. If not, you can install the most up to date libraries with this command:</p> <pre><code>pip install --upgrade --force-reinstall torch torchvision\n</code></pre>"},{"location":"installation/070_INSTALL_XFORMERS/#3-install-the-triton-module","title":"3. Install the triton module","text":"<p>This module isn't necessary for xFormers image inference optimization, but avoids a startup warning.</p> <pre><code>pip install triton\n</code></pre>"},{"location":"installation/070_INSTALL_XFORMERS/#4-install-source-code-build-prerequisites","title":"4. Install source code build prerequisites","text":"<p>To build xFormers from source, you will need the <code>build-essentials</code> package. If you don't have it installed already, run:</p> <pre><code>sudo apt install build-essential\n</code></pre>"},{"location":"installation/070_INSTALL_XFORMERS/#5-build-xformers","title":"5. Build xFormers","text":"<p>There is no pip wheel package for xFormers at this time (January 2023). Although there is a conda package, InvokeAI no longer officially supports conda installations and you're on your own if you wish to try this route.</p> <p>Following the recipe provided at the xFormers GitHub page, and with the InvokeAI virtual environment active (see step 1) run the following commands:</p> <pre><code>pip install ninja\nexport TORCH_CUDA_ARCH_LIST=\"6.0;6.1;6.2;7.0;7.2;7.5;8.0;8.6\"\npip install -v -U git+https://github.com/facebookresearch/xformers.git@main#egg=xformers\n</code></pre> <p>The TORCH_CUDA_ARCH_LIST is a list of GPU architectures to compile xFormer support for. You can speed up compilation by selecting the architecture specific for your system. You'll find the list of GPUs and their architectures at NVIDIA's GPU Compute Capability table.</p> <p>If the compile and install completes successfully, you can check that xFormers is installed with this command:</p> <pre><code>python -m xformers.info\n</code></pre> <p>If suiccessful, the top of the listing should indicate \"available\" for each of the <code>memory_efficient_attention</code> modules, as shown here:</p> <pre><code>memory_efficient_attention.cutlassF:               available\nmemory_efficient_attention.cutlassB:               available\nmemory_efficient_attention.flshattF:               available\nmemory_efficient_attention.flshattB:               available\nmemory_efficient_attention.smallkF:                available\nmemory_efficient_attention.smallkB:                available\nmemory_efficient_attention.tritonflashattF:        available\nmemory_efficient_attention.tritonflashattB:        available\n[...]\n</code></pre> <p>You can now launch InvokeAI and enjoy the benefits of xFormers.</p>"},{"location":"installation/070_INSTALL_XFORMERS/#windows","title":"Windows","text":"<p>To come</p> <p>\u00a9 Copyright 2023 Lincoln Stein and the InvokeAI Development Team</p>"},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/","title":"How to build \"binary\" installers (InvokeAI-mac/windows/linux_on_*.zip)","text":""},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/#1-ensure-installersrequirementsin-is-correct","title":"1. Ensure <code>installers/requirements.in</code> is correct","text":"<p>and up to date on the branch to be installed.</p>"},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/#2-run-pip-compile-on-each-platform","title":"2. Run <code>pip-compile</code> on each platform.","text":"<p>On each target platform, in the branch that is to be installed, and inside the InvokeAI git root folder, run the following commands:</p> <p><pre><code>conda activate invokeai # or however you activate python\npip install pip-tools\npip-compile --allow-unsafe --generate-hashes --output-file=binary_installer/&lt;reqsfile&gt;.txt binary_installer/requirements.in\n</code></pre> where <code>&lt;reqsfile&gt;.txt</code> is whichever of <pre><code>py3.10-darwin-arm64-mps-reqs.txt\npy3.10-darwin-x86_64-reqs.txt\npy3.10-linux-x86_64-cuda-reqs.txt\npy3.10-windows-x86_64-cuda-reqs.txt\n</code></pre> matches the current OS and architecture.</p> <p>There is no way to cross-compile these. They must be done on a system matching the target OS and arch.</p>"},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/#3-set-github-repository-and-branch","title":"3. Set github repository and branch","text":"<p>Once all reqs files have been collected and committed to the branch to be installed, edit <code>binary_installer/install.sh.in</code> and <code>binary_installer/install.bat.in</code> so that <code>RELEASE_URL</code> and <code>RELEASE_SOURCEBALL</code> point to the github repo and branch that is to be installed.</p> <p>For example, to install <code>main</code> branch of <code>InvokeAI</code>, they should be set as follows:</p> <p><code>install.sh.in</code>: <pre><code>RELEASE_URL=https://github.com/invoke-ai/InvokeAI\nRELEASE_SOURCEBALL=/archive/refs/heads/main.tar.gz\n</code></pre></p> <p><code>install.bat.in</code>: <pre><code>set RELEASE_URL=https://github.com/invoke-ai/InvokeAI\nset RELEASE_SOURCEBALL=/archive/refs/heads/main.tar.gz\n</code></pre></p> <p>Or, to install <code>damians-cool-feature</code> branch of <code>damian0815</code>, set them as follows:</p> <p><code>install.sh.in</code>: <pre><code>RELEASE_URL=https://github.com/damian0815/InvokeAI\nRELEASE_SOURCEBALL=/archive/refs/heads/damians-cool-feature.tar.gz\n</code></pre></p> <p><code>install.bat.in</code>: <pre><code>set RELEASE_URL=https://github.com/damian0815/InvokeAI\nset RELEASE_SOURCEBALL=/archive/refs/heads/damians-cool-feature.tar.gz\n</code></pre></p> <p>The branch and repo specified here must contain the correct reqs files. The installer zip files do not contain requirements files, they are pulled from the specified branch during the installation process.</p>"},{"location":"installation/Developers_documentation/BUILDING_BINARY_INSTALLERS/#4-create-zip-files","title":"4. Create zip files.","text":"<p>cd into the <code>installers/</code> folder and run <code>./create_installers.sh</code>. This will create <code>InvokeAI-mac_on_&lt;branch&gt;.zip</code>, <code>InvokeAI-windows_on_&lt;branch&gt;.zip</code> and <code>InvokeAI-linux_on_&lt;branch&gt;.zip</code>. These files can be distributed to end users.</p> <p>These zips will continue to function as installers for all future pushes to those branches, as long as necessary changes to <code>requirements.in</code> are propagated in a timely manner to the <code>py3.10-*-reqs.txt</code> files using pip-compile as outlined in step 2.</p> <p>To actually install, users should unzip the appropriate zip file into an empty folder and run <code>install.sh</code> on macOS/Linux or <code>install.bat</code> on Windows.</p>"},{"location":"installation/deprecated_documentation/INSTALL_BINARY/","title":"InvokeAI Binary Installer","text":"<p>The InvokeAI binary installer is a shell script that will install InvokeAI onto a stock computer running recent versions of Linux, MacOSX or Windows. It will leave you with a version that runs a stable version of InvokeAI. When a new version of InvokeAI is released, you will download and reinstall the new version.</p> <p>If you wish to tinker with unreleased versions of InvokeAI that introduce potentially unstable new features, you should consider using the source installer or one of the manual install methods.</p> <p>Important Caveats   - This script does not support AMD GPUs. For Linux AMD support,     please use the manual or source code installer methods.</p> <ul> <li>This script has difficulty on some Macintosh machines     that have previously been used for Python development due to     conflicting development tools versions. Mac developers may wish     to try the source code installer or one of the manual methods instead.</li> </ul> <p>Todo</p> <p>Before you begin, make sure that you meet thehardware requirements and has the appropriate GPU drivers installed. In particular, if you are a Linux user with an AMD GPU installed, you may need to install the ROCm-driver.</p> <p>Installation requires roughly 18G of free disk space to load the libraries and recommended model weights files.</p>"},{"location":"installation/deprecated_documentation/INSTALL_BINARY/#steps-to-install","title":"Steps to Install","text":"<ol> <li> <p>Download the    latest release of    InvokeAI's installer for your platform. Look for a file named <code>InvokeAI-binary-&lt;your platform&gt;.zip</code></p> </li> <li> <p>Place the downloaded package someplace where you have plenty of HDD space,    and have full permissions (i.e. <code>~/</code> on Lin/Mac; your home folder on Windows)</p> </li> <li> <p>Extract the 'InvokeAI' folder from the downloaded package</p> </li> <li> <p>Open the extracted 'InvokeAI' folder</p> </li> <li> <p>Double-click 'install.bat' (Windows), or 'install.sh' (Lin/Mac) (or run from    a terminal)</p> </li> <li> <p>Follow the prompts</p> </li> <li> <p>After installation, please run the 'invoke.bat' file (on Windows) or    'invoke.sh' file (on Linux/Mac) to start InvokeAI.</p> </li> </ol>"},{"location":"installation/deprecated_documentation/INSTALL_BINARY/#troubleshooting","title":"Troubleshooting","text":"<p>If you run into problems during or after installation, the InvokeAI team is available to help you. Either create an Issue at our GitHub site, or make a request for help on the \"bugs-and-support\" channel of our Discord server. We are a 100% volunteer organization, but typically somebody will be available to help you within 24 hours, and often much sooner.</p>"},{"location":"installation/deprecated_documentation/INSTALL_JUPYTER/","title":"Running InvokeAI on Google Colab using a Jupyter Notebook","text":""},{"location":"installation/deprecated_documentation/INSTALL_JUPYTER/#introduction","title":"Introduction","text":"<p>We have a Jupyter notebook with cell-by-cell installation steps. It will download the code in this repo as one of the steps, so instead of cloning this repo, simply download the notebook from the link above and load it up in VSCode (with the appropriate extensions installed)/Jupyter/JupyterLab and start running the cells one-by-one.</p> <p>you will need NVIDIA drivers, Python 3.10, and Git installed beforehand</p>"},{"location":"installation/deprecated_documentation/INSTALL_JUPYTER/#running-online-on-google-colabotary","title":"Running Online On Google Colabotary","text":""},{"location":"installation/deprecated_documentation/INSTALL_JUPYTER/#running-locally-cloning","title":"Running Locally (Cloning)","text":"<ol> <li> <p>Install the Jupyter Notebook python library (one-time): pip install jupyter</p> </li> <li> <p>Clone the InvokeAI repository: git clone https://github.com/invoke-ai/InvokeAI.git cd invoke-ai</p> </li> <li>Create a virtual environment using conda: conda create -n invoke jupyter</li> <li>Activate the environment and start the Jupyter notebook: conda activate invoke jupyter notebook</li> </ol>"},{"location":"installation/deprecated_documentation/INSTALL_LINUX/","title":"Linux","text":""},{"location":"installation/deprecated_documentation/INSTALL_LINUX/#installation","title":"Installation","text":"<ol> <li> <p>You will need to install the following prerequisites if they are not already     available. Use your operating system's preferred installer.</p> <ul> <li>Python (version 3.8.5 recommended; higher may work)</li> <li>git</li> </ul> </li> <li> <p>Install the Python Anaconda environment manager.</p> <pre><code>~$  wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh\n~$  chmod +x Anaconda3-2022.05-Linux-x86_64.sh\n~$  ./Anaconda3-2022.05-Linux-x86_64.sh\n</code></pre> <p>After installing anaconda, you should log out of your system and log back in. If the installation worked, your command prompt will be prefixed by the name of the current anaconda environment - <code>(base)</code>.</p> </li> <li> <p>Copy the InvokeAI source code from GitHub:</p> <pre><code>(base) ~$ git clone https://github.com/invoke-ai/InvokeAI.git\n</code></pre> <p>This will create InvokeAI folder where you will follow the rest of the steps.</p> </li> <li> <p>Enter the newly-created InvokeAI folder. From this step forward make sure     that you are working in the InvokeAI directory!</p> <pre><code>(base) ~$ cd InvokeAI\n(base) ~/InvokeAI$\n</code></pre> </li> <li> <p>Use anaconda to copy necessary python packages, create a new python     environment named <code>invokeai</code> and then activate the environment.</p> <p>For systems with a CUDA (Nvidia) card:</p> <pre><code>(base) rm -rf src      # (this is a precaution in case there is already a src directory)\n(base) ~/InvokeAI$ conda env create -f environment-cuda.yml\n(base) ~/InvokeAI$ conda activate invokeai\n(invokeai) ~/InvokeAI$\n</code></pre> <p>For systems with an AMD card (using ROCm driver):</p> <pre><code>(base) rm -rf src      # (this is a precaution in case there is already a src directory)\n(base) ~/InvokeAI$ conda env create -f environment-AMD.yml\n(base) ~/InvokeAI$ conda activate invokeai\n(invokeai) ~/InvokeAI$\n</code></pre> <p>After these steps, your command prompt will be prefixed by <code>(invokeai)</code> as shown above.</p> </li> <li> <p>Load the big stable diffusion weights files and a couple of smaller     machine-learning models:</p> <pre><code>(invokeai) ~/InvokeAI$ python3 scripts/configure_invokeai.py\n</code></pre> <p>Note</p> <p>This script will lead you through the process of creating an account on Hugging Face, accepting the terms and conditions of the Stable Diffusion model license, and obtaining an access token for downloading. It will then download and install the weights files for you.</p> <p>Please look here for a manual process for doing the same thing.</p> </li> <li> <p>Start generating images!</p> <p>Run InvokeAI!</p> <p>IMPORTANT</p> <p>Make sure that the conda environment is activated, which should create <code>(invokeai)</code> in front of your prompt!</p> CLIlocal WebserverPublic Webserver <pre><code>python scripts/invoke.py\n</code></pre> <pre><code>python scripts/invoke.py --web\n</code></pre> <pre><code>python scripts/invoke.py --web --host 0.0.0.0\n</code></pre> <p>To use an alternative model you may invoke the <code>!switch</code> command in the CLI, or pass <code>--model &lt;model_name&gt;</code> during <code>invoke.py</code> launch for either the CLI or the Web UI. See Command Line Client. The model names are defined in <code>configs/models.yaml</code>.</p> </li> <li> <p>Subsequently, to relaunch the script, be sure to run \"conda activate    invokeai\" (step 5, second command), enter the <code>InvokeAI</code> directory, and then    launch the invoke script (step 8). If you forget to activate the 'invokeai'    environment, the script will fail with multiple <code>ModuleNotFound</code> errors.</p> </li> </ol>"},{"location":"installation/deprecated_documentation/INSTALL_LINUX/#updating-to-newer-versions-of-the-script","title":"Updating to newer versions of the script","text":"<p>This distribution is changing rapidly. If you used the <code>git clone</code> method (step 5) to download the InvokeAI directory, then to update to the latest and greatest version, launch the Anaconda window, enter <code>InvokeAI</code> and type:</p> <pre><code>(invokeai) ~/InvokeAI$ git pull\n(invokeai) ~/InvokeAI$ rm -rf src   # prevents conda freezing errors\n(invokeai) ~/InvokeAI$ conda env update -f environment.yml\n</code></pre> <p>This will bring your local copy into sync with the remote one.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/","title":"macOS","text":"<p>Invoke AI runs quite well on M1 Macs and we have a number of M1 users in the community.</p> <p>While the repo does run on Intel Macs, we only have a couple reports. If you have an Intel Mac and run into issues, please create an issue on Github and we will do our best to help.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#requirements","title":"Requirements","text":"<ul> <li>macOS 12.3 Monterey or later</li> <li>About 10GB of storage (and 10GB of data if your internet connection has data   caps)</li> <li>Any M1 Macs or an Intel Macs with 4GB+ of VRAM (ideally more)</li> </ul>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#installation","title":"Installation","text":"<p>Homebrew</p> <p>First you will install the \"brew\" package manager. Skip this if brew is already installed.</p> install brew (and Xcode command line tools)<pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>Conda Installation</p> <p>Now there are two different ways to set up the Python (miniconda) environment:</p> <ol> <li>Standalone</li> <li>with pyenv</li> </ol> <p>If you don't know what we are talking about, choose Standalone. If you are familiar with python environments, choose \"with pyenv\"</p> Standalonewith pyenv Install cmake, protobuf, and rust<pre><code>brew install cmake protobuf rust\n</code></pre> Clone the InvokeAI repository<pre><code># Clone the Invoke AI repo\ngit clone https://github.com/invoke-ai/InvokeAI.git\ncd InvokeAI\n</code></pre> <p>Choose the appropriate architecture for your system and install miniconda:</p> M1 arm64Intel x86_64 Install miniconda for M1 arm64<pre><code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh \\\n-o Miniconda3-latest-MacOSX-arm64.sh\n/bin/bash Miniconda3-latest-MacOSX-arm64.sh\n</code></pre> Install miniconda for Intel<pre><code>curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh \\\n-o Miniconda3-latest-MacOSX-x86_64.sh\n/bin/bash Miniconda3-latest-MacOSX-x86_64.sh\n</code></pre> <pre><code>brew install pyenv-virtualenv\npyenv install anaconda3-2022.05\npyenv virtualenv anaconda3-2022.05\neval \"$(pyenv init -)\"\npyenv activate anaconda3-2022.05\n</code></pre> <p>Clone the Invoke AI repo</p> <pre><code>git clone https://github.com/invoke-ai/InvokeAI.git\ncd InvokeAI\n</code></pre> <p>Create the environment &amp; install packages</p> M1 MacIntel x86_64 Mac <pre><code>PIP_EXISTS_ACTION=w CONDA_SUBDIR=osx-arm64 conda env create -f environment-mac.yml\n</code></pre> <pre><code>PIP_EXISTS_ACTION=w CONDA_SUBDIR=osx-64 conda env create -f environment-mac.yml\n</code></pre> <pre><code># Activate the environment (you need to do this every time you want to run SD)\nconda activate invokeai\n</code></pre> <p>Info</p> <p><code>export PIP_EXISTS_ACTION=w</code> is a precaution to fix <code>conda env create -f environment-mac.yml</code> never finishing in some situations. So it isn't required but won't hurt.</p> <p>Download the model weight files</p> <p>The <code>configure_invokeai.py</code> script downloads and installs the model weight files for you. It will lead you through the process of getting a Hugging Face account, accepting the Stable Diffusion model weight license agreement, and creating a download token:</p> <pre><code># This will take some time, depending on the speed of your internet connection\n# and will consume about 10GB of space\npython scripts/configure_invokeai.py\n</code></pre> <p>Run InvokeAI!</p> <p>IMPORTANT</p> <p>Make sure that the conda environment is activated, which should create <code>(invokeai)</code> in front of your prompt!</p> CLIlocal WebserverPublic Webserver <pre><code>python scripts/invoke.py\n</code></pre> <pre><code>python scripts/invoke.py --web\n</code></pre> <pre><code>python scripts/invoke.py --web --host 0.0.0.0\n</code></pre> <p>To use an alternative model you may invoke the <code>!switch</code> command in the CLI, or pass <code>--model &lt;model_name&gt;</code> during <code>invoke.py</code> launch for either the CLI or the Web UI. See Command Line Client. The model names are defined in <code>configs/models.yaml</code>.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#common-problems","title":"Common problems","text":"<p>After you followed all the instructions and try to run invoke.py, you might get several errors. Here's the errors I've seen and found solutions for.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#is-it-slow","title":"Is it slow?","text":"Be sure to specify 1 sample and 1 iteration.<pre><code>python ./scripts/orig_scripts/txt2img.py \\\n--prompt \"ocean\" \\\n--ddim_steps 5 \\\n--n_samples 1 \\\n--n_iter 1\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#doesnt-work-anymore","title":"Doesn't work anymore?","text":"<p>PyTorch nightly includes support for MPS. Because of this, this setup is inherently unstable. One morning I woke up and it no longer worked no matter what I did until I switched to miniforge. However, I have another Mac that works just fine with Anaconda. If you can't get it to work, please search a little first because many of the errors will get posted and solved. If you can't find a solution please create an issue.</p> <p>One debugging step is to update to the latest version of PyTorch nightly.</p> <pre><code>conda install \\\npytorch \\\ntorchvision \\\n-c pytorch-nightly \\\n-n invokeai\n</code></pre> <p>If it takes forever to run <code>conda env create -f environment-mac.yml</code>, try this:</p> <pre><code>git clean -f\nconda clean \\\n--yes \\\n--all\n</code></pre> <p>Or you could try to completley reset Anaconda:</p> <pre><code>conda update \\\n--force-reinstall \\\n-y \\\n-n base \\\n-c defaults conda\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#no-module-named-cv2-torch-invokeai-transformers-taming-etc","title":"\"No module named cv2\", torch, 'invokeai', 'transformers', 'taming', etc","text":"<p>There are several causes of these errors:</p> <ol> <li> <p>Did you remember to <code>conda activate invokeai</code>? If your terminal prompt begins    with \"(invokeai)\" then you activated it. If it begins with \"(base)\" or    something else you haven't.</p> </li> <li> <p>You might've run <code>./scripts/configure_invokeai.py</code> or <code>./scripts/invoke.py</code>    instead of <code>python ./scripts/configure_invokeai.py</code> or    <code>python ./scripts/invoke.py</code>. The cause of this error is long so it's below.</p> </li> <li> <p>if it says you're missing taming you need to rebuild your virtual    environment.</p> </li> </ol> <pre><code>conda deactivate\nconda env remove -n invokeai\nconda env create -f environment-mac.yml\n</code></pre> <ol> <li>If you have activated the invokeai virtual environment and tried rebuilding    it, maybe the problem could be that I have something installed that you don't    and you'll just need to manually install it. Make sure you activate the    virtual environment so it installs there instead of globally.</li> </ol> <pre><code>conda activate invokeai\npip install &lt;package name&gt;\n</code></pre> <p>You might also need to install Rust (I mention this again below).</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#how-many-snakes-are-living-in-your-computer","title":"How many snakes are living in your computer?","text":"<p>You might have multiple Python installations on your system, in which case it's important to be explicit and consistent about which one to use for a given project. This is because virtual environments are coupled to the Python that created it (and all the associated 'system-level' modules).</p> <p>When you run <code>python</code> or <code>python3</code>, your shell searches the colon-delimited locations in the <code>PATH</code> environment variable (<code>echo $PATH</code> to see that list) in that order - first match wins. You can ask for the location of the first <code>python3</code> found in your <code>PATH</code> with the <code>which</code> command like this:</p> <pre><code>% which python3\n/usr/bin/python3\n</code></pre> <p>Anything in <code>/usr/bin</code> is part of the OS. However, <code>/usr/bin/python3</code> is not actually python3, but rather a stub that offers to install Xcode (which includes python 3). If you have Xcode installed already, <code>/usr/bin/python3</code> will execute <code>/Library/Developer/CommandLineTools/usr/bin/python3</code> or <code>/Applications/Xcode.app/Contents/Developer/usr/bin/python3</code> (depending on which Xcode you've selected with <code>xcode-select</code>).</p> <p>Note that <code>/usr/bin/python</code> is an entirely different python - specifically, python 2. Note: starting in macOS 12.3, <code>/usr/bin/python</code> no longer exists.</p> <pre><code>% which python3\n/opt/homebrew/bin/python3\n</code></pre> <p>If you installed python3 with Homebrew and you've modified your path to search for Homebrew binaries before system ones, you'll see the above path.</p> <pre><code>% which python\n/opt/anaconda3/bin/python\n</code></pre> <p>If you have Anaconda installed, you will see the above path. There is a <code>/opt/anaconda3/bin/python3</code> also.</p> <p>We expect that <code>/opt/anaconda3/bin/python</code> and <code>/opt/anaconda3/bin/python3</code> should actually be the same python, which you can verify by comparing the output of <code>python3 -V</code> and <code>python -V</code>.</p> <pre><code>(invokeai) % which python\n/Users/name/miniforge3/envs/invokeai/bin/python\n</code></pre> <p>The above is what you'll see if you have miniforge and correctly activated the invokeai environment, while usingd the standalone setup instructions above.</p> <p>If you otherwise installed via pyenv, you will get this result:</p> <pre><code>(anaconda3-2022.05) % which python\n/Users/name/.pyenv/shims/python\n</code></pre> <p>It's all a mess and you should know how to modify the path environment variable if you want to fix it. Here's a brief hint of the most common ways you can modify it (don't really have the time to explain it all here).</p> <ul> <li>~/.zshrc</li> <li>~/.bash_profile</li> <li>~/.bashrc</li> <li>/etc/paths.d</li> <li>/etc/path</li> </ul> <p>Which one you use will depend on what you have installed, except putting a file in /etc/paths.d - which also is the way I prefer to do.</p> <p>Finally, to answer the question posed by this section's title, it may help to list all of the <code>python</code> / <code>python3</code> things found in <code>$PATH</code> instead of just the first hit. To do so, add the <code>-a</code> switch to <code>which</code>:</p> <pre><code>% which -a python3\n...\n</code></pre> <p>This will show a list of all binaries which are actually available in your PATH.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#debugging","title":"Debugging?","text":"<p>Tired of waiting for your renders to finish before you can see if it works? Reduce the steps! The image quality will be horrible but at least you'll get quick feedback.</p> <pre><code>python ./scripts/txt2img.py \\\n--prompt \"ocean\" \\\n--ddim_steps 5 \\\n--n_samples 1 \\\n--n_iter 1\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#oserror-cant-load-tokenizer-for-openaiclip-vit-large-patch14","title":"OSError: Can't load tokenizer for 'openai/clip-vit-large-patch14'","text":"<pre><code>python scripts/configure_invokeai.py\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#the-operator-name-is-not-current-implemented-for-the-mps-device-sic","title":"\"The operator [name] is not current implemented for the MPS device.\" (sic)","text":"<p>example error</p> <pre><code>... NotImplementedError: The operator 'aten::_index_put_impl_' is not current\nimplemented for the MPS device. If you want this op to be added in priority\nduring the prototype phase of this feature, please comment on\nhttps://github.com/pytorch/pytorch/issues/77764.\nAs a temporary fix, you can set the environment variable\n`PYTORCH_ENABLE_MPS_FALLBACK=1` to use the CPU as a fallback for this op.\nWARNING: this will be slower than running natively on MPS.\n</code></pre> <p>The InvokeAI version includes this fix in environment-mac.yml.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#could-not-build-wheels-for-tokenizers","title":"\"Could not build wheels for tokenizers\"","text":"<p>I have not seen this error because I had Rust installed on my computer before I started playing with Stable Diffusion. The fix is to install Rust.</p> <pre><code>curl \\\n--proto '=https' \\\n--tlsv1.2 \\\n-sSf https://sh.rustup.rs | sh\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#how-come-seed-doesnt-work","title":"How come <code>--seed</code> doesn't work?","text":"<p>Information</p> <p>Completely reproducible results are not guaranteed across PyTorch releases, individual commits, or different platforms. Furthermore, results may not be reproducible between CPU and GPU executions, even when using identical seeds.</p> <p>PyTorch docs</p> <p>Second, we might have a fix that at least gets a consistent seed sort of. We're still working on it.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#libiomp5dylib-error","title":"libiomp5.dylib error?","text":"<pre><code>OMP: Error #15: Initializing libiomp5.dylib, but found libomp.dylib already initialized.\n</code></pre> <p>You are likely using an Intel package by mistake. Be sure to run conda with the environment variable <code>CONDA_SUBDIR=osx-arm64</code>, like so:</p> <p><code>CONDA_SUBDIR=osx-arm64 conda install ...</code></p> <p>This error happens with Anaconda on Macs when the Intel-only <code>mkl</code> is pulled in by a dependency. nomkl is a metapackage designed to prevent this, by making it impossible to install <code>mkl</code>, but if your environment is already broken it may not work.</p> <p>Do not use <code>os.environ['KMP_DUPLICATE_LIB_OK']='True'</code> or equivalents as this masks the underlying issue of using Intel packages.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#not-enough-memory","title":"Not enough memory","text":"<p>This seems to be a common problem and is probably the underlying problem for a lot of symptoms (listed below). The fix is to lower your image size or to add <code>model.half()</code> right after the model is loaded. I should probably test it out. I've read that the reason this fixes problems is because it converts the model from 32-bit to 16-bit and that leaves more RAM for other things. I have no idea how that would affect the quality of the images though.</p> <p>See this issue.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#error-product-of-dimension-sizes-231","title":"\"Error: product of dimension sizes &gt; 2**31'\"","text":"<p>This error happens with img2img, which I haven't played with too much yet. But I know it's because your image is too big or the resolution isn't a multiple of 32x32. Because the stable-diffusion model was trained on images that were 512 x 512, it's always best to use that output size (which is the default). However, if you're using that size and you get the above error, try 256 x 256 or 512 x 256 or something as the source image.</p> <p>BTW, 2**31-1 = 2,147,483,647, which is also 32-bit signed LONG_MAX in C.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#i-just-got-rickrolled-do-i-have-a-virus","title":"I just got Rickrolled! Do I have a virus?","text":"<p>You don't have a virus. It's part of the project. Here's Rick and here's the code that swaps him in. It's a NSFW filter, which IMO, doesn't work very good (and we call this \"computer vision\", sheesh).</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#my-images-come-out-black","title":"My images come out black","text":"<p>We might have this fixed, we are still testing.</p> <p>There's a similar issue on CUDA GPU's where the images come out green. Maybe it's the same issue? Someone in that issue says to use \"--precision full\", but this fork actually disables that flag. I don't know why, someone else provided that code and I don't know what it does. Maybe the <code>model.half()</code> suggestion above would fix this issue too. I should probably test it.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#view-size-is-not-compatible-with-input-tensors-size-and-stride","title":"\"view size is not compatible with input tensor's size and stride\"","text":"<pre><code>File \"/opt/anaconda3/envs/invokeai/lib/python3.10/site-packages/torch/nn/functional.py\", line 2511, in layer_norm\nreturn torch.layer_norm(input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled)\nRuntimeError: view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.\n</code></pre> <p>Update to the latest version of invoke-ai/InvokeAI. We were patching pytorch but we found a file in stable-diffusion that we could change instead. This is a 32-bit vs 16-bit problem.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#the-processor-must-support-the-intel-bla-bla-bla","title":"The processor must support the Intel bla bla bla","text":"<p>What? Intel? On an Apple Silicon?</p> <pre><code>Intel MKL FATAL ERROR: This system does not meet the minimum requirements for use of the Intel(R) Math Kernel Library. The processor must support the Intel(R) Supplemental Streaming SIMD Extensions 3 (Intel(R) SSSE3) instructions. The processor must support the Intel(R) Streaming SIMD Extensions 4.2 (Intel(R) SSE4.2) instructions. The processor must support the Intel(R) Advanced Vector Extensions (Intel(R) AVX) instructions.\n</code></pre> <p>This is due to the Intel <code>mkl</code> package getting picked up when you try to install something that depends on it-- Rosetta can translate some Intel instructions but not the specialized ones here. To avoid this, make sure to use the environment variable <code>CONDA_SUBDIR=osx-arm64</code>, which restricts the Conda environment to only use ARM packages, and use <code>nomkl</code> as described above.</p>"},{"location":"installation/deprecated_documentation/INSTALL_MAC/#input-types-tensor2x1280xf32-and-tensorxf16-are-not-broadcast-compatible","title":"input types 'tensor&lt;2x1280xf32&gt;' and 'tensor&lt;*xf16&gt;' are not broadcast compatible","text":"<p>May appear when just starting to generate, e.g.:</p> <pre><code>invoke&gt; clouds\nGenerating:   0%|                                                              | 0/1 [00:00&lt;?, ?it/s]/Users/[...]/dev/stable-diffusion/ldm/modules/embedding_manager.py:152: UserWarning: The operator 'aten::nonzero' is not currently supported on the MPS backend and will fall back to run on the CPU. This may have performance implications. (Triggered internally at /Users/runner/work/_temp/anaconda/conda-bld/pytorch_1662016319283/work/aten/src/ATen/mps/MPSFallback.mm:11.)\nplaceholder_idx = torch.where(\nloc(\"mps_add\"(\"(mpsFileLoc): /AppleInternal/Library/BuildRoots/20d6c351-ee94-11ec-bcaf-7247572f23b4/Library/Caches/com.apple.xbs/Sources/MetalPerformanceShadersGraph/mpsgraph/MetalPerformanceShadersGraph/Core/Files/MPSGraphUtilities.mm\":219:0)): error: input types 'tensor&lt;2x1280xf32&gt;' and 'tensor&lt;*xf16&gt;' are not broadcast compatible\nLLVM ERROR: Failed to infer result type(s).\nAbort trap: 6\n/Users/[...]/opt/anaconda3/envs/invokeai/lib/python3.9/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 1 leaked semaphore objects to clean up at shutdown\n  warnings.warn('resource_tracker: There appear to be %d '\n</code></pre>"},{"location":"installation/deprecated_documentation/INSTALL_PCP/","title":"THIS NEEDS TO BE FLESHED OUT","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#introduction","title":"Introduction","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#walkthrough","title":"Walkthrough","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#updating-to-newer-versions","title":"Updating to newer versions","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#updating-the-stable-version","title":"Updating the stable version","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#updating-to-the-development-version","title":"Updating to the development version","text":""},{"location":"installation/deprecated_documentation/INSTALL_PCP/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/","title":"The InvokeAI Source Installer","text":""},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#introduction","title":"Introduction","text":"<p>The source installer is a shell script that attempts to automate every step needed to install and run InvokeAI on a stock computer running recent versions of Linux, MacOS or Windows. It will leave you with a version that runs a stable version of InvokeAI with the option to upgrade to experimental versions later.</p> <p>Before you begin, make sure that you meet the hardware requirements and has the appropriate GPU drivers installed. In particular, if you are a Linux user with an AMD GPU installed, you may need to install the ROCm driver.</p> <p>Installation requires roughly 18G of free disk space to load the libraries and recommended model weights files.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#walk-through","title":"Walk through","text":"<p>Though there are multiple steps, there really is only one click involved to kick off the process.</p> <ol> <li> <p>The source installer is distributed in ZIP files. Go to the     latest release, and     look for a series of files named:</p> <ul> <li>invokeAI-src-installer-2.2.3-mac.zip</li> <li>invokeAI-src-installer-2.2.3-windows.zip</li> <li>invokeAI-src-installer-2.2.3-linux.zip</li> </ul> <p>Download the one that is appropriate for your operating system.</p> </li> <li> <p>Unpack the zip file into a directory that has at least 18G of free space. Do     not unpack into a directory that has an earlier version of InvokeAI.</p> <p>This will create a new directory named \"InvokeAI\". This example shows how this would look using the <code>unzip</code> command-line tool, but you may use any graphical or command-line Zip extractor:</p> <pre><code>C:\\Documents\\Linco&gt; unzip invokeAI-windows.zip\nArchive:  C: \\Linco\\Downloads\\invokeAI-linux.zip\ncreating: invokeAI\\\ninflating: invokeAI\\install.bat\ninflating: invokeAI\\readme.txt\n</code></pre> </li> <li> <p>If you are a macOS user, you may need to install the Xcode command line tools.    These are a set of tools that are needed to run certain applications in a Terminal,    including InvokeAI. This package is provided directly by Apple.</p> </li> </ol> <p>To install, open a terminal window and run <code>xcode-select --install</code>. You will get    a macOS system popup guiding you through the install. If you already have them    installed, you will instead see some output in the Terminal advising you that the    tools are already installed.</p> <p>More information can be found here:    https://www.freecodecamp.org/news/install-xcode-command-line-tools/</p> <ol> <li> <p>If you are using a desktop GUI, double-click the installer file. It will be     named <code>install.bat</code> on Windows systems and <code>install.sh</code> on Linux and     Macintosh systems.</p> </li> <li> <p>Alternatively, from the command line, run the shell script or .bat file:</p> <pre><code>C:\\Documents\\Linco&gt; cd invokeAI\nC:\\Documents\\Linco\\invokeAI&gt; install.bat\n</code></pre> </li> <li> <p>Sit back and let the install script work. It will install various binary     requirements including Conda, Git and Python, then download the current     InvokeAI code and install it along with its dependencies.</p> <p>Be aware that some of the library download and install steps take a long time. In particular, the <code>pytorch</code> package is quite large and often appears to get \"stuck\" at 99.9%. Similarly, the <code>pip installing requirements</code> step may appear to hang. Have patience and the installation step will eventually resume. However, there are occasions when the library install does legitimately get stuck. If you have been waiting for more than ten minutes and nothing is happening, you can interrupt the script with ^C. You may restart it and it will pick up where it left off.</p> </li> <li> <p>After installation completes, the installer will launch a script called     <code>configure_invokeai.py</code>, which will guide you through the first-time process of     selecting one or more Stable Diffusion model weights files, downloading and     configuring them.</p> <p>Note that the main Stable Diffusion weights file is protected by a license agreement that you must agree to in order to use. The script will list the steps you need to take to create an account on the official site that hosts the weights files, accept the agreement, and provide an access token that allows InvokeAI to legally download and install the weights files.</p> <p>If you have already downloaded the weights file(s) for another Stable Diffusion distribution, you may skip this step (by selecting \"skip\" when prompted) and configure InvokeAI to use the previously-downloaded files. The process for this is described in Installing Models.</p> </li> <li> <p>The script will now exit and you'll be ready to generate some images. The     invokeAI directory will contain numerous files. Look for a shell script     named <code>invoke.sh</code> (Linux/Mac) or <code>invoke.bat</code> (Windows). Launch the script     by double-clicking it or typing its name at the command-line:</p> <pre><code>C:\\Documents\\Linco&gt; cd invokeAI\nC:\\Documents\\Linco\\invokeAI&gt; invoke.bat\n</code></pre> </li> </ol> <p>The <code>invoke.bat</code> (<code>invoke.sh</code>) script will give you the choice of starting (1) the command-line interface, or (2) the web GUI. If you start the latter, you can load the user interface by pointing your browser at http://localhost:9090.</p> <p>The <code>invoke</code> script also offers you a third option labeled \"open the developer console\". If you choose this option, you will be dropped into a command-line interface in which you can run python commands directly, access developer tools, and launch InvokeAI with customized options. To do the latter, you would launch the script <code>scripts/invoke.py</code> as shown in this example:</p> <pre><code>python scripts/invoke.py --web --max_load_models=3 \\\n    --model=waifu-1.3 --steps=30 --outdir=C:/Documents/AIPhotos\n</code></pre> <p>These options are described in detail in the Command-Line Interface documentation.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#troubleshooting","title":"Troubleshooting","text":"<p>Package dependency conflicts If you have previously installed InvokeAI or another Stable Diffusion package, the installer may occasionally pick up outdated libraries and either the installer or <code>invoke</code> will fail with complaints out library conflicts. There are two steps you can take to clear this problem. Both of these are done from within the \"developer's console\", which you can get to by launching <code>invoke.sh</code> (or <code>invoke.bat</code>) and selecting launch option</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#3","title":"3:","text":"<ol> <li>Remove the previous <code>invokeai</code> environment completely. From within    the developer's console, give the command <code>conda env remove -n    invokeai</code>. This will delete previous files installed by <code>invoke</code>.</li> </ol> <p>Then exit from the developer's console and launch the script    <code>update.sh</code> (or <code>update.bat</code>). This will download the most recent    InvokeAI (including bug fixes) and reinstall the environment.    You should then be able to run <code>invoke.sh</code>/<code>invoke.bat</code>.</p> <ol> <li>If this doesn't work, you can try cleaning your system's conda    cache. This is slightly more extreme, but won't interfere with    any other python-based programs installed on your computer.    From the developer's console, run the command <code>conda clean -a</code>    and answer \"yes\" to all prompts.</li> </ol> <p>After this is done, run <code>update.sh</code> and try again as before.</p> <p>\"Corrupted configuration file.\"_ Everything seems to install ok, but <code>invoke</code> complains of a corrupted configuration file and goes calls <code>configure_invokeai.py</code> to fix, but this doesn't fix the problem.</p> <p>This issue is often caused by a misconfigured configuration directive in the <code>.invokeai</code> initialization file that contains startup settings. This can be corrected by fixing the offending line.</p> <p>First find <code>.invokeai</code>. It is a small text file located in your home directory, <code>~/.invokeai</code> on Mac and Linux systems, and <code>C:\\Users\\*your name*\\.invokeai</code> on Windows systems. Open it with a text editor (e.g. Notepad on Windows, TextEdit on Macs, or <code>nano</code> on Linux) and look for the lines starting with <code>--root</code> and <code>--outdir</code>.</p> <p>An example is here:</p> <pre><code>--root=\"/home/lstein/invokeai\"\n--outdir=\"/home/lstein/invokeai/outputs\"\n</code></pre> <p>There should not be whitespace before or after the directory paths, and the paths should not end with slashes:</p> <pre><code>--root=\"/home/lstein/invokeai \"     # wrong! no whitespace here\n--root=\"/home\\lstein\\invokeai\\\"     # wrong! shouldn't end in a slash\n</code></pre> <p>Fix the problem with your text editor and save as a plain text file. This should clear the issue.</p> <p>If none of these maneuvers fixes the problem then please report the problem to the InvokeAI Issues section, or visit our Discord Server for interactive assistance.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#updating-to-newer-versions","title":"Updating to newer versions","text":"<p>This section describes how to update InvokeAI to new versions of the software.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#updating-the-stable-version","title":"Updating the stable version","text":"<p>This distribution is changing rapidly, and we add new features on a daily basis. To update to the latest released version (recommended), run the <code>update.sh</code> (Linux/Mac) or <code>update.bat</code> (Windows) scripts. This will fetch the latest release and re-run the <code>configure_invokeai</code> script to download any updated models files that may be needed. You can also use this to add additional models that you did not select at installation time.</p> <p>You can now close the developer console and run <code>invoke</code> as before. If you get complaints about missing models, then you may need to do the additional step of running <code>configure_invokeai.py</code>. This happens relatively infrequently. To do this, simply open up the developer's console again and type <code>python scripts/configure_invokeai.py</code>.</p>"},{"location":"installation/deprecated_documentation/INSTALL_SOURCE/#troubleshooting_1","title":"Troubleshooting","text":"<p>If you run into problems during or after installation, the InvokeAI team is available to help you. Either create an Issue at our GitHub site, or make a request for help on the \"bugs-and-support\" channel of our Discord server. We are a 100% volunteer organization, but typically somebody will be available to help you within 24 hours, and often much sooner.</p>"},{"location":"installation/deprecated_documentation/INSTALL_WINDOWS/","title":"Windows","text":""},{"location":"installation/deprecated_documentation/INSTALL_WINDOWS/#notebook-install-semi-automated","title":"Notebook install (semi-automated)","text":"<p>We have a Jupyter notebook with cell-by-cell installation steps. It will download the code in this repo as one of the steps, so instead of cloning this repo, simply download the notebook from the link above and load it up in VSCode (with the appropriate extensions installed)/Jupyter/JupyterLab and start running the cells one-by-one.</p> <p>Note that you will need NVIDIA drivers, Python 3.10, and Git installed beforehand.</p>"},{"location":"installation/deprecated_documentation/INSTALL_WINDOWS/#manual-install-with-conda","title":"Manual Install with Conda","text":"<ol> <li> <p>Install Anaconda3 (miniconda3 version) from here</p> </li> <li> <p>Install Git from here</p> </li> <li> <p>Launch Anaconda from the Windows Start menu. This will bring up a command    window. Type all the remaining commands in this window.</p> </li> <li> <p>Run the command:</p> <pre><code>git clone https://github.com/invoke-ai/InvokeAI.git\n</code></pre> <p>This will create stable-diffusion folder where you will follow the rest of the steps.</p> </li> <li> <p>Enter the newly-created InvokeAI folder. From this step forward make sure that you are working in the InvokeAI directory!</p> <pre><code>cd InvokeAI\n</code></pre> </li> <li> <p>Run the following commands:</p> <p>For systems with a CUDA (Nvidia) card:</p> <pre><code>rmdir src      # (this is a precaution in case there is already a src directory)\nconda env create -f environment-cuda.yml\nconda activate invokeai\n(invokeai)&gt;\n</code></pre> <p>For systems with an AMD card (using ROCm driver):</p> <pre><code>rmdir src      # (this is a precaution in case there is already a src directory)\nconda env create -f environment-AMD.yml\nconda activate invokeai\n(invokeai)&gt;\n</code></pre> <p>This will install all python requirements and activate the \"invokeai\" environment which sets PATH and other environment variables properly.</p> </li> <li> <p>Load the big stable diffusion weights files and a couple of smaller machine-learning models:</p> <pre><code>python scripts/configure_invokeai.py\n</code></pre> <p>Note</p> <p>This script will lead you through the process of creating an account on Hugging Face,   accepting the terms and conditions of the Stable Diffusion model license, and   obtaining an access token for downloading. It will then download and install the   weights files for you.</p> <p>Please look here for a manual process for doing the   same thing.</p> </li> <li> <p>Start generating images!</p> <p>IMPORTANT</p> <p>Make sure that the conda environment is activated, which should create <code>(invokeai)</code> in front of your prompt!</p> CLIlocal WebserverPublic Webserver <pre><code>python scripts/invoke.py\n</code></pre> <pre><code>python scripts/invoke.py --web\n</code></pre> <pre><code>python scripts/invoke.py --web --host 0.0.0.0\n</code></pre> <p>To use an alternative model you may invoke the <code>!switch</code> command in the CLI, or pass <code>--model &lt;model_name&gt;</code> during <code>invoke.py</code> launch for either the CLI or the Web UI. See Command Line Client. The model names are defined in <code>configs/models.yaml</code>.</p> </li> <li> <p>Subsequently, to relaunch the script, first activate the Anaconda command window (step 3),enter the InvokeAI directory (step 5, <code>cd \\path\\to\\InvokeAI</code>), run <code>conda activate invokeai</code> (step 6b), and then launch the invoke script (step 9).</p> </li> </ol> <p>Tildebyte has written an alternative</p> <p>\"Easy peasy Windows install\" which uses the Windows Powershell and pew. If you are having trouble with Anaconda on Windows, give this a try (or try it first!)</p> <p>This distribution is changing rapidly. If you used the <code>git clone</code> method (step 5) to download the stable-diffusion directory, then to update to the latest and greatest version, launch the Anaconda window, enter <code>stable-diffusion</code>, and type:</p> <pre><code>git pull\nconda env update\n</code></pre> <p>This will bring your local copy into sync with the remote one.</p>"},{"location":"other/CONTRIBUTORS/","title":"Contributors","text":"<p>The list of all the amazing people who have contributed to the various features that you get to experience in this fork.</p> <p>We thank them for all of their time and hard work.</p>"},{"location":"other/CONTRIBUTORS/#original-author","title":"Original Author","text":"<ul> <li>Lincoln D. Stein</li> </ul>"},{"location":"other/CONTRIBUTORS/#current-core-team","title":"Current core team","text":"<ul> <li>@lstein (Lincoln Stein) - Co-maintainer</li> <li>@blessedcoolant - Co-maintainer</li> <li>@hipsterusername (Kent Keirsey) - Product Manager</li> <li>@psychedelicious - Web Team Leader</li> <li>@Kyle0654 (Kyle Schouviller) - Node Architect and General Backend Wizard</li> <li>@damian0815 - Attention Systems and Gameplay Engineer</li> <li>@mauwii (Matthias Wild) - Continuous integration and product maintenance engineer</li> <li>@Netsvetaev (Artur Netsvetaev) - UI/UX Developer</li> <li>@keturn - Lead for Diffusers port</li> <li>@ebr (Eugene Brodsky) - Cloud/DevOps/Sofware engineer; your friendly neighbourhood cluster-autoscaler</li> <li>@jpphoto (Jonathan Pollack) - Inference and rendering engine optimization</li> <li>@genomancer (Gregg Helt) - Model training and merging</li> <li>@gogurtenjoyer - User support and testing</li> <li>@whosawwhatsis - User support and testing</li> </ul>"},{"location":"other/CONTRIBUTORS/#contributions-by","title":"Contributions by","text":"<ul> <li>tildebyte</li> <li>Sean McLellan</li> <li>Kevin Gibbons</li> <li>Tesseract Cat</li> <li>blessedcoolant</li> <li>David Ford</li> <li>yunsaki</li> <li>James Reynolds</li> <li>David Wager</li> <li>Jason Toffaletti</li> <li>tildebyte</li> <li>Cragin Godley</li> <li>BlueAmulet</li> <li>Benjamin Warner</li> <li>Cora Johnson-Roberson</li> <li>veprogames</li> <li>JigenD</li> <li>Niek van der Maas</li> <li>Henry van Megen</li> <li>H\u00e5vard Gulldahl</li> <li>greentext2</li> <li>Simon Vans-Colina</li> <li>Gabriel Rotbart</li> <li>Eric Khun</li> <li>Brent Ozar</li> <li>nderscore</li> <li>Mikhail Tishin</li> <li>Tom Elovi Spruce</li> <li>spezialspezial</li> <li>Yosuke Shinya</li> <li>Andy Pilate</li> <li>Muhammad Usama</li> <li>Arturo Mendivil</li> <li>Paul Sajna</li> <li>Samuel Husso</li> <li>nicolai256</li> <li>Mihai</li> <li>Any Winter</li> <li>Doggettx</li> <li>Matthias Wild</li> <li>Kyle Schouviller</li> <li>rabidcopy</li> <li>Dominic Letz</li> <li>Dmitry T.</li> <li>Kent Keirsey</li> <li>psychedelicious</li> <li>damian0815</li> <li>Eugene Brodsky</li> <li>Statcomm</li> </ul>"},{"location":"other/CONTRIBUTORS/#original-compvis-authors","title":"Original CompVis Authors","text":"<ul> <li>Robin Rombach</li> <li>Patrick von Platen</li> <li>ablattmann</li> <li>Patrick Esser</li> <li>owenvincent</li> <li>apolinario</li> <li>Charles Packer</li> </ul> <p>If you have contributed and don't see your name on the list of contributors, please let one of the collaborators know about the omission, or feel free to make a pull request.</p>"},{"location":"other/README-CompViz/","title":"README from CompViz/stable-diffusion","text":"<p>Stable Diffusion was made possible thanks to a collaboration with Stability AI and Runway and builds upon our previous work:</p> <p>High-Resolution Image Synthesis with Latent Diffusion Models Robin Rombach*, Andreas Blattmann*, Dominik Lorenz\\, Patrick Esser, Bj\u00f6rn Ommer</p>"},{"location":"other/README-CompViz/#cvpr-22-oral","title":"CVPR '22 Oral","text":"<p>which is available on GitHub. PDF at arXiv. Please also visit our Project page.</p> <p> Stable Diffusion is a latent text-to-image diffusion model. Thanks to a generous compute donation from Stability AI and support from LAION, we were able to train a Latent Diffusion Model on 512x512 images from a subset of the LAION-5B database. Similar to Google's Imagen, this model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and runs on a GPU with at least 10GB VRAM. See this section below and the model card.</p>"},{"location":"other/README-CompViz/#requirements","title":"Requirements","text":"<p>A suitable conda environment named <code>ldm</code> can be created and activated with:</p> <pre><code>conda env create\nconda activate ldm\n</code></pre> <p>Note that the first line may be abbreviated <code>conda env create</code>, since conda will look for <code>environment.yml</code> by default.</p> <p>You can also update an existing latent diffusion environment by running</p> <pre><code>conda install pytorch torchvision -c pytorch\npip install transformers==4.19.2\npip install -e .\n</code></pre>"},{"location":"other/README-CompViz/#stable-diffusion-v1","title":"Stable Diffusion v1","text":"<p>Stable Diffusion v1 refers to a specific configuration of the model architecture that uses a downsampling-factor 8 autoencoder with an 860M UNet and CLIP ViT-L/14 text encoder for the diffusion model. The model was pretrained on 256x256 images and then finetuned on 512x512 images.</p> <p>*Note: Stable Diffusion v1 is a general text-to-image diffusion model and therefore mirrors biases and (mis-)conceptions that are present in its training data. Details on the training procedure and data, as well as the intended use of the model can be found in the corresponding model card. Research into the safe deployment of general text-to-image models is an ongoing effort. To prevent misuse and harm, we currently provide access to the checkpoints only for academic research purposes upon request. This is an experiment in safe and community-driven publication of a capable and general text-to-image model. We are working on a public release with a more permissive license that also incorporates ethical considerations.*</p> <p>Request access to Stable Diffusion v1 checkpoints for academic research</p>"},{"location":"other/README-CompViz/#weights","title":"Weights","text":"<p>We currently provide three checkpoints, <code>sd-v1-1.ckpt</code>, <code>sd-v1-2.ckpt</code> and <code>sd-v1-3.ckpt</code>, which were trained as follows,</p> <ul> <li><code>sd-v1-1.ckpt</code>: 237k steps at resolution <code>256x256</code> on   laion2B-en. 194k steps at   resolution <code>512x512</code> on   laion-high-resolution   (170M examples from LAION-5B with resolution <code>&gt;= 1024x1024</code>).</li> <li><code>sd-v1-2.ckpt</code>: Resumed from <code>sd-v1-1.ckpt</code>. 515k steps at resolution   <code>512x512</code> on \"laion-improved-aesthetics\" (a subset of laion2B-en, filtered to   images with an original size <code>&gt;= 512x512</code>, estimated aesthetics score <code>&gt; 5.0</code>,   and an estimated watermark probability <code>&lt; 0.5</code>. The watermark estimate is from   the LAION-5B metadata, the aesthetics score is estimated using an   improved aesthetics estimator).</li> <li><code>sd-v1-3.ckpt</code>: Resumed from <code>sd-v1-2.ckpt</code>. 195k steps at resolution   <code>512x512</code> on \"laion-improved-aesthetics\" and 10\\% dropping of the   text-conditioning to improve   classifier-free guidance sampling.</li> </ul> <p>Evaluations with different classifier-free guidance scales (1.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0) and 50 PLMS sampling steps show the relative improvements of the checkpoints: </p>"},{"location":"other/README-CompViz/#text-to-image-with-stable-diffusion","title":"Text-to-Image with Stable Diffusion","text":"<p>Stable Diffusion is a latent diffusion model conditioned on the (non-pooled) text embeddings of a CLIP ViT-L/14 text encoder.</p>"},{"location":"other/README-CompViz/#sampling-script","title":"Sampling Script","text":"<p>After obtaining the weights, link them</p> <pre><code>mkdir -p models/ldm/stable-diffusion-v1/\nln -s &lt;path/to/model.ckpt&gt; models/ldm/stable-diffusion-v1/model.ckpt\n</code></pre> <p>and sample with</p> <pre><code>python scripts/txt2img.py --prompt \"a photograph of an astronaut riding a horse\" --plms\n</code></pre> <p>By default, this uses a guidance scale of <code>--scale 7.5</code>, Katherine Crowson's implementation of the PLMS sampler, and renders images of size 512x512 (which it was trained on) in 50 steps. All supported arguments are listed below (type <code>python scripts/txt2img.py --help</code>).</p> <pre><code>usage: txt2img.py [-h] [--prompt [PROMPT]] [--outdir [OUTDIR]] [--skip_grid] [--skip_save] [--ddim_steps DDIM_STEPS] [--plms] [--laion400m] [--fixed_code] [--ddim_eta DDIM_ETA] [--n_iter N_ITER] [--H H] [--W W] [--C C] [--f F] [--n_samples N_SAMPLES] [--n_rows N_ROWS]\n                  [--scale SCALE] [--from-file FROM_FILE] [--config CONFIG] [--ckpt CKPT] [--seed SEED] [--precision {full,autocast}]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --prompt [PROMPT]     the prompt to render\n  --outdir [OUTDIR]     dir to write results to\n  --skip_grid           do not save a grid, only individual samples. Helpful when evaluating lots of samples\n  --skip_save           do not save individual samples. For speed measurements.\n  --ddim_steps DDIM_STEPS\n                        number of ddim sampling steps\n  --plms                use plms sampling\n  --laion400m           uses the LAION400M model\n  --fixed_code          if enabled, uses the same starting code across samples\n  --ddim_eta DDIM_ETA   ddim eta (eta=0.0 corresponds to deterministic sampling\n  --n_iter N_ITER       sample this often\n  --H H                 image height, in pixel space\n  --W W                 image width, in pixel space\n  --C C                 latent channels\n  --f F                 downsampling factor\n  --n_samples N_SAMPLES\n                        how many samples to produce for each given prompt. A.k.a. batch size\n                        (note that the seeds for each image in the batch will be unavailable)\n  --n_rows N_ROWS       rows in the grid (default: n_samples)\n  --scale SCALE         unconditional guidance scale: eps = eps(x, empty) + scale * (eps(x, cond) - eps(x, empty))\n  --from-file FROM_FILE\n                        if specified, load prompts from this file\n  --config CONFIG       path to config which constructs model\n  --ckpt CKPT           path to checkpoint of model\n  --seed SEED           the seed (for reproducible sampling)\n  --precision {full,autocast}\n                        evaluate at this precision\n</code></pre> <p>Note: The inference config for all v1 versions is designed to be used with EMA-only checkpoints. For this reason <code>use_ema=False</code> is set in the configuration, otherwise the code will try to switch from non-EMA to EMA weights. If you want to examine the effect of EMA vs no EMA, we provide \"full\" checkpoints which contain both types of weights. For these, <code>use_ema=False</code> will load and use the non-EMA weights.</p>"},{"location":"other/README-CompViz/#diffusers-integration","title":"Diffusers Integration","text":"<p>Another way to download and sample Stable Diffusion is by using the diffusers library</p> <pre><code># make sure you're logged in with `huggingface-cli login`\nfrom torch import autocast\nfrom diffusers import StableDiffusionPipeline, LMSDiscreteScheduler\npipe = StableDiffusionPipeline.from_pretrained(\n\"CompVis/stable-diffusion-v1-3-diffusers\",\nuse_auth_token=True\n)\nprompt = \"a photo of an astronaut riding a horse on mars\"\nwith autocast(\"cuda\"):\nimage = pipe(prompt)[\"sample\"][0]\nimage.save(\"astronaut_rides_horse.png\")\n</code></pre>"},{"location":"other/README-CompViz/#image-modification-with-stable-diffusion","title":"Image Modification with Stable Diffusion","text":"<p>By using a diffusion-denoising mechanism as first proposed by SDEdit, the model can be used for different tasks such as text-guided image-to-image translation and upscaling. Similar to the txt2img sampling script, we provide a script to perform image modification with Stable Diffusion.</p> <p>The following describes an example where a rough sketch made in Pinta is converted into a detailed artwork.</p> <pre><code>python scripts/img2img.py --prompt \"A fantasy landscape, trending on artstation\" --init-img &lt;path-to-img.jpg&gt; --strength 0.8\n</code></pre> <p>Here, strength is a value between 0.0 and 1.0, that controls the amount of noise that is added to the input image. Values that approach 1.0 allow for lots of variations but will also produce images that are not semantically consistent with the input. See the following example.</p> <p>Input</p> <p></p> <p>Outputs</p> <p> </p> <p>This procedure can, for example, also be used to upscale samples from the base model.</p>"},{"location":"other/README-CompViz/#comments","title":"Comments","text":"<ul> <li> <p>Our codebase for the diffusion models builds heavily on   OpenAI's ADM codebase and   https://github.com/lucidrains/denoising-diffusion-pytorch.   Thanks for open-sourcing!</p> </li> <li> <p>The implementation of the transformer encoder is from   x-transformers by   lucidrains.</p> </li> </ul>"},{"location":"other/README-CompViz/#bibtex","title":"BibTeX","text":"<pre><code>@misc{rombach2021highresolution,\n      title={High-Resolution Image Synthesis with Latent Diffusion Models},\n      author={Robin Rombach and Andreas Blattmann and Dominik Lorenz and Patrick Esser and Bj\u00f6rn Ommer},\n      year={2021},\n      eprint={2112.10752},\n      archivePrefix={arXiv},\n      primaryClass={cs.CV}\n}\n</code></pre>"},{"location":"other/TRANSLATION/","title":"Translation","text":"<p>InvokeAI uses Weblate for translation. Weblate is a FOSS project providing a scalable translation service. Weblate automates the tedious parts of managing translation of a growing project, and the service is generously provided at no cost to FOSS projects like InvokeAI.</p>"},{"location":"other/TRANSLATION/#contributing","title":"Contributing","text":"<p>If you'd like to contribute by adding or updating a translation, please visit our Weblate project. You'll need to sign in with your GitHub account (a number of other accounts are supported, including Google).</p> <p>Once signed in, select a language and then the Web UI component. From here you can Browse and Translate strings from English to your chosen language. Zen mode offers a simpler translation experience.</p> <p>Your changes will be attributed to you in the automated PR process; you don't need to do anything else.</p>"},{"location":"other/TRANSLATION/#help-questions","title":"Help &amp; Questions","text":"<p>Please check Weblate's documentation or ping @psychedelicious or @blessedcoolant on Discord if you have any questions.</p>"},{"location":"other/TRANSLATION/#thanks","title":"Thanks","text":"<p>Thanks to the InvokeAI community for their efforts to translate the project!</p>"}]}